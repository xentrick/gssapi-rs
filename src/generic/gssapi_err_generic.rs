/* ! defined(__COM_ERR_H) */
pub use crate::com_err_h::add_error_table;
pub use crate::com_err_h::errcode_t;
pub use crate::com_err_h::error_table;
/* Lclint doesn't handle null annotations on arrays
properly, so we need this typedef in each
generated .c file.  */
/*@-redef@*/

pub type ncptr = *const i8;
/*@null@*/
/*@=redef@*/

static mut text: [ncptr; 22] = [
    b"No @ in SERVICE-NAME name string\x00" as *const u8 as *const i8,
    b"STRING-UID-NAME contains nondigits\x00" as *const u8 as *const i8,
    b"UID does not resolve to username\x00" as *const u8 as *const i8,
    b"Validation error\x00" as *const u8 as *const i8,
    b"Couldn\'t allocate gss_buffer_t data\x00" as *const u8 as *const i8,
    b"Message context invalid\x00" as *const u8 as *const i8,
    b"Buffer is the wrong size\x00" as *const u8 as *const i8,
    b"Credential usage type is unknown\x00" as *const u8 as *const i8,
    b"Unknown quality of protection specified\x00" as *const u8 as *const i8,
    b"Local host name could not be determined\x00" as *const u8 as *const i8,
    b"Hostname in SERVICE-NAME string could not be canonicalized\x00" as *const u8 as *const i8,
    b"Mechanism is incorrect\x00" as *const u8 as *const i8,
    b"Token header is malformed or corrupt\x00" as *const u8 as *const i8,
    b"Packet was replayed in wrong direction\x00" as *const u8 as *const i8,
    b"Token is missing data\x00" as *const u8 as *const i8,
    b"Token was reflected\x00" as *const u8 as *const i8,
    b"Received token ID does not match expected token ID\x00" as *const u8 as *const i8,
    b"The given credential\'s usage does not match the requested usage\x00" as *const u8
        as *const i8,
    b"Storing of acceptor credentials is not supported by the mechanism\x00" as *const u8
        as *const i8,
    b"Storing of non-default credentials is not supported by the mechanism\x00" as *const u8
        as *const i8,
    b"mit-krb5\x00" as *const u8 as *const i8,
    0 as ncptr,
];
#[no_mangle]

pub static mut et_ggss_error_table: crate::com_err_h::error_table = unsafe {
    {
        let mut init = crate::com_err_h::error_table {
            msgs: text.as_ptr(),
            base: -(2045022976 as isize),
            n_msgs: 20u32,
        };
        init
    }
};
/*
 * et-c-gssapi_err_generic.c:
 * This file is automatically generated; please do not edit it.
 */
#[no_mangle]

pub unsafe extern "C" fn initialize_ggss_error_table()
/*@modifies internalState@*/
{
    crate::com_err_h::add_error_table(&et_ggss_error_table);
}
