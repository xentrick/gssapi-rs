use ::libc;
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/com_err.h:44"]
pub mod com_err_h {
    /*
 * Copyright 1988, Student Information Processing Board of the
 * Massachusetts Institute of Technology.
 *
 * Copyright 1995 by Cygnus Support.
 *
 * For copyright and distribution info, see the documentation supplied
 * with this package.
 */
    /* Header file for common error description library. */
    #[c2rust::src_loc = "26:1"]
    pub type errcode_t = libc::c_long;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "30:8"]
    pub struct error_table {
        pub msgs: *const *const libc::c_char,
        pub base: libc::c_long,
        pub n_msgs: libc::c_uint,
    }
    extern "C" {
        /*@modifies internalState@*/
        #[no_mangle]
        #[c2rust::src_loc = "57:1"]
        pub fn add_error_table(_: *const error_table) -> errcode_t;
    }
    /* ! defined(__COM_ERR_H) */
}
pub use self::com_err_h::{errcode_t, error_table, add_error_table};
/* Lclint doesn't handle null annotations on arrays
   properly, so we need this typedef in each
   generated .c file.  */
/*@-redef@*/
#[c2rust::src_loc = "19:1"]
pub type ncptr = *const libc::c_char;
/*@null@*/
/*@=redef@*/
#[c2rust::src_loc = "22:20"]
static mut text: [ncptr; 19] =
    [b"Principal in credential cache does not match desired name\x00" as
         *const u8 as *const libc::c_char,
     b"No principal in keytab matches desired name\x00" as *const u8 as
         *const libc::c_char,
     b"Credential cache has no TGT\x00" as *const u8 as *const libc::c_char,
     b"Authenticator has no subkey\x00" as *const u8 as *const libc::c_char,
     b"Context is already fully established\x00" as *const u8 as
         *const libc::c_char,
     b"Unknown signature type in token\x00" as *const u8 as
         *const libc::c_char,
     b"Invalid field length in token\x00" as *const u8 as *const libc::c_char,
     b"Attempt to use incomplete security context\x00" as *const u8 as
         *const libc::c_char,
     b"Bad magic number for krb5_gss_ctx_id_t\x00" as *const u8 as
         *const libc::c_char,
     b"Bad magic number for krb5_gss_cred_id_t\x00" as *const u8 as
         *const libc::c_char,
     b"Bad magic number for krb5_gss_enc_desc\x00" as *const u8 as
         *const libc::c_char,
     b"Sequence number in token is corrupt\x00" as *const u8 as
         *const libc::c_char,
     b"Credential cache is empty\x00" as *const u8 as *const libc::c_char,
     b"Acceptor and Initiator share no checksum types\x00" as *const u8 as
         *const libc::c_char,
     b"Requested lucid context version not supported\x00" as *const u8 as
         *const libc::c_char,
     b"PRF input too long\x00" as *const u8 as *const libc::c_char,
     b"Bad magic number for iakerb_ctx_id_t\x00" as *const u8 as
         *const libc::c_char,
     b"mit-krb5\x00" as *const u8 as *const libc::c_char, 0 as ncptr];
#[no_mangle]
#[c2rust::src_loc = "46:26"]
pub static mut et_k5g_error_table: error_table =
    unsafe {
        {
            let mut init =
                error_table{msgs: text.as_ptr(),
                            base: 39756032 as libc::c_long,
                            n_msgs: 17 as libc::c_int as libc::c_uint,};
            init
        }
    };
/*
 * et-c-gssapi_err_krb5.c:
 * This file is automatically generated; please do not edit it.
 */
#[no_mangle]
#[c2rust::src_loc = "49:1"]
pub unsafe extern "C" fn initialize_k5g_error_table() 
 /*@modifies internalState@*/
 {
    add_error_table(&et_k5g_error_table);
}
