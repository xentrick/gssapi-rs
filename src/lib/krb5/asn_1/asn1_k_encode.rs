use ::libc;
use ::c2rust_bitfields;
#[c2rust::header_src = "/usr/include/bits/types.h:27"]
pub mod types_h {
    #[c2rust::src_loc = "38:1"]
    pub type __uint8_t = libc::c_uchar;
    #[c2rust::src_loc = "41:1"]
    pub type __int32_t = libc::c_int;
    #[c2rust::src_loc = "42:1"]
    pub type __uint32_t = libc::c_uint;
    #[c2rust::src_loc = "72:1"]
    pub type __intmax_t = libc::c_long;
    #[c2rust::src_loc = "73:1"]
    pub type __uintmax_t = libc::c_ulong;
    #[c2rust::src_loc = "160:1"]
    pub type __time_t = libc::c_long;
}
#[c2rust::header_src = "/usr/include/bits/types/time_t.h:27"]
pub mod time_t_h {
    #[c2rust::src_loc = "7:1"]
    pub type time_t = __time_t;
    use super::types_h::__time_t;
}
#[c2rust::header_src = "/usr/lib/clang/9.0.1/include/stddef.h:27"]
pub mod stddef_h {
    #[c2rust::src_loc = "46:1"]
    pub type size_t = libc::c_ulong;
}
#[c2rust::header_src = "/usr/include/bits/stdint-intn.h:27"]
pub mod stdint_intn_h {
    #[c2rust::src_loc = "26:1"]
    pub type int32_t = __int32_t;
    use super::types_h::__int32_t;
}
#[c2rust::header_src = "/usr/include/bits/stdint-uintn.h:27"]
pub mod stdint_uintn_h {
    #[c2rust::src_loc = "24:1"]
    pub type uint8_t = __uint8_t;
    #[c2rust::src_loc = "26:1"]
    pub type uint32_t = __uint32_t;
    use super::types_h::{__uint8_t, __uint32_t};
}
#[c2rust::header_src = "/usr/include/stdint.h:27"]
pub mod stdint_h {
    #[c2rust::src_loc = "101:1"]
    pub type intmax_t = __intmax_t;
    #[c2rust::src_loc = "102:1"]
    pub type uintmax_t = __uintmax_t;
    use super::types_h::{__intmax_t, __uintmax_t};
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/k5-platform.h:27"]
pub mod k5_platform_h {
    #[derive(Copy, Clone)]
    #[repr(C, packed)]
    #[c2rust::src_loc = "574:5"]
    pub struct C2RustUnnamed {
        pub i: uint32_t,
    }
    #[inline]
    #[c2rust::src_loc = "567:1"]
    pub unsafe extern "C" fn store_32_be(mut val: libc::c_uint,
                                         mut vp: *mut libc::c_void) {
        let mut p: *mut libc::c_uchar = vp as *mut libc::c_uchar;
        (*(p as *mut C2RustUnnamed)).i = __bswap_32(val);
    }
    use super::stdint_uintn_h::uint32_t;
    use super::byteswap_h::__bswap_32;
    /* K5_PLATFORM_H */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/krb5/krb5.h:27"]
pub mod krb5_h {
    /* typedef struct _profile_t *profile_t; */
    /*
 * begin wordsize.h
 */
    /*
 * Word-size related definition.
 */
    #[c2rust::src_loc = "136:1"]
    pub type krb5_octet = uint8_t;
    #[c2rust::src_loc = "139:1"]
    pub type krb5_int32 = int32_t;
    #[c2rust::src_loc = "140:1"]
    pub type krb5_ui_4 = uint32_t;
    /* this strange form is necessary since - is a unary operator, not a sign
   indicator */
    /* this strange form is necessary since - is a unary operator, not a sign
   indicator */
    /*
 * end wordsize.h
 */
    /*
 * begin "base-defs.h"
 */
    /*
 * Basic definitions for Kerberos V5 library
 */
    #[c2rust::src_loc = "174:1"]
    pub type krb5_boolean = libc::c_uint;
    #[c2rust::src_loc = "175:1"]
    pub type krb5_msgtype = libc::c_uint;
    #[c2rust::src_loc = "176:1"]
    pub type krb5_kvno = libc::c_uint;
    #[c2rust::src_loc = "178:1"]
    pub type krb5_addrtype = krb5_int32;
    #[c2rust::src_loc = "179:1"]
    pub type krb5_enctype = krb5_int32;
    #[c2rust::src_loc = "180:1"]
    pub type krb5_cksumtype = krb5_int32;
    #[c2rust::src_loc = "181:1"]
    pub type krb5_authdatatype = krb5_int32;
    #[c2rust::src_loc = "185:1"]
    pub type krb5_preauthtype = krb5_int32;
    /* This may change, later on */
    #[c2rust::src_loc = "186:1"]
    pub type krb5_flags = krb5_int32;
    /* *
 * Represents a timestamp in seconds since the POSIX epoch.  This legacy type
 * is used frequently in the ABI, but cannot represent timestamps after 2038 as
 * a positive number.  Code which uses this type should cast values of it to
 * uint32_t so that negative values are treated as timestamps between 2038 and
 * 2106 on platforms with 64-bit time_t.
 */
    #[c2rust::src_loc = "195:1"]
    pub type krb5_timestamp = krb5_int32;
    #[c2rust::src_loc = "197:1"]
    pub type krb5_deltat = krb5_int32;
    /* *
 * Used to convey an operation status.  The value 0 indicates success; any
 * other values are com_err codes.  Use krb5_get_error_message() to obtain a
 * string describing the error.
 */
    #[c2rust::src_loc = "204:1"]
    pub type krb5_error_code = krb5_int32;
    #[c2rust::src_loc = "206:1"]
    pub type krb5_magic = krb5_error_code;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "208:16"]
    pub struct _krb5_data {
        pub magic: krb5_magic,
        pub length: libc::c_uint,
        pub data: *mut libc::c_char,
    }
    #[c2rust::src_loc = "208:1"]
    pub type krb5_data = _krb5_data;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "228:16"]
    pub struct krb5_principal_data {
        pub magic: krb5_magic,
        pub realm: krb5_data,
        pub data: *mut krb5_data,
        pub length: krb5_int32,
        pub type_0: krb5_int32,
    }
    #[c2rust::src_loc = "236:1"]
    pub type krb5_principal = *mut krb5_principal_data;
    /*
 * Per V5 spec on definition of principal types
 */
    /* *<  Name type not known */
    /* *< Just the name of the principal
                                      as in DCE, or for users */
    /* *< Service and other unique instance (krbtgt) */
    /* *< Service with host name as instance
                                      (telnet, rcommands) */
    /* *< Service with host as remaining components */
    /* *< Unique ID */
    /* *< PKINIT */
    /* *< Name in form of SMTP email name */
    /* *< Windows 2000 UPN */
    /* *< Well-known (special) principal */
    /* *< First component of
                                                NT_WELLKNOWN principals */
    /* *< Windows 2000 UPN and SID */
    /* *< NT 4 style name */
    /* *< NT 4 style name and SID */
    /* * Constant version of krb5_principal_data */
    #[c2rust::src_loc = "261:1"]
    pub type krb5_const_principal = *const krb5_principal_data;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "323:16"]
    pub struct _krb5_address {
        pub magic: krb5_magic,
        pub addrtype: krb5_addrtype,
        pub length: libc::c_uint,
        pub contents: *mut krb5_octet,
    }
    /* *< Anonymous realm */
    /* *< Anonymous principal name */
    /*
 * end "base-defs.h"
 */
    /*
 * begin "hostaddr.h"
 */
    /* * Structure for address */
    #[c2rust::src_loc = "323:1"]
    pub type krb5_address = _krb5_address;
    /* *
 * Hook function for inspecting or overriding KDC replies.
 *
 * @param [in]  context         Library context
 * @param [in]  data            Callback data
 * @param [in]  code            Status of KDC communication
 * @param [in]  realm           The realm the reply was received from
 * @param [in]  message         The message sent to the realm's KDC
 * @param [in]  reply           The reply received from the KDC
 * @param [out] new_reply_out   Optional replacement reply
 *
 * If @a code is zero, @a reply contains the reply received from the KDC.  The
 * hook function may return an error code to simulate an error, may synthesize
 * a different reply by setting @a new_reply_out, or may simply return
 * successfully to do nothing.
 *
 * If @a code is non-zero, KDC communication failed and @a reply should be
 * ignored.  The hook function may return @a code or a different error code, or
 * may synthesize a reply by setting @a new_reply_out and return successfully.
 *
 * The hook function should use krb5_copy_data() to construct the value for
 * @a new_reply_out, to ensure that it can be freed correctly by the library.
 *
 * @version New in 1.15
 *
 * @retval 0 Success
 * @return A Kerberos error code
 */
    #[c2rust::src_loc = "8510:1"]
    pub type krb5_post_recv_fn
        =
        Option<unsafe extern "C" fn(_: krb5_context, _: *mut libc::c_void,
                                    _: krb5_error_code, _: *const krb5_data,
                                    _: *const krb5_data, _: *const krb5_data,
                                    _: *mut *mut krb5_data)
                   -> krb5_error_code>;
    /* per Kerberos v5 protocol spec */
    /* not yet in the spec... */
    /* macros to determine if a type is a local type */
    /*
 * end "hostaddr.h"
 */
    #[c2rust::src_loc = "351:1"]
    pub type krb5_context = *mut _krb5_context;
    /* * Store options for @c _krb5_get_init_creds */
    /* *
 * Allocate a new initial credential options structure.
 *
 * @param [in]  context         Library context
 * @param [out] opt             New options structure
 *
 * This function is the preferred way to create an options structure for
 * getting initial credentials, and is required to make use of certain options.
 * Use krb5_get_init_creds_opt_free() to free @a opt when it is no longer
 * needed.
 *
 * @retval 0 - Success; Kerberos errors otherwise.
 */
    /* *
 * Free initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options structure to free
 *
 * @sa krb5_get_init_creds_opt_alloc()
 */
    /* * @deprecated Use krb5_get_init_creds_opt_alloc() instead. */
    /* *
 * Set the ticket lifetime in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] tkt_life         Ticket lifetime
 */
    /* *
 * Set the ticket renewal lifetime in initial credential options.
 *
 * @param [in] opt              Pointer to @a options field
 * @param [in] renew_life       Ticket renewal lifetime
 */
    /* *
 * Set or unset the forwardable flag in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] forwardable      Whether credentials should be forwardable
 */
    /* *
 * Set or unset the proxiable flag in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] proxiable        Whether credentials should be proxiable
 */
    /* *
 * Set or unset the canonicalize flag in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] canonicalize     Whether to canonicalize client principal
 */
    /* *
 * Set or unset the anonymous flag in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] anonymous        Whether to make an anonymous request
 *
 * This function may be used to request anonymous credentials from the KDC by
 * setting @a anonymous to non-zero.  Note that anonymous credentials are only
 * a request; clients must verify that credentials are anonymous if that is a
 * requirement.
 */
    /* *
 * Set allowable encryption types in initial credential options.
 *
 * @param [in] opt               Options structure
 * @param [in] etype_list        Array of encryption types
 * @param [in] etype_list_length Length of @a etype_list
 */
    /* *
 * Set address restrictions in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] addresses        Null-terminated array of addresses
 */
    /* *
 * Set preauthentication types in initial credential options.
 *
 * @param [in] opt                 Options structure
 * @param [in] preauth_list        Array of preauthentication types
 * @param [in] preauth_list_length Length of @a preauth_list
 *
 * This function can be used to perform optimistic preauthentication when
 * getting initial credentials, in combination with
 * krb5_get_init_creds_opt_set_salt() and krb5_get_init_creds_opt_set_pa().
 */
    /* *
 * Set salt for optimistic preauthentication in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] salt             Salt data
 *
 * When getting initial credentials with a password, a salt string it used to
 * convert the password to a key.  Normally this salt is obtained from the
 * first KDC reply, but when performing optimistic preauthentication, the
 * client may need to supply the salt string with this function.
 */
    /* *
 * Set or unset change-password-prompt flag in initial credential options.
 *
 * @param [in] opt              Options structure
 * @param [in] prompt           Whether to prompt to change password
 *
 * This flag is on by default.  It controls whether
 * krb5_get_init_creds_password() will react to an expired-password error by
 * prompting for a new password and attempting to change the old one.
 */
    /* * Generic preauth option attribute/value pairs */
    /* *
 * Supply options for preauthentication in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options structure
 * @param [in] attr             Preauthentication option name
 * @param [in] value            Preauthentication option value
 *
 * This function allows the caller to supply options for preauthentication.
 * The values of @a attr and @a value are supplied to each preauthentication
 * module available within @a context.
 */
    /* *
 * Set location of FAST armor ccache in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options
 * @param [in] fast_ccache_name Credential cache name
 *
 * Sets the location of a credential cache containing an armor ticket to
 * protect an initial credential exchange using the FAST protocol extension.
 *
 * In version 1.7, setting an armor ccache requires that FAST be used for the
 * exchange.  In version 1.8 or later, setting the armor ccache causes FAST to
 * be used if the KDC supports it; krb5_get_init_creds_opt_set_fast_flags()
 * must be used to require that FAST be used.
 */
    /* *
 * Set FAST armor cache in initial credential options.
 *
 * @param [in] context           Library context
 * @param [in] opt               Options
 * @param [in] ccache            Credential cache handle
 *
 * This function is similar to krb5_get_init_creds_opt_set_fast_ccache_name(),
 * but uses a credential cache handle instead of a name.
 *
 * @version New in 1.9
 */
    /* *
 * Set an input credential cache in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options
 * @param [in] ccache           Credential cache handle
 *
 * If an input credential cache is set, then the krb5_get_init_creds family of
 * APIs will read settings from it.  Setting an input ccache is desirable when
 * the application wishes to perform authentication in the same way (using the
 * same preauthentication mechanisms, and making the same non-security-
 * sensitive choices) as the previous authentication attempt, which stored
 * information in the passed-in ccache.
 *
 * @version New in 1.11
 */
    /* *
 * Set an output credential cache in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options
 * @param [in] ccache           Credential cache handle
 *
 * If an output credential cache is set, then the krb5_get_init_creds family of
 * APIs will write credentials to it.  Setting an output ccache is desirable
 * both because it simplifies calling code and because it permits the
 * krb5_get_init_creds APIs to write out configuration information about the
 * realm to the ccache.
 */
    /* *
 * @brief Ask the KDC to include or not include a PAC in the ticket
 *
 * @param [in] context          Library context
 * @param [in] opt              Options structure
 * @param [in] req_pac          Whether to request a PAC or not
 *
 * If this option is set, the AS request will include a PAC-REQUEST pa-data
 * item explicitly asking the KDC to either include or not include a privilege
 * attribute certificate in the ticket authorization data.  By default, no
 * request is made; typically the KDC will default to including a PAC if it
 * supports them.
 *
 * @version New in 1.15
 */
    /* *
 * Set FAST flags in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options
 * @param [in] flags            FAST flags
 *
 * The following flag values are valid:
 * @li #KRB5_FAST_REQUIRED - Require FAST to be used
 *
 * @retval
 * 0 - Success; Kerberos errors otherwise.
 */
    /* *
 * Retrieve FAST flags from initial credential options.
 *
 * @param [in]  context         Library context
 * @param [in]  opt             Options
 * @param [out] out_flags       FAST flags
 *
 * @retval
 * 0 - Success; Kerberos errors otherwise.
 */
    /* Fast flags*/
    /* *< Require KDC to support FAST*/
    /* *
 * Set an expiration callback in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options structure
 * @param [in] cb               Callback function
 * @param [in] data             Callback argument
 *
 * Set a callback to receive password and account expiration times.
 *
 * This option only applies to krb5_get_init_creds_password().  @a cb will be
 * invoked if and only if credentials are successfully acquired.  The callback
 * will receive the @a context from the krb5_get_init_creds_password() call and
 * the @a data argument supplied with this API.  The remaining arguments should
 * be interpreted as follows:
 *
 * If @a is_last_req is true, then the KDC reply contained last-req entries
 * which unambiguously indicated the password expiration, account expiration,
 * or both.  (If either value was not present, the corresponding argument will
 * be 0.)  Furthermore, a non-zero @a password_expiration should be taken as a
 * suggestion from the KDC that a warning be displayed.
 *
 * If @a is_last_req is false, then @a account_expiration will be 0 and @a
 * password_expiration will contain the expiration time of either the password
 * or account, or 0 if no expiration time was indicated in the KDC reply.  The
 * callback should independently decide whether to display a password
 * expiration warning.
 *
 * Note that @a cb may be invoked even if credentials are being acquired for
 * the kadmin/changepw service in order to change the password.  It is the
 * caller's responsibility to avoid displaying a password expiry warning in
 * this case.
 *
 * @warning Setting an expire callback with this API will cause
 * krb5_get_init_creds_password() not to send password expiry warnings to the
 * prompter, as it ordinarily may.
 *
 * @version New in 1.9
 */
    /* *
 * Set the responder function in initial credential options.
 *
 * @param [in] context          Library context
 * @param [in] opt              Options structure
 * @param [in] responder        Responder function
 * @param [in] data             Responder data argument
 *
 * @version New in 1.11
 */
    /* *
 * Get initial credentials using a password.
 *
 * @param [in]  context         Library context
 * @param [out] creds           New credentials
 * @param [in]  client          Client principal
 * @param [in]  password        Password (or NULL)
 * @param [in]  prompter        Prompter function
 * @param [in]  data            Prompter callback data
 * @param [in]  start_time      Time when ticket becomes valid (0 for now)
 * @param [in]  in_tkt_service  Service name of initial credentials (or NULL)
 * @param [in]  k5_gic_options  Initial credential options
 *
 * This function requests KDC for an initial credentials for @a client using @a
 * password.  If @a password is NULL, a password will be prompted for using @a
 * prompter if necessary.  If @a in_tkt_service is specified, it is parsed as a
 * principal name (with the realm ignored) and used as the service principal
 * for the request; otherwise the ticket-granting service is used.
 *
 * @sa krb5_verify_init_creds()
 *
 * @retval
 *  0    Success
 * @retval
 *  EINVAL Invalid argument
 * @retval
 *  KRB5_KDC_UNREACH Cannot contact any KDC for requested realm
 * @retval
 *  KRB5_PREAUTH_FAILED Generic Pre-athentication failure
 * @retval
 *  KRB5_LIBOS_PWDINTR Password read interrupted
 * @retval
 *  KRB5_REALM_CANT_RESOLVE Cannot resolve network address for KDC in requested realm
 * @retval
 *  KRB5KDC_ERR_KEY_EXP Password has expired
 * @retval
 *  KRB5_LIBOS_BADPWDMATCH Password mismatch
 * @retval
 *  KRB5_CHPW_PWDNULL New password cannot be zero length
 * @retval
 *  KRB5_CHPW_FAIL Password change failed
 * @return
 * Kerberos error codes
 */
    /* *
 * Retrieve enctype, salt and s2kparams from KDC
 *
 * @param [in]  context         Library context
 * @param [in]  principal       Principal whose information is requested
 * @param [in]  opt             Initial credential options
 * @param [out] enctype_out     The enctype chosen by KDC
 * @param [out] salt_out        Salt returned from KDC
 * @param [out] s2kparams_out   String-to-key parameters returned from KDC
 *
 * Send an initial ticket request for @a principal and extract the encryption
 * type, salt type, and string-to-key parameters from the KDC response.  If the
 * KDC provides no etype-info, set @a enctype_out to @c ENCTYPE_NULL and set @a
 * salt_out and @a s2kparams_out to empty.  If the KDC etype-info provides no
 * salt, compute the default salt and place it in @a salt_out.  If the KDC
 * etype-info provides no string-to-key parameters, set @a s2kparams_out to
 * empty.
 *
 * @a opt may be used to specify options which affect the initial request, such
 * as request encryption types or a FAST armor cache (see
 * krb5_get_init_creds_opt_set_etype_list() and
 * krb5_get_init_creds_opt_set_fast_ccache_name()).
 *
 * Use krb5_free_data_contents() to free @a salt_out and @a s2kparams_out when
 * they are no longer needed.
 *
 * @version New in 1.17
 *
 * @retval 0 Success
 * @return A Kerberos error code
 */
    /* *< More responses needed */
    /* *
 * Free an initial credentials context.
 *
 * @param [in] context          Library context
 * @param [in] ctx              Initial credentials context
 *
 * @a context must be the same as the one passed to krb5_init_creds_init() for
 * this initial credentials context.
 */
    /* *
 * Acquire credentials using an initial credentials context.
 *
 * @param [in] context          Library context
 * @param [in] ctx              Initial credentials context
 *
 * This function synchronously obtains credentials using a context created by
 * krb5_init_creds_init().  On successful return, the credentials can be
 * retrieved with krb5_init_creds_get_creds().
 *
 * @a context must be the same as the one passed to krb5_init_creds_init() for
 * this initial credentials context.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Retrieve acquired credentials from an initial credentials context.
 *
 * @param [in]  context         Library context
 * @param [in]  ctx             Initial credentials context
 * @param [out] creds           Acquired credentials
 *
 * This function copies the acquired initial credentials from @a ctx into @a
 * creds, after the successful completion of krb5_init_creds_get() or
 * krb5_init_creds_step().  Use krb5_free_cred_contents() to free @a creds when
 * it is no longer needed.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Get the last error from KDC from an initial credentials context.
 *
 * @param [in]  context         Library context
 * @param [in]  ctx             Initial credentials context
 * @param [out] error           Error from KDC, or NULL if none was received
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Create a context for acquiring initial credentials.
 *
 * @param [in]  context         Library context
 * @param [in]  client          Client principal to get initial creds for
 * @param [in]  prompter        Prompter callback
 * @param [in]  data            Prompter callback argument
 * @param [in]  start_time      Time when credentials become valid (0 for now)
 * @param [in]  options         Options structure (NULL for default)
 * @param [out] ctx             New initial credentials context
 *
 * This function creates a new context for acquiring initial credentials.  Use
 * krb5_init_creds_free() to free @a ctx when it is no longer needed.
 *
 * Any subsequent calls to krb5_init_creds_step(), krb5_init_creds_get(), or
 * krb5_init_creds_free() for this initial credentials context must use the
 * same @a context argument as the one passed to this function.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Specify a keytab to use for acquiring initial credentials.
 *
 * @param [in] context          Library context
 * @param [in] ctx              Initial credentials context
 * @param [in] keytab           Key table handle
 *
 * This function supplies a keytab containing the client key for an initial
 * credentials request.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Get the next KDC request for acquiring initial credentials.
 *
 * @param [in]  context         Library context
 * @param [in]  ctx             Initial credentials context
 * @param [in]  in              KDC response (empty on the first call)
 * @param [out] out             Next KDC request
 * @param [out] realm           Realm for next KDC request
 * @param [out] flags           Output flags
 *
 * This function constructs the next KDC request in an initial credential
 * exchange, allowing the caller to control the transport of KDC requests and
 * replies.  On the first call, @a in should be set to an empty buffer; on
 * subsequent calls, it should be set to the KDC's reply to the previous
 * request.
 *
 * If more requests are needed, @a flags will be set to
 * #KRB5_INIT_CREDS_STEP_FLAG_CONTINUE and the next request will be placed in
 * @a out.  If no more requests are needed, @a flags will not contain
 * #KRB5_INIT_CREDS_STEP_FLAG_CONTINUE and @a out will be empty.
 *
 * If this function returns @c KRB5KRB_ERR_RESPONSE_TOO_BIG, the caller should
 * transmit the next request using TCP rather than UDP.  If this function
 * returns any other error, the initial credential exchange has failed.
 *
 * @a context must be the same as the one passed to krb5_init_creds_init() for
 * this initial credentials context.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Set a password for acquiring initial credentials.
 *
 * @param [in] context          Library context
 * @param [in] ctx              Initial credentials context
 * @param [in] password         Password
 *
 * This function supplies a password to be used to construct the client key for
 * an initial credentials request.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Specify a service principal for acquiring initial credentials.
 *
 * @param [in] context          Library context
 * @param [in] ctx              Initial credentials context
 * @param [in] service          Service principal string
 *
 * This function supplies a service principal string to acquire initial
 * credentials for instead of the default krbtgt service.  @a service is parsed
 * as a principal name; any realm part is ignored.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Retrieve ticket times from an initial credentials context.
 *
 * @param [in]  context         Library context
 * @param [in]  ctx             Initial credentials context
 * @param [out] times           Ticket times for acquired credentials
 *
 * The initial credentials context must have completed obtaining credentials
 * via either krb5_init_creds_get() or krb5_init_creds_step().
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Create a context to get credentials from a KDC's Ticket Granting Service.
 *
 * @param[in]  context          Library context
 * @param[in]  ccache           Credential cache handle
 * @param[in]  creds            Input credentials
 * @param[in]  options          @ref KRB5_GC options for this request.
 * @param[out] ctx              New TGS request context
 *
 * This function prepares to obtain credentials matching @a creds, either by
 * retrieving them from @a ccache or by making requests to ticket-granting
 * services beginning with a ticket-granting ticket for the client principal's
 * realm.
 *
 * The resulting TGS acquisition context can be used asynchronously with
 * krb5_tkt_creds_step() or synchronously with krb5_tkt_creds_get().  See also
 * krb5_get_credentials() for synchronous use.
 *
 * Use krb5_tkt_creds_free() to free @a ctx when it is no longer needed.
 *
 * @version New in 1.9
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Synchronously obtain credentials using a TGS request context.
 *
 * @param[in] context           Library context
 * @param[in] ctx               TGS request context
 *
 * This function synchronously obtains credentials using a context created by
 * krb5_tkt_creds_init().  On successful return, the credentials can be
 * retrieved with krb5_tkt_creds_get_creds().
 *
 * @version New in 1.9
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Retrieve acquired credentials from a TGS request context.
 *
 * @param[in]  context          Library context
 * @param[in]  ctx              TGS request context
 * @param[out] creds            Acquired credentials
 *
 * This function copies the acquired initial credentials from @a ctx into @a
 * creds, after the successful completion of krb5_tkt_creds_get() or
 * krb5_tkt_creds_step().  Use krb5_free_cred_contents() to free @a creds when
 * it is no longer needed.
 *
 * @version New in 1.9
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Free a TGS request context.
 *
 * @param[in]  context  Library context
 * @param[in]  ctx      TGS request context
 *
 * @version New in 1.9
 */
    /* *< More responses needed */
    /* *
 * Get the next KDC request in a TGS exchange.
 *
 * @param[in]  context          Library context
 * @param[in]  ctx              TGS request context
 * @param[in]  in               KDC response (empty on the first call)
 * @param[out] out              Next KDC request
 * @param[out] realm            Realm for next KDC request
 * @param[out] flags            Output flags
 *
 * This function constructs the next KDC request for a TGS exchange, allowing
 * the caller to control the transport of KDC requests and replies.  On the
 * first call, @a in should be set to an empty buffer; on subsequent calls, it
 * should be set to the KDC's reply to the previous request.
 *
 * If more requests are needed, @a flags will be set to
 * #KRB5_TKT_CREDS_STEP_FLAG_CONTINUE and the next request will be placed in @a
 * out.  If no more requests are needed, @a flags will not contain
 * #KRB5_TKT_CREDS_STEP_FLAG_CONTINUE and @a out will be empty.
 *
 * If this function returns @c KRB5KRB_ERR_RESPONSE_TOO_BIG, the caller should
 * transmit the next request using TCP rather than UDP.  If this function
 * returns any other error, the TGS exchange has failed.
 *
 * @version New in 1.9
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Retrieve ticket times from a TGS request context.
 *
 * @param[in]  context          Library context
 * @param[in]  ctx              TGS request context
 * @param[out] times            Ticket times for acquired credentials
 *
 * The TGS request context must have completed obtaining credentials via either
 * krb5_tkt_creds_get() or krb5_tkt_creds_step().
 *
 * @version New in 1.9
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Get initial credentials using a key table.
 *
 * @param [in]  context         Library context
 * @param [out] creds           New credentials
 * @param [in]  client          Client principal
 * @param [in]  arg_keytab      Key table handle
 * @param [in]  start_time      Time when ticket becomes valid (0 for now)
 * @param [in]  in_tkt_service  Service name of initial credentials (or NULL)
 * @param [in]  k5_gic_options  Initial credential options
 *
 * This function requests KDC for an initial credentials for @a client using a
 * client key stored in @a arg_keytab.  If @a in_tkt_service is specified, it
 * is parsed as a principal name (with the realm ignored) and used as the
 * service principal for the request; otherwise the ticket-granting service is
 * used.
 *
 * @sa krb5_verify_init_creds()
 *
 * @retval
 * 0 Success
 * @return
 * Kerberos error codes
 */
    /* *< boolean */
    /* *
 * Initialize a credential verification options structure.
 *
 * @param [in] k5_vic_options   Verification options structure
 */
    /* *
 * Set whether credential verification is required.
 *
 * @param [in] k5_vic_options   Verification options structure
 * @param [in] ap_req_nofail    Whether to require successful verification
 *
 * This function determines how krb5_verify_init_creds() behaves if no keytab
 * information is available.  If @a ap_req_nofail is @c FALSE, verification
 * will be skipped in this case and krb5_verify_init_creds() will return
 * successfully.  If @a ap_req_nofail is @c TRUE, krb5_verify_init_creds() will
 * not return successfully unless verification can be performed.
 *
 * If this function is not used, the behavior of krb5_verify_init_creds() is
 * determined through configuration.
 */
    /* *
 * Verify initial credentials against a keytab.
 *
 * @param [in] context          Library context
 * @param [in] creds            Initial credentials to be verified
 * @param [in] server           Server principal (or NULL)
 * @param [in] keytab           Key table (NULL to use default keytab)
 * @param [in] ccache           Credential cache for fetched creds (or NULL)
 * @param [in] options          Verification options (NULL for default options)
 *
 * This function attempts to verify that @a creds were obtained from a KDC with
 * knowledge of a key in @a keytab, or the default keytab if @a keytab is NULL.
 * If @a server is provided, the highest-kvno key entry for that principal name
 * is used to verify the credentials; otherwise, all unique "host" service
 * principals in the keytab are tried.
 *
 * If the specified keytab does not exist, or is empty, or cannot be read, or
 * does not contain an entry for @a server, then credential verification may be
 * skipped unless configuration demands that it succeed.  The caller can
 * control this behavior by providing a verification options structure; see
 * krb5_verify_init_creds_opt_init() and
 * krb5_verify_init_creds_opt_set_ap_req_nofail().
 *
 * If @a ccache is NULL, any additional credentials fetched during the
 * verification process will be destroyed.  If @a ccache points to NULL, a
 * memory ccache will be created for the additional credentials and returned in
 * @a ccache.  If @a ccache points to a valid credential cache handle, the
 * additional credentials will be stored in that cache.
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Get validated credentials from the KDC.
 *
 * @param [in]  context         Library context
 * @param [out] creds           Validated credentials
 * @param [in]  client          Client principal name
 * @param [in]  ccache          Credential cache
 * @param [in]  in_tkt_service  Server principal string (or NULL)
 *
 * This function gets a validated credential using a postdated credential from
 * @a ccache.  If @a in_tkt_service is specified, it is parsed (with the realm
 * part ignored) and used as the server principal of the credential;
 * otherwise, the ticket-granting service is used.
 *
 * If successful, the validated credential is placed in @a creds.
 *
 * @sa krb5_get_renewed_creds()
 *
 * @retval
 * 0 Success
 * @retval
 * KRB5_NO_2ND_TKT Request missing second ticket
 * @retval
 * KRB5_NO_TKT_SUPPLIED Request did not supply a ticket
 * @retval
 * KRB5_PRINC_NOMATCH Requested principal and ticket do not match
 * @retval
 * KRB5_KDCREP_MODIFIED KDC reply did not match expectations
 * @retval
 * KRB5_KDCREP_SKEW Clock skew too great in KDC reply
 * @return
 * Kerberos error codes
 */
    /* *
 * Get renewed credential from KDC using an existing credential.
 *
 * @param [in]  context         Library context
 * @param [out] creds           Renewed credentials
 * @param [in]  client          Client principal name
 * @param [in]  ccache          Credential cache
 * @param [in]  in_tkt_service  Server principal string (or NULL)
 *
 * This function gets a renewed credential using an existing one from @a
 * ccache.  If @a in_tkt_service is specified, it is parsed (with the realm
 * part ignored) and used as the server principal of the credential; otherwise,
 * the ticket-granting service is used.
 *
 * If successful, the renewed credential is placed in @a creds.
 *
 * @retval
 * 0 Success
 * @return
 * Kerberos error codes
 */
    /* *
 * Decode an ASN.1-formatted ticket.
 *
 * @param [in]  code            ASN.1-formatted ticket
 * @param [out] rep             Decoded ticket information
 *
 * @retval 0  Success; otherwise - Kerberos error codes
 */
    /* *
 * Retrieve a string value from the appdefaults section of krb5.conf.
 *
 * @param [in]  context         Library context
 * @param [in]  appname         Application name
 * @param [in]  realm           Realm name
 * @param [in]  option          Option to be checked
 * @param [in]  default_value   Default value to return if no match is found
 * @param [out] ret_value       String value of @a option
 *
 * This function gets the application defaults for @a option based on the given
 * @a appname and/or @a realm.
 *
 * @sa krb5_appdefault_boolean()
 */
    /* *
 * Retrieve a boolean value from the appdefaults section of krb5.conf.
 *
 * @param [in]  context         Library context
 * @param [in]  appname         Application name
 * @param [in]  realm           Realm name
 * @param [in]  option          Option to be checked
 * @param [in]  default_value   Default value to return if no match is found
 * @param [out] ret_value       Boolean value of @a option
 *
 * This function gets the application defaults for @a option based on the given
 * @a appname and/or @a realm.
 *
 * @sa krb5_appdefault_string()
 */
    /*
 * Prompter enhancements
 */
/* * Prompt for password */
    /* * Prompt for new password (during password change) */
    /* * Prompt for new password again */
    /* * Prompt for preauthentication data (such as an OTP value) */
    /* *
 * Get prompt types array from a context.
 *
 * @param [in] context          Library context
 *
 * @return
 * Pointer to an array of prompt types corresponding to the prompter's @a
 * prompts arguments.  Each type has one of the following values:
 *  @li #KRB5_PROMPT_TYPE_PASSWORD
 *  @li #KRB5_PROMPT_TYPE_NEW_PASSWORD
 *  @li #KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN
 *  @li #KRB5_PROMPT_TYPE_PREAUTH
 */
    /* Error reporting */
/* *
 * Set an extended error message for an error code.
 *
 * @param [in] ctx              Library context
 * @param [in] code             Error code
 * @param [in] fmt              Error string for the error code
 * @param [in] ...              printf(3) style parameters
 */
    /* *
 * Set an extended error message for an error code using a va_list.
 *
 * @param [in] ctx              Library context
 * @param [in] code             Error code
 * @param [in] fmt              Error string for the error code
 * @param [in] args             List of vprintf(3) style arguments
 */
    /* *
 * Add a prefix to the message for an error code.
 *
 * @param [in] ctx              Library context
 * @param [in] code             Error code
 * @param [in] fmt              Format string for error message prefix
 * @param [in] ...              printf(3) style parameters
 *
 * Format a message and prepend it to the current message for @a code.  The
 * prefix will be separated from the old message with a colon and space.
 */
    /* *
 * Add a prefix to the message for an error code using a va_list.
 *
 * @param [in] ctx              Library context
 * @param [in] code             Error code
 * @param [in] fmt              Format string for error message prefix
 * @param [in] args             List of vprintf(3) style arguments
 *
 * This function is similar to krb5_prepend_error_message(), but uses a
 * va_list instead of variadic arguments.
 */
    /* *
 * Add a prefix to a different error code's message.
 *
 * @param [in] ctx              Library context
 * @param [in] old_code         Previous error code
 * @param [in] code             Error code
 * @param [in] fmt              Format string for error message prefix
 * @param [in] ...              printf(3) style parameters
 *
 * Format a message and prepend it to the message for @a old_code.  The prefix
 * will be separated from the old message with a colon and space.  Set the
 * resulting message as the extended error message for @a code.
 */
    /* *
 * Add a prefix to a different error code's message using a va_list.
 *
 * @param [in] ctx              Library context
 * @param [in] old_code         Previous error code
 * @param [in] code             Error code
 * @param [in] fmt              Format string for error message prefix
 * @param [in] args             List of vprintf(3) style arguments
 *
 * This function is similar to krb5_wrap_error_message(), but uses a
 * va_list instead of variadic arguments.
 */
    /* *
 * Copy the most recent extended error message from one context to another.
 *
 * @param [in] dest_ctx         Library context to copy message to
 * @param [in] src_ctx          Library context with current message
 */
    /* *
 * Get the (possibly extended) error message for a code.
 *
 * @param [in] ctx              Library context
 * @param [in] code             Error code
 *
 * The behavior of krb5_get_error_message() is only defined the first time it
 * is called after a failed call to a krb5 function using the same context, and
 * only when the error code passed in is the same as that returned by the krb5
 * function.
 *
 * This function never returns NULL, so its result may be used unconditionally
 * as a C string.
 *
 * The string returned by this function must be freed using
 * krb5_free_error_message()
 *
 * @note Future versions may return the same string for the second
 * and following calls.
 */
    /* *
 * Free an error message generated by krb5_get_error_message().
 *
 * @param [in] ctx              Library context
 * @param [in] msg              Pointer to error message
 */
    /* *
 * Clear the extended error message in a context.
 *
 * @param [in] ctx              Library context
 *
 * This function unsets the extended error message in a context, to ensure that
 * it is not mistakenly applied to another occurrence of the same error code.
 */
    /* *
 * Unwrap authorization data.
 *
 * @param [in]  context         Library context
 * @param [in]  type            @ref KRB5_AUTHDATA type of @a container
 * @param [in]  container       Authorization data to be decoded
 * @param [out] authdata        List of decoded authorization data
 *
 * @sa krb5_encode_authdata_container()
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Wrap authorization data in a container.
 *
 * @param [in]  context         Library context
 * @param [in]  type            @ref KRB5_AUTHDATA type of @a container
 * @param [in]  authdata        List of authorization data to be encoded
 * @param [out] container       List of encoded authorization data
 *
 * The result is returned in @a container as a single-element list.
 *
 * @sa krb5_decode_authdata_container()
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /*
 * AD-KDCIssued
 */
/* *
 * Encode and sign AD-KDCIssued authorization data.
 *
 * @param [in]  context         Library context
 * @param [in]  key             Session key
 * @param [in]  issuer          The name of the issuing principal
 * @param [in]  authdata        List of authorization data to be signed
 * @param [out] ad_kdcissued    List containing AD-KDCIssued authdata
 *
 * This function wraps a list of authorization data entries @a authdata in an
 * AD-KDCIssued container (see RFC 4120 section 5.2.6.2) signed with @a key.
 * The result is returned in @a ad_kdcissued as a single-element list.
 */
    /* *
 * Unwrap and verify AD-KDCIssued authorization data.
 *
 * @param [in] context          Library context
 * @param [in] key              Session key
 * @param [in] ad_kdcissued     AD-KDCIssued authorization data to be unwrapped
 * @param [out] issuer          Name of issuing principal (or NULL)
 * @param [out] authdata        Unwrapped list of authorization data
 *
 * This function unwraps an AD-KDCIssued authdatum (see RFC 4120 section
 * 5.2.6.2) and verifies its signature against @a key.  The issuer field of the
 * authdatum element is returned in @a issuer, and the unwrapped list of
 * authdata is returned in @a authdata.
 */
    /*
 * Windows PAC
 */
    /* Microsoft defined types of data */
    /* *< Logon information */
    /* *< Credentials information */
    /* *< Server checksum */
    /* *< KDC checksum */
    /* *< Client name and ticket info */
    /* *< Constrained delegation info */
    /* *< User principal name and DNS info */
    /* * PAC data structure to convey authorization information */
    /* *
 * Add a buffer to a PAC handle.
 *
 * @param [in] context          Library context
 * @param [in] pac              PAC handle
 * @param [in] type             Buffer type
 * @param [in] data             contents
 *
 * This function adds a buffer of type @a type and contents @a data to @a pac
 * if there isn't already a buffer of this type present.
 *
 * The valid values of @a type is one of the following:
 * @li #KRB5_PAC_LOGON_INFO         -  Logon information
 * @li #KRB5_PAC_CREDENTIALS_INFO   -  Credentials information
 * @li #KRB5_PAC_SERVER_CHECKSUM    -  Server checksum
 * @li #KRB5_PAC_PRIVSVR_CHECKSUM   -  KDC checksum
 * @li #KRB5_PAC_CLIENT_INFO        -  Client name and ticket information
 * @li #KRB5_PAC_DELEGATION_INFO    -  Constrained delegation information
 * @li #KRB5_PAC_UPN_DNS_INFO       -  User principal name and DNS information
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Free a PAC handle.
 *
 * @param [in] context         Library context
 * @param [in] pac             PAC to be freed
 *
 * This function frees the contents of @a pac and the structure itself.
 */
    /* *
 * Retrieve a buffer value from a PAC.
 *
 * @param [in]  context         Library context
 * @param [in]  pac             PAC handle
 * @param [in]  type            Type of buffer to retrieve
 * @param [out] data            Buffer value
 *
 * Use krb5_free_data_contents() to free @a data when it is no longer needed.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Return an array of buffer types in a PAC handle.
 *
 * @param [in]  context         Library context
 * @param [in]  pac             PAC handle
 * @param [out] len             Number of entries in @a types
 * @param [out] types           Array of buffer types
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Create an empty Privilege Attribute Certificate (PAC) handle.
 *
 * @param [in]  context         Library context
 * @param [out] pac             New PAC handle
 *
 * Use krb5_pac_free() to free @a pac when it is no longer needed.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Unparse an encoded PAC into a new handle.
 *
 * @param [in]  context         Library context
 * @param [in]  ptr             PAC buffer
 * @param [in]  len             Length of @a ptr
 * @param [out] pac             PAC handle
 *
 * Use krb5_pac_free() to free @a pac when it is no longer needed.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Verify a PAC.
 *
 * @param [in] context          Library context
 * @param [in] pac              PAC handle
 * @param [in] authtime         Expected timestamp
 * @param [in] principal        Expected principal name (or NULL)
 * @param [in] server           Key to validate server checksum (or NULL)
 * @param [in] privsvr          Key to validate KDC checksum (or NULL)
 *
 * This function validates @a pac against the supplied @a server, @a privsvr,
 * @a principal and @a authtime.  If @a principal is NULL, the principal and
 * authtime are not verified.  If @a server or @a privsvr is NULL, the
 * corresponding checksum is not verified.
 *
 * If successful, @a pac is marked as verified.
 *
 * @note A checksum mismatch can occur if the PAC was copied from a cross-realm
 * TGT by an ignorant KDC; also macOS Server Open Directory (as of 10.6)
 * generates PACs with no server checksum at all.  One should consider not
 * failing the whole authentication because of this reason, but, instead,
 * treating the ticket as if it did not contain a PAC or marking the PAC
 * information as non-verified.
 *
 * @retval 0 Success; otherwise - Kerberos error codes
 */
    /* *
 * Verify a PAC, possibly from a specified realm.
 *
 * @param [in] context          Library context
 * @param [in] pac              PAC handle
 * @param [in] authtime         Expected timestamp
 * @param [in] principal        Expected principal name (or NULL)
 * @param [in] server           Key to validate server checksum (or NULL)
 * @param [in] privsvr          Key to validate KDC checksum (or NULL)
 * @param [in] with_realm       If true, expect the realm of @a principal
 *
 * This function is similar to krb5_pac_verify(), but adds a parameter
 * @a with_realm.  If @a with_realm is true, the PAC_CLIENT_INFO field is
 * expected to include the realm of @a principal as well as the name.  This
 * flag is necessary to verify PACs in cross-realm S4U2Self referral TGTs.
 *
 * @version New in 1.17
 */
    /* *
 * Sign a PAC.
 *
 * @param [in]  context         Library context
 * @param [in]  pac             PAC handle
 * @param [in]  authtime        Expected timestamp
 * @param [in]  principal       Expected principal name (or NULL)
 * @param [in]  server_key      Key for server checksum
 * @param [in]  privsvr_key     Key for KDC checksum
 * @param [out] data            Signed PAC encoding
 *
 * This function signs @a pac using the keys @a server_key and @a privsvr_key
 * and returns the signed encoding in @a data.  @a pac is modified to include
 * the server and KDC checksum buffers.  Use krb5_free_data_contents() to free
 * @a data when it is no longer needed.
 *
 * @version New in 1.10
 */
    /* *
 * Sign a PAC, possibly with a specified realm.
 *
 * @param [in]  context         Library context
 * @param [in]  pac             PAC handle
 * @param [in]  authtime        Expected timestamp
 * @param [in]  principal       Principal name (or NULL)
 * @param [in]  server_key      Key for server checksum
 * @param [in]  privsvr_key     Key for KDC checksum
 * @param [in]  with_realm      If true, include the realm of @a principal
 * @param [out] data            Signed PAC encoding
 *
 * This function is similar to krb5_pac_sign(), but adds a parameter
 * @a with_realm.  If @a with_realm is true, the PAC_CLIENT_INFO field of the
 * signed PAC will include the realm of @a principal as well as the name.  This
 * flag is necessary to generate PACs for cross-realm S4U2Self referrals.
 *
 * @version New in 1.17
 */
    /*
 * Read client information from a PAC.
 *
 * @param [in]  context         Library context
 * @param [in]  pac             PAC handle
 * @param [out] authtime_out    Authentication timestamp (NULL if not needed)
 * @param [out] princname_out   Client account name
 *
 * Read the PAC_CLIENT_INFO buffer in @a pac.  Place the client account name as
 * a string in @a princname_out.  If @a authtime_out is not NULL, place the
 * initial authentication timestamp in @a authtime_out.
 *
 * @retval 0 on success, ENOENT if no PAC_CLIENT_INFO buffer is present in @a
 * pac, ERANGE if the buffer contains invalid lengths.
 *
 * @version New in 1.18
 */
    /* *
 * Allow the appplication to override the profile's allow_weak_crypto setting.
 *
 * @param [in] context          Library context
 * @param [in] enable           Boolean flag
 *
 * This function allows an application to override the allow_weak_crypto
 * setting.  It is primarily for use by aklog.
 *
 * @retval 0  (always)
 */
    /* *
 * A wrapper for passing information to a @c krb5_trace_callback.
 *
 * Currently, it only contains the formatted message as determined
 * the the format string and arguments of the tracing macro, but it
 * may be extended to contain more fields in the future.
 */
    /* *
 * Specify a callback function for trace events.
 *
 * @param [in] context          Library context
 * @param [in] fn               Callback function
 * @param [in] cb_data          Callback data
 *
 * Specify a callback for trace events occurring in krb5 operations performed
 * within @a context.  @a fn will be invoked with @a context as the first
 * argument, @a cb_data as the last argument, and a pointer to a
 * krb5_trace_info as the second argument.  If the trace callback is reset via
 * this function or @a context is destroyed, @a fn will be invoked with a NULL
 * second argument so it can clean up @a cb_data.  Supply a NULL value for @a
 * fn to disable trace callbacks within @a context.
 *
 * @note This function overrides the information passed through the
 * @a KRB5_TRACE environment variable.
 *
 * @version New in 1.9
 *
 * @return Returns KRB5_TRACE_NOSUPP if tracing is not supported in the library
 * (unless @a fn is NULL).
 */
    /* *
 * Specify a file name for directing trace events.
 *
 * @param [in] context          Library context
 * @param [in] filename         File name
 *
 * Open @a filename for appending (creating it, if necessary) and set up a
 * callback to write trace events to it.
 *
 * @note This function overrides the information passed through the
 * @a KRB5_TRACE environment variable.
 *
 * @version New in 1.9
 *
 * @retval KRB5_TRACE_NOSUPP Tracing is not supported in the library.
 */
    /* *
 * Hook function for inspecting or modifying messages sent to KDCs.
 *
 * @param [in]  context         Library context
 * @param [in]  data            Callback data
 * @param [in]  realm           The realm the message will be sent to
 * @param [in]  message         The original message to be sent to the KDC
 * @param [out] new_message_out Optional replacement message to be sent
 * @param [out] reply_out       Optional synthetic reply
 *
 * If the hook function returns an error code, the KDC communication will be
 * aborted and the error code will be returned to the library operation which
 * initiated the communication.
 *
 * If the hook function sets @a reply_out, @a message will not be sent to the
 * KDC, and the given reply will used instead.
 *
 * If the hook function sets @a new_message_out, the given message will be sent
 * to the KDC in place of @a message.
 *
 * If the hook function returns successfully without setting either output,
 * @a message will be sent to the KDC normally.
 *
 * The hook function should use krb5_copy_data() to construct the value for
 * @a new_message_out or @a reply_out, to ensure that it can be freed correctly
 * by the library.
 *
 * @version New in 1.15
 *
 * @retval 0 Success
 * @return A Kerberos error code
 */
    #[c2rust::src_loc = "8475:1"]
    pub type krb5_pre_send_fn
        =
        Option<unsafe extern "C" fn(_: krb5_context, _: *mut libc::c_void,
                                    _: *const krb5_data, _: *const krb5_data,
                                    _: *mut *mut krb5_data,
                                    _: *mut *mut krb5_data)
                   -> krb5_error_code>;
    #[c2rust::src_loc = "8391:1"]
    pub type krb5_trace_callback
        =
        Option<unsafe extern "C" fn(_: krb5_context,
                                    _: *const krb5_trace_info,
                                    _: *mut libc::c_void) -> ()>;
    #[c2rust::src_loc = "8387:1"]
    pub type krb5_trace_info = _krb5_trace_info;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "8387:16"]
    pub struct _krb5_trace_info {
        pub message: *const libc::c_char,
    }
    #[c2rust::src_loc = "7865:1"]
    pub type krb5_prompt_type = krb5_int32;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "363:16"]
    pub struct _krb5_keyblock {
        pub magic: krb5_magic,
        pub enctype: krb5_enctype,
        pub length: libc::c_uint,
        pub contents: *mut krb5_octet,
    }
    /*
 * begin "encryption.h"
 */
    /* * Exposed contents of a key. */
    #[c2rust::src_loc = "363:1"]
    pub type krb5_keyblock = _krb5_keyblock;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "391:16"]
    pub struct _krb5_checksum {
        pub magic: krb5_magic,
        pub checksum_type: krb5_cksumtype,
        pub length: libc::c_uint,
        pub contents: *mut krb5_octet,
    }
    #[c2rust::src_loc = "391:1"]
    pub type krb5_checksum = _krb5_checksum;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "398:16"]
    pub struct _krb5_enc_data {
        pub magic: krb5_magic,
        pub enctype: krb5_enctype,
        pub kvno: krb5_kvno,
        pub ciphertext: krb5_data,
    }
    #[c2rust::src_loc = "398:1"]
    pub type krb5_enc_data = _krb5_enc_data;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1936:16"]
    pub struct _krb5_ticket_times {
        pub authtime: krb5_timestamp,
        pub starttime: krb5_timestamp,
        pub endtime: krb5_timestamp,
        pub renew_till: krb5_timestamp,
    }
    /* checksum type */
    /* *< Response to TGS request */
    /* *< Auth req to application server */
    /* *< Response to mutual AP request */
    /* *< Safe application message */
    /* *< Private application message */
    /* *< Cred forwarding message */
    /* *< Error response */
    /* LastReq types */
    /* PADATA types */
    /* *< RFC 4120 */
    /* *< RFC 4120 */
    /* Not used */
    /* *< timestamp encrypted in key. RFC 4120 */
    /* *< SecurId passcode. RFC 4120 */
    /* *< Sesame project. RFC 4120 */
    /* *< OSF DCE. RFC 4120 */
    /* *< Cybersafe. RFC 4120 */
    /* *< Cygnus. RFC 4120, 3961 */
    /* *< Etype info for preauth. RFC 4120 */
    /* *< SAM/OTP */
    /* *< SAM/OTP */
    /* *< PKINIT */
    /* *< PKINIT */
    /* *< PKINIT. RFC 4556 */
    /* *< PKINIT. RFC 4556 */
    /* *< RFC 4120 */
    /* *< RFC 4120 */
    /* *< Windows 2000 referrals. RFC 6820 */
    /* *< SAM/OTP. RFC 4120 */
    /* *< Embedded in typed data. RFC 4120 */
    /* *< draft referral system */
    /* *< draft challenge system, updated */
    /* *< draft challenge system, updated */
    /* MS-KILE */
    /* *< include Windows PAC */
    /* *< username protocol transition request */
    /* *< certificate protocol transition request */
    /* *< AS checksum */
    /* *< RFC 6113 */
    /* *< RFC 6113 */
    /* *< RFC 6113 */
    /* *< RFC 6113 */
    /* *< RFC 6560 section 4.1 */
    /* *< RFC 6560 section 4.2 */
    /* *< RFC 6560 section 4.3 */
    /* *< RFC 6112 */
    /* *< RFC 6806 */
    /* *< RFC 8070 */
    /* *< MS-KILE and MS-SFU */
    /* *< currently must be zero */
    /* * Transited encoding types */
    /* * alternate authentication types */
    /* authorization data types. See RFC 4120 section 5.2.6 */
    /* * @defgroup KRB5_AUTHDATA KRB5_AUTHDATA
 * @{
 */
    /* *< RFC 4537 */
    /* *< formerly 142 in krb5 1.8 */
    /* * @} */
    /* end of KRB5_AUTHDATA group */
    /* password change constants */
    /* *< Success */
    /* *< Malformed request */
    /* *< Server error */
    /* *< Authentication error */
    /* *< Password change rejected */
    /* These are Microsoft's extensions in RFC 3244, and it looks like
   they'll become standardized, possibly with other additions.  */
    /* *< Not authorized */
    /* *< Unknown RPC version */
    /* * The presented credentials were not obtained using a password directly */
    /*
 * end "proto.h"
 */
    /* Time set */
/* * Ticket start time, end time, and renewal duration. */
    #[c2rust::src_loc = "1936:1"]
    pub type krb5_ticket_times = _krb5_ticket_times;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1946:16"]
    pub struct _krb5_authdata {
        pub magic: krb5_magic,
        pub ad_type: krb5_authdatatype,
        pub length: libc::c_uint,
        pub contents: *mut krb5_octet,
    }
    /* *< Time at which KDC issued the initial ticket that corresponds to this ticket */
    /* XXX ? should ktime in KDC_REP == authtime
       in ticket? otherwise client can't get this */
    /* *< optional in ticket, if not present, use @a authtime */
    /* *< Ticket expiration time */
    /* *< Latest time at which renewal of ticket can be valid */
    /* * Structure for auth data */
    #[c2rust::src_loc = "1946:1"]
    pub type krb5_authdata = _krb5_authdata;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1954:16"]
    pub struct _krb5_transited {
        pub magic: krb5_magic,
        pub tr_type: krb5_octet,
        pub tr_contents: krb5_data,
    }
    /* *< ADTYPE */
    /* *< Length of data  */
    /* *< Data */
    /* * Structure for transited encoding */
    #[c2rust::src_loc = "1954:1"]
    pub type krb5_transited = _krb5_transited;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1961:16"]
    pub struct _krb5_enc_tkt_part {
        pub magic: krb5_magic,
        pub flags: krb5_flags,
        pub session: *mut krb5_keyblock,
        pub client: krb5_principal,
        pub transited: krb5_transited,
        pub times: krb5_ticket_times,
        pub caddrs: *mut *mut krb5_address,
        pub authorization_data: *mut *mut krb5_authdata,
    }
    /* *< Transited encoding type */
    /* *< Contents */
    /* * Encrypted part of ticket. */
    #[c2rust::src_loc = "1961:1"]
    pub type krb5_enc_tkt_part = _krb5_enc_tkt_part;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1979:16"]
    pub struct _krb5_ticket {
        pub magic: krb5_magic,
        pub server: krb5_principal,
        pub enc_part: krb5_enc_data,
        pub enc_part2: *mut krb5_enc_tkt_part,
    }
    /* to-be-encrypted portion */
    /* *< flags */
    /* *< session key: includes enctype */
    /* *< client name/realm */
    /* *< list of transited realms */
    /* *< auth, start, end, renew_till */
    /* *< array of ptrs to addresses */
    /* *< auth data */
    /* *
 * Ticket structure.
 *
 * The C representation of the ticket message, with a pointer to the
 * C representation of the encrypted part.
 */
    #[c2rust::src_loc = "1979:1"]
    pub type krb5_ticket = _krb5_ticket;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1993:16"]
    pub struct _krb5_authenticator {
        pub magic: krb5_magic,
        pub client: krb5_principal,
        pub checksum: *mut krb5_checksum,
        pub cusec: krb5_int32,
        pub ctime: krb5_timestamp,
        pub subkey: *mut krb5_keyblock,
        pub seq_number: krb5_ui_4,
        pub authorization_data: *mut *mut krb5_authdata,
    }
    /* cleartext portion */
    /* *< server name/realm */
    /* *< encryption type, kvno, encrypted encoding */
    /* *< ptr to decrypted version, if available */
    /* the unencrypted version */
/* *
 * Ticket authenticator.
 *
 * The C representation of an unencrypted authenticator.
 */
    #[c2rust::src_loc = "1993:1"]
    pub type krb5_authenticator = _krb5_authenticator;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2031:16"]
    pub struct _krb5_last_req_entry {
        pub magic: krb5_magic,
        pub lr_type: krb5_int32,
        pub value: krb5_timestamp,
    }
    /* *< client name/realm */
    /* *< checksum, includes type, optional */
    /* *< client usec portion */
    /* *< client sec portion */
    /* *< true session key, optional */
    /* *< sequence #, optional */
    /* *< authoriazation data */
    /* * Last request entry */
    #[c2rust::src_loc = "2031:1"]
    pub type krb5_last_req_entry = _krb5_last_req_entry;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2038:16"]
    pub struct _krb5_pa_data {
        pub magic: krb5_magic,
        pub pa_type: krb5_preauthtype,
        pub length: libc::c_uint,
        pub contents: *mut krb5_octet,
    }
    /* *< LR type */
    /* *< Timestamp */
    /* * Pre-authentication data */
    #[c2rust::src_loc = "2038:1"]
    pub type krb5_pa_data = _krb5_pa_data;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2054:16"]
    pub struct _krb5_kdc_req {
        pub magic: krb5_magic,
        pub msg_type: krb5_msgtype,
        pub padata: *mut *mut krb5_pa_data,
        pub kdc_options: krb5_flags,
        pub client: krb5_principal,
        pub server: krb5_principal,
        pub from: krb5_timestamp,
        pub till: krb5_timestamp,
        pub rtime: krb5_timestamp,
        pub nonce: krb5_int32,
        pub nktypes: libc::c_int,
        pub ktype: *mut krb5_enctype,
        pub addresses: *mut *mut krb5_address,
        pub authorization_data: krb5_enc_data,
        pub unenc_authdata: *mut *mut krb5_authdata,
        pub second_ticket: *mut *mut krb5_ticket,
    }
    /* *< Preauthentication data type */
    /* *< Length of data */
    /* *< Data */
    /* * C representation of KDC-REQ protocol message, including KDC-REQ-BODY */
    #[c2rust::src_loc = "2054:1"]
    pub type krb5_kdc_req = _krb5_kdc_req;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2079:16"]
    pub struct _krb5_enc_kdc_rep_part {
        pub magic: krb5_magic,
        pub msg_type: krb5_msgtype,
        pub session: *mut krb5_keyblock,
        pub last_req: *mut *mut krb5_last_req_entry,
        pub nonce: krb5_int32,
        pub key_exp: krb5_timestamp,
        pub flags: krb5_flags,
        pub times: krb5_ticket_times,
        pub server: krb5_principal,
        pub caddrs: *mut *mut krb5_address,
        pub enc_padata: *mut *mut krb5_pa_data,
    }
    /* *< KRB5_AS_REQ or KRB5_TGS_REQ */
    /* *< Preauthentication data */
    /* real body */
    /* *< Requested options */
    /* *< Client principal and realm */
    /* *< Server principal and realm */
    /* *< Requested start time */
    /* *< Requested end time */
    /* *< Requested renewable end time */
    /* *< Nonce to match request and response */
    /* *< Number of enctypes */
    /* *< Requested enctypes */
    /* *< Requested addresses (optional) */
    /* *< Encrypted authz data (optional) */
    /* *< Unencrypted authz data */
    /* *< Second ticket array (optional) */
    /* *
 * C representation of @c EncKDCRepPart protocol message.
 *
 * This is the cleartext message that is encrypted and inserted in @c KDC-REP.
 */
    #[c2rust::src_loc = "2079:1"]
    pub type krb5_enc_kdc_rep_part = _krb5_enc_kdc_rep_part;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2095:16"]
    pub struct _krb5_kdc_rep {
        pub magic: krb5_magic,
        pub msg_type: krb5_msgtype,
        pub padata: *mut *mut krb5_pa_data,
        pub client: krb5_principal,
        pub ticket: *mut krb5_ticket,
        pub enc_part: krb5_enc_data,
        pub enc_part2: *mut krb5_enc_kdc_rep_part,
    }
    /* encrypted part: */
    /* *< krb5 message type */
    /* *< Session key */
    /* *< Array of pointers to entries */
    /* *< Nonce from request */
    /* *< Expiration date */
    /* *< Ticket flags */
    /* *< Lifetime info */
    /* *< Server's principal identifier */
    /* *< Array of ptrs to addrs, optional */
    /* *< Encrypted preauthentication data */
    /* * Representation of the @c KDC-REP protocol message. */
    #[c2rust::src_loc = "2095:1"]
    pub type krb5_kdc_rep = _krb5_kdc_rep;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2107:16"]
    pub struct _krb5_error {
        pub magic: krb5_magic,
        pub ctime: krb5_timestamp,
        pub cusec: krb5_int32,
        pub susec: krb5_int32,
        pub stime: krb5_timestamp,
        pub error: krb5_ui_4,
        pub client: krb5_principal,
        pub server: krb5_principal,
        pub text: krb5_data,
        pub e_data: krb5_data,
    }
    /* cleartext part: */
    /* *< KRB5_AS_REP or KRB5_KDC_REP */
    /* *< Preauthentication data from KDC */
    /* *< Client principal and realm */
    /* *< Ticket */
    /* *< Encrypted part of reply */
    /* *< Unencrypted version, if available */
    /* * Error message structure */
    #[c2rust::src_loc = "2107:1"]
    pub type krb5_error = _krb5_error;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2122:16"]
    pub struct _krb5_ap_req {
        pub magic: krb5_magic,
        pub ap_options: krb5_flags,
        pub ticket: *mut krb5_ticket,
        pub authenticator: krb5_enc_data,
    }
    /* some of these may be meaningless in certain contexts */
    /* *< Client sec portion; optional */
    /* *< Client usec portion; optional */
    /* *< Server usec portion */
    /* *< Server sec portion */
    /* *< Error code (protocol error #'s) */
    /* *< Client principal and realm */
    /* *< Server principal and realm */
    /* *< Descriptive text */
    /* *< Additional error-describing data */
    /* * Authentication header. */
    #[c2rust::src_loc = "2122:1"]
    pub type krb5_ap_req = _krb5_ap_req;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2134:16"]
    pub struct _krb5_ap_rep {
        pub magic: krb5_magic,
        pub enc_part: krb5_enc_data,
    }
    /* *< Requested options */
    /* *< Ticket */
    /* *< Encrypted authenticator */
    /* *
 * C representaton of AP-REP message.
 *
 * The server's response to a client's request for mutual authentication.
 */
    #[c2rust::src_loc = "2134:1"]
    pub type krb5_ap_rep = _krb5_ap_rep;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2140:16"]
    pub struct _krb5_ap_rep_enc_part {
        pub magic: krb5_magic,
        pub ctime: krb5_timestamp,
        pub cusec: krb5_int32,
        pub subkey: *mut krb5_keyblock,
        pub seq_number: krb5_ui_4,
    }
    /* *< Ciphertext of ApRepEncPart */
    /* * Cleartext that is encrypted and put into @c _krb5_ap_rep.  */
    #[c2rust::src_loc = "2140:1"]
    pub type krb5_ap_rep_enc_part = _krb5_ap_rep_enc_part;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2158:16"]
    pub struct _krb5_cred_info {
        pub magic: krb5_magic,
        pub session: *mut krb5_keyblock,
        pub client: krb5_principal,
        pub server: krb5_principal,
        pub flags: krb5_flags,
        pub times: krb5_ticket_times,
        pub caddrs: *mut *mut krb5_address,
    }
    /* *< Client time, seconds portion */
    /* *< Client time, microseconds portion */
    /* *< Subkey (optional) */
    /* *< Sequence number */
    /* * Credentials information inserted into @c EncKrbCredPart. */
    #[c2rust::src_loc = "2158:1"]
    pub type krb5_cred_info = _krb5_cred_info;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2169:16"]
    pub struct _krb5_cred_enc_part {
        pub magic: krb5_magic,
        pub nonce: krb5_int32,
        pub timestamp: krb5_timestamp,
        pub usec: krb5_int32,
        pub s_address: *mut krb5_address,
        pub r_address: *mut krb5_address,
        pub ticket_info: *mut *mut krb5_cred_info,
    }
    /* *< Session key used to encrypt ticket */
    /* *< Client principal and realm */
    /* *< Server principal and realm */
    /* *< Ticket flags */
    /* *< Auth, start, end, renew_till */
    /* *< Array of pointers to addrs (optional) */
    /* * Cleartext credentials information.  */
    #[c2rust::src_loc = "2169:1"]
    pub type krb5_cred_enc_part = _krb5_cred_enc_part;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2180:16"]
    pub struct _krb5_cred {
        pub magic: krb5_magic,
        pub tickets: *mut *mut krb5_ticket,
        pub enc_part: krb5_enc_data,
        pub enc_part2: *mut krb5_cred_enc_part,
    }
    /* *< Nonce (optional) */
    /* *< Generation time, seconds portion */
    /* *< Generation time, microseconds portion */
    /* *< Sender address (optional) */
    /* *< Recipient address (optional) */
    /* * Credentials data structure.*/
    #[c2rust::src_loc = "2180:1"]
    pub type krb5_cred = _krb5_cred;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "2216:16"]
    pub struct _krb5_pa_pac_req {
        pub include_pac: krb5_boolean,
    }
    #[c2rust::src_loc = "2216:1"]
    pub type krb5_pa_pac_req = _krb5_pa_pac_req;
    use super::stdint_uintn_h::{uint8_t, uint32_t};
    use super::stdint_intn_h::int32_t;
    use super::k5_int_h::_krb5_context;
    extern "C" {
        /* *< Tickets */
        /* *< Encrypted part */
        /* *< Unencrypted version, if available */
        /* * TRUE if a PAC should be included in TGS-REP */
        /* This file is generated, please don't edit it directly.  */
        /* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/* General definitions for Kerberos version 5. */
/*
 * Copyright 1989, 1990, 1995, 2001, 2003, 2007, 2011 by the Massachusetts
 * Institute of Technology.  All Rights Reserved.
 *
 * Export of this software from the United States of America may
 *   require a specific license from the United States Government.
 *   It is the responsibility of any person or organization contemplating
 *   export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  Furthermore if you modify this software you must label
 * your software as modified software and not distribute it in such a
 * fashion that it might be confused with the original M.I.T. software.
 * M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
/*
 * Copyright (C) 1998 by the FundsXpress, INC.
 *
 * All rights reserved.
 *
 * Export of this software from the United States of America may require
 * a specific license from the United States Government.  It is the
 * responsibility of any person or organization contemplating export to
 * obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of FundsXpress. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  FundsXpress makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */
        /* * @defgroup KRB5_H krb5 library API
 * @{
 */
        /* By default, do not expose deprecated interfaces. */
        /* !KRB5_CONFIG__ */
        /* for *_MAX */
        /* from profile.h */
        #[c2rust::src_loc = "125:8"]
        pub type _profile_t;
        #[no_mangle]
        #[c2rust::src_loc = "4596:1"]
        pub fn krb5_free_principal(context: krb5_context,
                                   val: krb5_principal);
        #[no_mangle]
        #[c2rust::src_loc = "4620:1"]
        pub fn krb5_free_addresses(context: krb5_context,
                                   val: *mut *mut krb5_address);
        #[no_mangle]
        #[c2rust::src_loc = "4743:1"]
        pub fn krb5_free_data(context: krb5_context, val: *mut krb5_data);
    }
    /* KRB5_KRB5_H_INCLUDED */
    /*@modifies internalState@*/
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/k5-int.h:27"]
pub mod k5_int_h {
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1208:8"]
    pub struct _krb5_context {
        pub magic: krb5_magic,
        pub in_tkt_etypes: *mut krb5_enctype,
        pub tgs_etypes: *mut krb5_enctype,
        pub os_context: _krb5_os_context,
        pub default_realm: *mut libc::c_char,
        pub profile: profile_t,
        pub dal_handle: *mut kdb5_dal_handle,
        pub clockskew: krb5_deltat,
        pub kdc_default_options: krb5_flags,
        pub library_options: krb5_flags,
        pub profile_secure: krb5_boolean,
        pub fcc_default_format: libc::c_int,
        pub prompt_types: *mut krb5_prompt_type,
        pub udp_pref_limit: libc::c_int,
        pub use_conf_ktypes: krb5_boolean,
        pub libkrb5_plugins: plugin_dir_handle,
        pub preauth_context: krb5_preauth_context,
        pub ccselect_handles: *mut *mut ccselect_module_handle,
        pub localauth_handles: *mut *mut localauth_module_handle,
        pub hostrealm_handles: *mut *mut hostrealm_module_handle,
        pub tls: *mut k5_tls_vtable_st,
        pub err: errinfo,
        pub err_fmt: *mut libc::c_char,
        pub kdblog_context: *mut _kdb_log_context,
        pub allow_weak_crypto: krb5_boolean,
        pub ignore_acceptor_hostname: krb5_boolean,
        pub enforce_ok_as_delegate: krb5_boolean,
        pub dns_canonicalize_hostname: dns_canonhost,
        pub trace_callback: krb5_trace_callback,
        pub trace_callback_data: *mut libc::c_void,
        pub kdc_send_hook: krb5_pre_send_fn,
        pub kdc_send_hook_data: *mut libc::c_void,
        pub kdc_recv_hook: krb5_post_recv_fn,
        pub kdc_recv_hook_data: *mut libc::c_void,
        pub plugins: [plugin_interface; 13],
        pub plugin_base_dir: *mut libc::c_char,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1137:8"]
    pub struct plugin_interface {
        pub modules: *mut *mut plugin_mapping,
        pub configured: krb5_boolean,
    }
    #[c2rust::src_loc = "1194:1"]
    pub type dns_canonhost = libc::c_uint;
    #[c2rust::src_loc = "1197:5"]
    pub const CANONHOST_FALLBACK: dns_canonhost = 2;
    #[c2rust::src_loc = "1196:5"]
    pub const CANONHOST_TRUE: dns_canonhost = 1;
    #[c2rust::src_loc = "1195:5"]
    pub const CANONHOST_FALSE: dns_canonhost = 0;
    #[c2rust::src_loc = "1203:1"]
    pub type krb5_preauth_context = *mut krb5_preauth_context_st;
    #[c2rust::src_loc = "1201:1"]
    pub type kdb5_dal_handle = _kdb5_dal_handle;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "702:16"]
    pub struct _krb5_os_context {
        pub magic: krb5_magic,
        pub time_offset: krb5_int32,
        pub usec_offset: krb5_int32,
        pub os_flags: krb5_int32,
        pub default_ccname: *mut libc::c_char,
    }
    #[c2rust::src_loc = "488:1"]
    pub type krb5_enc_sam_response_enc_2 = _krb5_enc_sam_response_enc_2;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "488:16"]
    pub struct _krb5_enc_sam_response_enc_2 {
        pub magic: krb5_magic,
        pub sam_nonce: krb5_int32,
        pub sam_sad: krb5_data,
    }
    #[c2rust::src_loc = "843:1"]
    pub type krb5_verifier_mac = _krb5_verifier_mac;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "843:16"]
    pub struct _krb5_verifier_mac {
        pub princ: krb5_principal,
        pub kvno: krb5_kvno,
        pub enctype: krb5_enctype,
        pub checksum: krb5_checksum,
    }
    #[c2rust::src_loc = "535:1"]
    pub type krb5_pa_otp_req = _krb5_pa_otp_req;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "535:16"]
    pub struct _krb5_pa_otp_req {
        pub flags: krb5_int32,
        pub nonce: krb5_data,
        pub enc_data: krb5_enc_data,
        pub hash_alg: *mut krb5_algorithm_identifier,
        pub iteration_count: krb5_int32,
        pub otp_value: krb5_data,
        pub pin: krb5_data,
        pub challenge: krb5_data,
        pub time: krb5_timestamp,
        pub counter: krb5_data,
        pub format: krb5_int32,
        pub token_id: krb5_data,
        pub alg_id: krb5_data,
        pub vendor: krb5_data,
    }
    #[c2rust::src_loc = "787:1"]
    pub type krb5_fast_req = _krb5_fast_req;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "787:16"]
    pub struct _krb5_fast_req {
        pub magic: krb5_magic,
        pub fast_options: krb5_flags,
        pub req_body: *mut krb5_kdc_req,
    }
    #[c2rust::src_loc = "439:1"]
    pub type krb5_etype_list = _krb5_etype_list;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "439:16"]
    pub struct _krb5_etype_list {
        pub length: libc::c_int,
        pub etypes: *mut krb5_enctype,
    }
    #[c2rust::src_loc = "479:1"]
    pub type krb5_sam_response_2 = _krb5_sam_response_2;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "479:16"]
    pub struct _krb5_sam_response_2 {
        pub magic: krb5_magic,
        pub sam_type: krb5_int32,
        pub sam_flags: krb5_flags,
        pub sam_track_id: krb5_data,
        pub sam_enc_nonce_or_sad: krb5_enc_data,
        pub sam_nonce: krb5_int32,
    }
    #[c2rust::src_loc = "465:1"]
    pub type krb5_sam_challenge_2_body = _krb5_sam_challenge_2_body;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "465:16"]
    pub struct _krb5_sam_challenge_2_body {
        pub magic: krb5_magic,
        pub sam_type: krb5_int32,
        pub sam_flags: krb5_flags,
        pub sam_type_name: krb5_data,
        pub sam_track_id: krb5_data,
        pub sam_challenge_label: krb5_data,
        pub sam_challenge: krb5_data,
        pub sam_response_prompt: krb5_data,
        pub sam_pk_for_sad: krb5_data,
        pub sam_nonce: krb5_int32,
        pub sam_etype: krb5_enctype,
    }
    #[c2rust::src_loc = "515:1"]
    pub type krb5_otp_tokeninfo = _krb5_otp_tokeninfo;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "515:16"]
    pub struct _krb5_otp_tokeninfo {
        pub flags: krb5_flags,
        pub vendor: krb5_data,
        pub challenge: krb5_data,
        pub length: krb5_int32,
        pub format: krb5_int32,
        pub token_id: krb5_data,
        pub alg_id: krb5_data,
        pub supported_hash_alg: *mut *mut krb5_algorithm_identifier,
        pub iteration_count: krb5_int32,
    }
    #[c2rust::src_loc = "751:1"]
    pub type krb5_pa_for_user = _krb5_pa_for_user;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "751:16"]
    pub struct _krb5_pa_for_user {
        pub user: krb5_principal,
        pub cksum: krb5_checksum,
        pub auth_package: krb5_data,
    }
    #[c2rust::src_loc = "420:1"]
    pub type krb5_etype_info_entry = _krb5_etype_info_entry;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "420:16"]
    pub struct _krb5_etype_info_entry {
        pub magic: krb5_magic,
        pub etype: krb5_enctype,
        pub length: libc::c_uint,
        pub salt: *mut krb5_octet,
        pub s2kparams: krb5_data,
    }
    #[c2rust::src_loc = "827:1"]
    pub type krb5_ad_signedpath = _krb5_ad_signedpath;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "827:16"]
    pub struct _krb5_ad_signedpath {
        pub enctype: krb5_enctype,
        pub checksum: krb5_checksum,
        pub delegated: *mut krb5_principal,
        pub method_data: *mut *mut krb5_pa_data,
    }
    #[c2rust::src_loc = "780:1"]
    pub type krb5_fast_armored_req = _krb5_fast_armored_req;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "780:16"]
    pub struct _krb5_fast_armored_req {
        pub magic: krb5_magic,
        pub armor: *mut krb5_fast_armor,
        pub req_checksum: krb5_checksum,
        pub enc_part: krb5_enc_data,
    }
    #[c2rust::src_loc = "776:1"]
    pub type krb5_fast_armor = _krb5_fast_armor;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "776:16"]
    pub struct _krb5_fast_armor {
        pub armor_type: krb5_int32,
        pub armor_value: krb5_data,
    }
    #[c2rust::src_loc = "559:1"]
    pub type krb5_secure_cookie = _krb5_secure_cookie;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "559:16"]
    pub struct _krb5_secure_cookie {
        pub time: time_t,
        pub data: *mut *mut krb5_pa_data,
    }
    #[c2rust::src_loc = "1293:1"]
    pub type krb5_priv = _krb5_priv;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1293:16"]
    pub struct _krb5_priv {
        pub magic: krb5_magic,
        pub enc_part: krb5_enc_data,
    }
    #[c2rust::src_loc = "813:1"]
    pub type krb5_ad_kdcissued = _krb5_ad_kdcissued;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "813:16"]
    pub struct _krb5_ad_kdcissued {
        pub ad_checksum: krb5_checksum,
        pub i_principal: krb5_principal,
        pub elements: *mut *mut krb5_authdata,
    }
    #[c2rust::src_loc = "805:1"]
    pub type krb5_fast_response = _krb5_fast_response;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "805:16"]
    pub struct _krb5_fast_response {
        pub magic: krb5_magic,
        pub padata: *mut *mut krb5_pa_data,
        pub strengthen_key: *mut krb5_keyblock,
        pub finished: *mut krb5_fast_finished,
        pub nonce: krb5_int32,
    }
    #[c2rust::src_loc = "798:1"]
    pub type krb5_fast_finished = _krb5_fast_finished;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "798:16"]
    pub struct _krb5_fast_finished {
        pub timestamp: krb5_timestamp,
        pub usec: krb5_int32,
        pub client: krb5_principal,
        pub ticket_checksum: krb5_checksum,
    }
    #[c2rust::src_loc = "1281:1"]
    pub type krb5_safe = _krb5_safe;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1281:16"]
    pub struct _krb5_safe {
        pub magic: krb5_magic,
        pub user_data: krb5_data,
        pub timestamp: krb5_timestamp,
        pub usec: krb5_int32,
        pub seq_number: krb5_ui_4,
        pub s_address: *mut krb5_address,
        pub r_address: *mut krb5_address,
        pub checksum: *mut krb5_checksum,
    }
    #[c2rust::src_loc = "839:1"]
    pub type krb5_iakerb_finished = _krb5_iakerb_finished;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "839:16"]
    pub struct _krb5_iakerb_finished {
        pub checksum: krb5_checksum,
    }
    #[c2rust::src_loc = "564:1"]
    pub type krb5_pa_pac_options = _krb5_pa_pac_options;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "564:16"]
    pub struct _krb5_pa_pac_options {
        pub options: krb5_flags,
    }
    #[c2rust::src_loc = "834:1"]
    pub type krb5_iakerb_header = _krb5_iakerb_header;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "834:16"]
    pub struct _krb5_iakerb_header {
        pub target_realm: krb5_data,
        pub cookie: *mut krb5_data,
    }
    #[c2rust::src_loc = "1298:1"]
    pub type krb5_priv_enc_part = _krb5_priv_enc_part;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1298:16"]
    pub struct _krb5_priv_enc_part {
        pub magic: krb5_magic,
        pub user_data: krb5_data,
        pub timestamp: krb5_timestamp,
        pub usec: krb5_int32,
        pub seq_number: krb5_ui_4,
        pub s_address: *mut krb5_address,
        pub r_address: *mut krb5_address,
    }
    #[c2rust::src_loc = "767:1"]
    pub type krb5_pa_s4u_x509_user = _krb5_pa_s4u_x509_user;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "767:16"]
    pub struct _krb5_pa_s4u_x509_user {
        pub user_id: krb5_s4u_userid,
        pub cksum: krb5_checksum,
    }
    #[c2rust::src_loc = "757:1"]
    pub type krb5_s4u_userid = _krb5_s4u_userid;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "757:16"]
    pub struct _krb5_s4u_userid {
        pub nonce: krb5_int32,
        pub user: krb5_principal,
        pub subject_cert: krb5_data,
        pub options: krb5_flags,
    }
    #[c2rust::src_loc = "856:1"]
    pub type krb5_cammac = _krb5_cammac;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "856:16"]
    pub struct _krb5_cammac {
        pub elements: *mut *mut krb5_authdata,
        pub kdc_verifier: *mut krb5_verifier_mac,
        pub svc_verifier: *mut krb5_verifier_mac,
        pub other_verifiers: *mut *mut krb5_verifier_mac,
    }
    #[c2rust::src_loc = "552:1"]
    pub type krb5_kkdcp_message = _krb5_kkdcp_message;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "552:16"]
    pub struct _krb5_kkdcp_message {
        pub kerb_message: krb5_data,
        pub target_domain: krb5_data,
        pub dclocator_hint: krb5_int32,
    }
    #[c2rust::src_loc = "746:1"]
    pub type krb5_pa_enc_ts = _krb5_pa_enc_ts;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "746:16"]
    pub struct _krb5_pa_enc_ts {
        pub patimestamp: krb5_timestamp,
        pub pausec: krb5_int32,
    }
    #[c2rust::src_loc = "460:1"]
    pub type krb5_sam_challenge_2 = _krb5_sam_challenge_2;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "460:16"]
    pub struct _krb5_sam_challenge_2 {
        pub sam_challenge_2_body: krb5_data,
        pub sam_cksum: *mut *mut krb5_checksum,
    }
    #[c2rust::src_loc = "527:1"]
    pub type krb5_pa_otp_challenge = _krb5_pa_otp_challenge;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "527:16"]
    pub struct _krb5_pa_otp_challenge {
        pub nonce: krb5_data,
        pub service: krb5_data,
        pub tokeninfo: *mut *mut krb5_otp_tokeninfo,
        pub salt: krb5_data,
        pub s2kparams: krb5_data,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "819:16"]
    pub struct _krb5_ad_signedpath_data {
        pub client: krb5_principal,
        pub authtime: krb5_timestamp,
        pub delegated: *mut krb5_principal,
        pub method_data: *mut *mut krb5_pa_data,
        pub authorization_data: *mut *mut krb5_authdata,
    }
    #[c2rust::src_loc = "819:1"]
    pub type krb5_ad_signedpath_data = _krb5_ad_signedpath_data;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1417:8"]
    pub struct krb5_safe_with_body {
        pub safe: *mut krb5_safe,
        pub body: *mut krb5_data,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "1474:8"]
    pub struct krb5_setpw_req {
        pub target: krb5_principal,
        pub password: krb5_data,
    }
    /*
 * End "los-proto.h"
 */
    /*
 * Flags for the os_flags field
 *
 * KRB5_OS_TOFFSET_VALID means that the time offset fields are valid.
 * The intention is that this facility to correct the system clocks so
 * that they reflect the "real" time, for systems where for some
 * reason we can't set the system clock.  Instead we calculate the
 * offset between the system time and real time, and store the offset
 * in the os context so that we can correct the system clock as necessary.
 *
 * KRB5_OS_TOFFSET_TIME means that the time offset fields should be
 * returned as the time by the krb5 time routines.  This should only
 * be used for testing purposes (obviously!)
 */
    /* lock mode flags */
    /*
 * Begin "preauth.h"
 *
 * (Originally written by Glen Machin at Sandia Labs.)
 */
/*
 * Sandia National Laboratories also makes no representations about the
 * suitability of the modifications, or additions to this software for
 * any purpose.  It is provided "as is" without express or implied warranty.
 */
    /* check logon hour restrictions */
    /* sign with usage 27 instead of 26 */
    /* padata from req_body is used*/
    /* Bits 0-15 are critical in FAST options (RFC 6113 section 7.3). */
    /*
 * AD-CAMMAC's other-verifiers field is a sequence of Verifier, which is an
 * extensible choice with only one selection, Verifier-MAC.  For the time being
 * we will represent this field directly as an array of krb5_verifier_mac.
 * That will have to change if other selections are added.
 */
    /* Does not return a copy; original padata sequence responsible for freeing*/
    /* Allocate a pa-data object with uninitialized contents of size len.  If len
 * is 0, set the contents field to NULL. */
    /* Free a single pa-data object. */
    /* Without copying, add single element *pa to *list, reallocating as necessary.
 * If *list is NULL, allocate a new list.  Set *pa to NULL on success. */
    /* Without copying, add a pa-data element of type pa_type to *list with the
 * contents in data.  Set *data to empty_data() on success. */
    /* Add an empty pa-data element of type pa_type to *list. */
    /* KRB5_PREAUTH__ */
    /*
 * End "preauth.h"
 */
    /* #include "krb5/wordsize.h" -- comes in through base-defs.h. */
    /* ** Plugin framework ***/
    /*
 * This framework can be used to create pluggable interfaces.  Not all existing
 * pluggable interface use this framework, but new ones should.  A new
 * pluggable interface entails:
 *
 * - An interface ID definition in the list of #defines below.
 *
 * - A name in the interface_names array in lib/krb5/krb/plugins.c.
 *
 * - An installed public header file in include/krb5.  The public header should
 *   include <krb5/plugin.h> and should declare a vtable structure for each
 *   supported major version of the interface.
 *
 * - A consumer API implementation, located within the code unit which makes
 *   use of the pluggable interface.  The consumer API should consist of:
 *
 *   . An interface-specific handle type which contains a vtable structure for
 *     the module (or a union of several such structures, if there are multiple
 *     supported major versions) and, optionally, resource data bound to the
 *     handle.
 *
 *   . An interface-specific loader function which creates a handle or list of
 *     handles.  A list of handles would be created if the interface is a
 *     one-to-many interface where the consumer wants to consult all available
 *     modules; a single handle would be created for an interface where the
 *     consumer wants to consult a specific module.  The loader function should
 *     use k5_plugin_load or k5_plugin_load_all to produce one or a list of
 *     vtable initializer functions, and should use those functions to fill in
 *     the vtable structure for the module (if necessary, trying each supported
 *     major version starting from the most recent).  The loader function can
 *     also bind resource data into the handle based on caller arguments, if
 *     appropriate.
 *
 *   . For each plugin method, a wrapper function which accepts a krb5_context,
 *     a plugin handle, and the method arguments.  Wrapper functions should
 *     invoke the method function contained in the handle's vtable.
 *
 * - Possibly, built-in implementations of the interface, also located within
 *   the code unit which makes use of the interface.  Built-in implementations
 *   must be registered with k5_plugin_register before the first call to
 *   k5_plugin_load or k5_plugin_load_all.
 *
 * A pluggable interface should have one or more currently supported major
 * versions, starting at 1.  Each major version should have a current minor
 * version, also starting at 1.  If new methods are added to a vtable, the
 * minor version should be incremented and the vtable stucture should document
 * where each minor vtable version ends.  If method signatures for a vtable are
 * changed, the major version should be incremented.
 *
 * Plugin module implementations (either built-in or dynamically loaded) should
 * define a function named <interfacename>_<modulename>_initvt, matching the
 * signature of krb5_plugin_initvt_fn as declared in include/krb5/plugin.h.
 * The initvt function should check the given maj_ver argument against its own
 * supported major versions, cast the vtable pointer to the appropriate
 * interface-specific vtable type, and fill in the vtable methods, stopping as
 * appropriate for the given min_ver.  Memory for the vtable structure is
 * allocated by the caller, not by the module.
 *
 * Dynamic plugin modules are registered with the framework through the
 * [plugins] section of the profile, as described in the admin documentation
 * and krb5.conf man page.
 */
    /* Holds krb5_context information about each pluggable interface. */
    /* A list of plugin interface IDs.  Make sure to increment
 * PLUGIN_NUM_INTERFACES when a new interface is added, and add an entry to the
 * interface_names table in lib/krb5/krb/plugin.c. */
    /* Retrieve the plugin module of type interface_id and name modname,
 * storing the result into module. */
    /* Retrieve all plugin modules of type interface_id, storing the result
 * into modules.  Free the result with k5_plugin_free_handles. */
    /* Release a module list allocated by k5_plugin_load_all. */
    /* Register a plugin module of type interface_id and name modname. */
    /*
 * Register a plugin module which is part of the krb5 tree but is built as a
 * dynamic plugin.  Look for the module in modsubdir relative to the
 * context->base_plugin_dir.
 */
    /* Destroy the module state within context; used by krb5_free_context. */
    /* private, in kdb5.h */
    /* allowable clock skew */
    /* Message size above which we'll try TCP first in send-to-kdc
       type code.  Aside from the 2**16 size limit, we put no
       absolute limit on the UDP packet size.  */
    /* Use the config-file ktypes instead of app-specified?  */
    /* locate_kdc module stuff */
    /* preauth module stuff */
    /* cache module stuff */
    /* localauth module stuff */
    /* hostrealm module stuff */
    /* TLS module vtable (if loaded) */
    /* error detail info */
    /* For Sun iprop code; does this really have to be here?  */
    /* could be used in a table to find an etype and initialize a block */
    /* internal message representations */
    /* user data */
    /* client time, optional */
    /* microsecond portion of time,
                                           optional */
    /* sequence #, optional */
    /* sender address */
    /* recipient address, optional */
    /* data integrity checksum */
    /* encrypted part */
    /* user data */
    /* client time, optional */
    /* microsecond portion of time, opt. */
    /* sequence #, optional */
    /* sender address */
    /* recipient address, optional */
    /*
 * Begin "asn1.h"
 */
    /* ASN.1 encoding knowledge; KEEP IN SYNC WITH ASN.1 defs! */
/* here we use some knowledge of ASN.1 encodings */
/*
  Ticket is APPLICATION 1.
  Authenticator is APPLICATION 2.
  AS_REQ is APPLICATION 10.
  AS_REP is APPLICATION 11.
  TGS_REQ is APPLICATION 12.
  TGS_REP is APPLICATION 13.
  AP_REQ is APPLICATION 14.
  AP_REP is APPLICATION 15.
  KRB_SAFE is APPLICATION 20.
  KRB_PRIV is APPLICATION 21.
  KRB_CRED is APPLICATION 22.
  EncASRepPart is APPLICATION 25.
  EncTGSRepPart is APPLICATION 26.
  EncAPRepPart is APPLICATION 27.
  EncKrbPrivPart is APPLICATION 28.
  EncKrbCredPart is APPLICATION 29.
  KRB_ERROR is APPLICATION 30.
*/
/* allow either constructed or primitive encoding, so check for bit 6
   set or reset */
    /* ************************************************************************
 * Prototypes for krb5_encode.c
 *************************************************************************/
    /*
  krb5_error_code encode_krb5_structure(const krb5_structure *rep,
  krb5_data **code);
  modifies  *code
  effects   Returns the ASN.1 encoding of *rep in **code.
  Returns ASN1_MISSING_FIELD if a required field is emtpy in *rep.
  Returns ENOMEM if memory runs out.
*/
    /* yes, the translation is identical to that used for KDC__REP */
    /* yes, the translation is identical to that used for KDC__REP */
    /* ************************************************************************
 * End of prototypes for krb5_encode.c
 *************************************************************************/
    /* ************************************************************************
 * Prototypes for krb5_decode.c
 *************************************************************************/
/*
  krb5_error_code decode_krb5_structure(const krb5_data *code,
  krb5_structure **rep);

  requires  Expects **rep to not have been allocated;
  a new *rep is allocated regardless of the old value.
  effects   Decodes *code into **rep.
  Returns ENOMEM if memory is exhausted.
  Returns asn1 and krb5 errors.
*/
    /* kdb.h */
    /* Master key version number */
    /* kvno of key_data elements (all the same) */
    /* ************************************************************************
 * End of prototypes for krb5_decode.c
 *************************************************************************/
    /* KRB5_ASN1__ */
    /*
 * End "asn1.h"
 */
    /*
 * Internal krb5 library routines
 */
    /* Return true if s is non-empty and composed solely of digits. */
    /*
 * Initialization routines.
 */
    /* [De]serialize 4-byte integer */
    /* [De]serialize 8-byte integer */
    /* [De]serialize byte string */
    /* Fill in the buffer with random alpha-numeric data. */
    /* value to use when requesting a keytab entry and KVNO doesn't matter */
    /* value to use when requesting a keytab entry and enctype doesn't matter */
    /* To keep happy libraries which are (for now) accessing internal stuff */
    /* Make sure to increment by one when changing the struct */
    /* Used for KDB LDAP back end.  */
    /*
     * pkinit asn.1 encode/decode functions
     */
    /* Set *tag_out to the integrity tag of *enc.  (Does not allocate memory;
 * returned buffer is a subrange of *ctext.) */
    /*
 * This structure was exposed and used in macros in krb5 1.2, so do not
 * change its ABI.
 */
    /* routines always present */
    /* routines to be included on extended version (write routines) */
    /* Not sure it's ready for exposure just yet.  */
    /*
 * Referral definitions and subfunctions.
 */
    /* should move into k5-int.h */
    /* chk_trans.c */
    /* free_rtree.c */
    /* Some data comparison and conversion functions.  */
    /* Allocate at least one byte since zero-byte allocs may return NULL. */
    /* Allocate zeroed memory; set *code to 0 on success or ENOMEM on failure. */
    /* Allocate at least one byte since zero-byte allocs may return NULL. */
    /* Allocate zeroed memory; set *code to 0 on success or ENOMEM on failure. */
    /* Return a copy of the len bytes of memory at in; set *code to 0 or ENOMEM. */
    /* Like k5memdup, but add a final null byte. */
    /* Convert a krb5_timestamp to a time_t value, treating the negative range of
 * krb5_timestamp as times between 2038 and 2106 (if time_t is 64-bit). */
    #[inline]
    #[c2rust::src_loc = "2338:1"]
    pub unsafe extern "C" fn ts2tt(mut timestamp: krb5_timestamp) -> time_t {
        return timestamp as uint32_t as time_t;
    }
    #[inline]
    #[c2rust::src_loc = "2251:1"]
    pub unsafe extern "C" fn make_data(mut data: *mut libc::c_void,
                                       mut len: libc::c_uint) -> krb5_data {
        let mut d: krb5_data =
            krb5_data{magic: 0, length: 0, data: 0 as *mut libc::c_char,};
        d.magic = -(1760647422 as libc::c_long) as krb5_magic;
        d.data = data as *mut libc::c_char;
        d.length = len;
        return d;
    }
    use super::krb5_h::{krb5_magic, krb5_enctype, krb5_deltat, krb5_flags,
                        krb5_boolean, krb5_prompt_type, krb5_trace_callback,
                        krb5_pre_send_fn, krb5_post_recv_fn, krb5_int32,
                        krb5_data, krb5_principal, krb5_kvno, krb5_checksum,
                        krb5_enc_data, krb5_timestamp, krb5_kdc_req,
                        krb5_octet, krb5_pa_data, krb5_authdata,
                        krb5_keyblock, krb5_ui_4, krb5_address, krb5_context,
                        krb5_error_code, krb5_ticket};
    use super::profile_h::profile_t;
    use super::k5_plugin_h::plugin_dir_handle;
    use super::k5_err_h::errinfo;
    use super::k5_int_pkinit_h::krb5_algorithm_identifier;
    use super::time_t_h::time_t;
    use super::stdint_uintn_h::uint32_t;
    extern "C" {
        #[c2rust::src_loc = "1134:8"]
        pub type plugin_mapping;
        #[c2rust::src_loc = "1202:8"]
        pub type _kdb_log_context;
        #[c2rust::src_loc = "1207:8"]
        pub type k5_tls_vtable_st;
        #[c2rust::src_loc = "1206:8"]
        pub type hostrealm_module_handle;
        #[c2rust::src_loc = "1205:8"]
        pub type localauth_module_handle;
        #[c2rust::src_loc = "1204:8"]
        pub type ccselect_module_handle;
        #[c2rust::src_loc = "1203:16"]
        pub type krb5_preauth_context_st;
        #[c2rust::src_loc = "1200:8"]
        pub type _kdb5_dal_handle;
        #[no_mangle]
        #[c2rust::src_loc = "898:1"]
        pub fn krb5int_copy_data_contents(_: krb5_context,
                                          _: *const krb5_data,
                                          _: *mut krb5_data)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "2149:1"]
        pub fn krb5_free_tickets(_: krb5_context, _: *mut *mut krb5_ticket);
        #[no_mangle]
        #[c2rust::src_loc = "1308:1"]
        pub fn krb5_free_safe(_: krb5_context, _: *mut krb5_safe);
    }
    /* _KRB5_INT_H */
    /* Define shorter internal names for setting error messages. */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/k5-err.h:27"]
pub mod k5_err_h {
    /* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/* include/k5-err.h */
/*
 * Copyright 2006, 2007 Massachusetts Institute of Technology.
 * All Rights Reserved.
 *
 * Export of this software from the United States of America may
 *   require a specific license from the United States Government.
 *   It is the responsibility of any person or organization contemplating
 *   export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  Furthermore if you modify this software you must label
 * your software as modified software and not distribute it in such a
 * fashion that it might be confused with the original M.I.T. software.
 * M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
    /*
 *
 * Error-message handling
 */
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "45:8"]
    pub struct errinfo {
        pub code: libc::c_long,
        pub msg: *mut libc::c_char,
    }
    /* K5_ERR_H */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/k5-plugin.h:27"]
pub mod k5_plugin_h {
    /* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/*
 * Copyright (C) 2006 Massachusetts Institute of Technology.
 * All Rights Reserved.
 *
 * This software is being provided to you, the LICENSEE, by the
 * Massachusetts Institute of Technology (M.I.T.) under the following
 * license.  By obtaining, using and/or copying this software, you agree
 * that you have read, understood, and will comply with these terms and
 * conditions:
 *
 * Export of this software from the United States of America may
 * require a specific license from the United States Government.
 * It is the responsibility of any person or organization contemplating
 * export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify and distribute
 * this software and its documentation for any purpose and without fee or
 * royalty is hereby granted, provided that you agree to comply with the
 * following copyright notice and statements, including the disclaimer, and
 * that the same appear on ALL copies of the software and documentation,
 * including modifications that you make for internal use or for
 * distribution:
 *
 * THIS SOFTWARE IS PROVIDED "AS IS", AND M.I.T. MAKES NO REPRESENTATIONS
 * OR WARRANTIES, EXPRESS OR IMPLIED.  By way of example, but not
 * limitation, M.I.T. MAKES NO REPRESENTATIONS OR WARRANTIES OF
 * MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
 * THE LICENSED SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY
 * PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
 *
 * The name of the Massachusetts Institute of Technology or M.I.T. may NOT
 * be used in advertising or publicity pertaining to distribution of the
 * software.  Title to copyright in this software and any associated
 * documentation shall at all times remain with M.I.T., and USER agrees to
 * preserve same.
 *
 * Furthermore if you modify this software you must label
 * your software as modified software and not distribute it in such a
 * fashion that it might be confused with the original M.I.T. software.
 */
    /* Just those definitions which are needed by util/support/plugins.c,
   which gets compiled before util/et is built, which happens before
   we can construct krb5.h, which is included by k5-int.h.

   So, no krb5 types.  */
    /*
 * Plugins normally export fixed symbol names, but when statically
 * linking plugins, we need a different symbol name for each plugin.
 * The first argument to PLUGIN_SYMBOL_NAME acts as the
 * differentiator, and is only used for static plugin linking.
 *
 * Although this macro (and thus this header file) are used in plugins
 * whose code lies inside the krb5 tree, plugins maintained separately
 * from the krb5 tree do not need it; they can just use the fixed
 * symbol name unconditionally.
 */
    /* opaque */
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "82:8"]
    pub struct plugin_dir_handle {
        pub files: *mut *mut plugin_file_handle,
    }
    extern "C" {
        #[c2rust::src_loc = "80:8"]
        pub type plugin_file_handle;
    }
    /* K5_PLUGIN_H */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/profile.h:27"]
pub mod profile_h {
    /*
 * profile.h
 */
    #[c2rust::src_loc = "24:1"]
    pub type profile_t = *mut _profile_t;
    use super::krb5_h::_profile_t;
    /*@modifies internalState@*/
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/lib/krb5/asn.1/asn1_encode.h:27"]
pub mod asn1_encode_h {
    /*
 * An atype_info structure specifies how to map a C object to an ASN.1 value.
 *
 * We wind up with a lot of load-time relocations being done, which is
 * a bit annoying.  Be careful about "fixing" that at the cost of too
 * much run-time performance.  It might work to have a master "module"
 * descriptor with pointers to various arrays (type descriptors,
 * strings, field descriptors, functions) most of which don't need
 * relocation themselves, and replace most of the pointers with table
 * indices.
 *
 * It's a work in progress.
 */
    /* For bounds checking only.  By starting with 2, we guarantee that
     * zero-initialized storage will be recognized as invalid. */
    /* Use a function table to handle encoding or decoding.  tinfo is a struct
     * fn_info *. */
    /* C object is a pointer to the object to be encoded or decoded.  tinfo is
     * a struct ptr_info *. */
    /* C object to be encoded or decoded is at an offset from the original
     * pointer.  tinfo is a struct offset_info *. */
    /*
     * Indicates a sequence field which may or may not be present in the C
     * object or ASN.1 sequence.  tinfo is a struct optional_info *.  Must be
     * used within a sequence, although the optional type may be nested within
     * offset, ptr, and/or tag types.
     */
    /*
     * C object contains an integer and another C object at specified offsets,
     * to be combined and encoded or decoded as specified by a cntype_info
     * structure.  tinfo is a struct counted_info *.
     */
    /* Sequence.  tinfo is a struct seq_info *. */
    /*
     * Sequence-of, with pointer to base type descriptor, represented as a
     * null-terminated array of pointers (and thus the "base" type descriptor
     * is actually an atype_ptr node).  tinfo is a struct atype_info * giving
     * the base type.
     */
    /* Tagged version of another type.  tinfo is a struct tagged_info *. */
    /* Boolean value.  tinfo is NULL (size field determines C type width). */
    /* Signed or unsigned integer.  tinfo is NULL. */
    /*
     * Integer value taken from the type info, not from the object being
     * encoded.  tinfo is a struct immediate_info * giving the integer value
     * and error code to return if a decoded object doesn't match it (or 0 if
     * the value shouldn't be checked on decode).
     */
    /* Unused except for bounds checking.  */
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "141:8"]
    pub struct atype_info {
        pub type_0: atype_type,
        pub size: size_t,
        pub tinfo: *const libc::c_void,
    }
    #[c2rust::src_loc = "87:1"]
    pub type atype_type = libc::c_uint;
    #[c2rust::src_loc = "138:5"]
    pub const atype_max: atype_type = 15;
    #[c2rust::src_loc = "136:5"]
    pub const atype_int_immediate: atype_type = 14;
    #[c2rust::src_loc = "129:5"]
    pub const atype_uint: atype_type = 13;
    #[c2rust::src_loc = "128:5"]
    pub const atype_int: atype_type = 12;
    #[c2rust::src_loc = "126:5"]
    pub const atype_bool: atype_type = 11;
    #[c2rust::src_loc = "124:5"]
    pub const atype_tagged_thing: atype_type = 10;
    #[c2rust::src_loc = "122:5"]
    pub const atype_nonempty_nullterm_sequence_of: atype_type = 9;
    #[c2rust::src_loc = "121:5"]
    pub const atype_nullterm_sequence_of: atype_type = 8;
    #[c2rust::src_loc = "114:5"]
    pub const atype_sequence: atype_type = 7;
    #[c2rust::src_loc = "112:5"]
    pub const atype_counted: atype_type = 6;
    #[c2rust::src_loc = "106:5"]
    pub const atype_optional: atype_type = 5;
    #[c2rust::src_loc = "99:5"]
    pub const atype_offset: atype_type = 4;
    #[c2rust::src_loc = "96:5"]
    pub const atype_ptr: atype_type = 3;
    #[c2rust::src_loc = "93:5"]
    pub const atype_fn: atype_type = 2;
    #[c2rust::src_loc = "90:5"]
    pub const atype_min: atype_type = 1;
    /* Points to type-specific structure */
    #[derive(Copy, Clone, BitfieldStruct)]
    #[repr(C)]
    #[c2rust::src_loc = "179:8"]
    pub struct tagged_info {
        #[bitfield(name = "tagval", ty = "libc::c_uint", bits = "0..=15")]
        #[bitfield(name = "tagtype", ty = "libc::c_uint", bits = "16..=23")]
        #[bitfield(name = "construction", ty = "libc::c_uint", bits =
                   "24..=29")]
        #[bitfield(name = "implicit", ty = "libc::c_uint", bits = "30..=30")]
        pub tagval_tagtype_construction_implicit: [u8; 4],
        #[bitfield(padding)]
        pub c2rust_padding: [u8; 4],
        pub basetype: *const atype_info,
    }
    /* A cntype_info structure specifies how to map a C object and count (length or
 * union distinguisher) to an ASN.1 value. */
    /*
     * Apply an encoder function (contents only) and wrap it in a universal
     * primitive tag.  The C object must be a char * or uint8_t *.  tinfo
     * is a struct string_info *.
     */
    /*
     * The C object is a DER encoding (with tag), to be simply inserted on
     * encode or stored on decode.  The C object must be a char * or unsigned
     * char *.  tinfo is NULL.
     */
    /* An ASN.1 sequence-of value, represtened in C as a counted array.  struct
     * atype_info * giving the base type, which must be of type atype_ptr. */
    /* An ASN.1 choice, represented in C as a distinguisher and union.  tinfo
     * is a struct choice_info *. */
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "236:8"]
    pub struct seq_info {
        pub fields: *mut *const atype_info,
        pub n_fields: size_t,
    }
    #[derive(Copy, Clone, BitfieldStruct)]
    #[repr(C)]
    #[c2rust::src_loc = "160:8"]
    pub struct offset_info {
        #[bitfield(name = "dataoff", ty = "libc::c_uint", bits = "0..=8")]
        pub dataoff: [u8; 2],
        #[bitfield(padding)]
        pub c2rust_padding: [u8; 6],
        pub basetype: *const atype_info,
    }
    #[derive(Copy, Clone, BitfieldStruct)]
    #[repr(C)]
    #[c2rust::src_loc = "171:8"]
    pub struct counted_info {
        #[bitfield(name = "dataoff", ty = "libc::c_uint", bits = "0..=8")]
        #[bitfield(name = "lenoff", ty = "libc::c_uint", bits = "9..=17")]
        #[bitfield(name = "lensigned", ty = "libc::c_uint", bits = "18..=18")]
        #[bitfield(name = "lensize", ty = "libc::c_uint", bits = "19..=23")]
        pub dataoff_lenoff_lensigned_lensize: [u8; 3],
        #[bitfield(padding)]
        pub c2rust_padding: [u8; 5],
        pub basetype: *const cntype_info,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "220:8"]
    pub struct cntype_info {
        pub type_0: cntype_type,
        pub tinfo: *const libc::c_void,
    }
    #[c2rust::src_loc = "192:1"]
    pub type cntype_type = libc::c_uint;
    #[c2rust::src_loc = "217:5"]
    pub const cntype_max: cntype_type = 6;
    #[c2rust::src_loc = "215:5"]
    pub const cntype_choice: cntype_type = 5;
    #[c2rust::src_loc = "211:5"]
    pub const cntype_seqof: cntype_type = 4;
    #[c2rust::src_loc = "207:5"]
    pub const cntype_der: cntype_type = 3;
    #[c2rust::src_loc = "200:5"]
    pub const cntype_string: cntype_type = 2;
    #[c2rust::src_loc = "193:5"]
    pub const cntype_min: cntype_type = 1;
    #[derive(Copy, Clone, BitfieldStruct)]
    #[repr(C)]
    #[c2rust::src_loc = "225:8"]
    pub struct string_info {
        pub enc: Option<unsafe extern "C" fn(_: *mut asn1buf,
                                             _: *const *mut uint8_t,
                                             _: size_t) -> krb5_error_code>,
        pub dec: Option<unsafe extern "C" fn(_: *const uint8_t, _: size_t,
                                             _: *mut *mut uint8_t,
                                             _: *mut size_t)
                            -> krb5_error_code>,
        #[bitfield(name = "tagval", ty = "libc::c_uint", bits = "0..=4")]
        pub tagval: [u8; 1],
        #[bitfield(padding)]
        pub c2rust_padding: [u8; 7],
    }
    #[c2rust::src_loc = "34:1"]
    pub type asn1buf = asn1buf_st;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "165:8"]
    pub struct optional_info {
        pub is_present: Option<unsafe extern "C" fn(_: *const libc::c_void)
                                   -> libc::c_int>,
        pub init: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
        pub basetype: *const atype_info,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "154:8"]
    pub struct ptr_info {
        pub loadptr: Option<unsafe extern "C" fn(_: *const libc::c_void)
                                -> *mut libc::c_void>,
        pub storeptr: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                  _: *mut libc::c_void)
                                 -> ()>,
        pub basetype: *const atype_info,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "184:8"]
    pub struct immediate_info {
        pub val: intmax_t,
        pub err: krb5_error_code,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "231:8"]
    pub struct choice_info {
        pub options: *mut *const atype_info,
        pub n_options: size_t,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "147:8"]
    pub struct fn_info {
        pub enc: Option<unsafe extern "C" fn(_: *mut asn1buf,
                                             _: *const libc::c_void,
                                             _: *mut taginfo)
                            -> krb5_error_code>,
        pub dec: Option<unsafe extern "C" fn(_: *const taginfo,
                                             _: *const uint8_t, _: size_t,
                                             _: *mut libc::c_void)
                            -> krb5_error_code>,
        pub check_tag: Option<unsafe extern "C" fn(_: *const taginfo)
                                  -> libc::c_int>,
        pub free_func: Option<unsafe extern "C" fn(_: *mut libc::c_void)
                                  -> ()>,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "36:9"]
    pub struct taginfo {
        pub asn1class: asn1_class,
        pub construction: asn1_construction,
        pub tagnum: asn1_tagnum,
        pub tag_len: size_t,
        pub tag_end_len: size_t,
    }
    use super::stddef_h::size_t;
    use super::krb5_h::{krb5_error_code, krb5_data};
    use super::stdint_uintn_h::uint8_t;
    use super::stdint_h::{intmax_t, uintmax_t};
    use super::krbasn1_h::{asn1_class, asn1_construction, asn1_tagnum};
    use super::time_t_h::time_t;
    extern "C" {
        #[c2rust::src_loc = "34:16"]
        pub type asn1buf_st;
        /* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/* lib/krb5/asn.1/asn1_encode.h */
/*
 * Copyright 1994, 2008 by the Massachusetts Institute of Technology.
 * All Rights Reserved.
 *
 * Export of this software from the United States of America may
 *   require a specific license from the United States Government.
 *   It is the responsibility of any person or organization contemplating
 *   export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  Furthermore if you modify this software you must label
 * your software as modified software and not distribute it in such a
 * fashion that it might be confused with the original M.I.T. software.
 * M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
        /* When decoding, stores the leading and trailing lengths of a tag.  Used
     * by store_der(). */
        /* These functions are referenced by encoder structures.  They handle the
 * encoding of primitive ASN.1 types. */
        #[no_mangle]
        #[c2rust::src_loc = "56:1"]
        pub fn k5_asn1_encode_generaltime(buf: *mut asn1buf, val: time_t)
         -> krb5_error_code;
        /* These functions are referenced by encoder structures.  They handle the
 * decoding of primitive ASN.1 types. */
        #[no_mangle]
        #[c2rust::src_loc = "66:1"]
        pub fn k5_asn1_decode_generaltime(asn1: *const uint8_t, len: size_t,
                                          time_out: *mut time_t)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "68:1"]
        pub fn k5_asn1_decode_bytestring(asn1: *const uint8_t, len: size_t,
                                         str_out: *mut *mut uint8_t,
                                         len_out: *mut size_t)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "52:1"]
        pub fn k5_asn1_encode_bytestring(buf: *mut asn1buf,
                                         val: *const *mut uint8_t,
                                         len: size_t) -> krb5_error_code;
        /* Currently all sequences are assumed to be extensible. */
        /*
 * The various DEF*TYPE macros must:
 *
 * + Define a type named aux_type_##DESCNAME, for use in any types derived from
 *   the type being defined.
 *
 * + Define an atype_info struct named k5_atype_##DESCNAME
 *
 * + Define a type-specific structure, referenced by the tinfo field
 *   of the atype_info structure.
 *
 * + Define any extra stuff needed in the type descriptor, like
 *   pointer-load functions.
 *
 * + Accept a following semicolon syntactically, to keep Emacs parsing
 *   (and indentation calculating) code happy.
 *
 * Nothing else should directly define the atype_info structures.
 */
        /* Define a type using a function table. */
        /* A sequence, defined by the indicated series of types, and an optional
 * function indicating which fields are not present. */
        /* A boolean type. */
        /* Integer types.  */
        /* Pointers to other types, to be encoded as those other types.  */
        /* Optional sequence fields.  The basic form allows arbitrary test and
 * initializer functions to be used.  INIT may be null. */
        /* This form defines an is_present function for a zero-valued integer or null
 * pointer of the base type's C type. */
        /* This form defines an is_present function for a null or empty null-terminated
 * array of the base type's C type. */
        /*
 * This encodes a pointer-to-pointer-to-thing where the passed-in
 * value points to a null-terminated list of pointers to objects to be
 * encoded, and encodes a (possibly empty) SEQUENCE OF these objects.
 *
 * BASEDESCNAME is a descriptor name for the pointer-to-thing
 * type.
 *
 * When dealing with a structure containing a
 * pointer-to-pointer-to-thing field, make a DEFPTRTYPE of this type,
 * and use that type for the structure field.
 */
        /* Objects with an explicit or implicit tag.  (Implicit tags will ignore the
 * construction field.) */
        /* Objects with an explicit APPLICATION tag added.  */
        /* Object with a context-specific tag added */
        /* Define an offset type with an explicit context tag wrapper (the usual case
 * for an RFC 4120 sequence field). */
        /* Define a counted type with an explicit context tag wrapper. */
        /* Like DEFFIELD but with an implicit context tag. */
        /*
 * DEFCOUNTED*TYPE macros must:
 *
 * + Define types named aux_ptrtype_##DESCNAME and aux_counttype_##DESCNAME, to
 *   allow type checking when the counted type is referenced with structure
 *   field offsets in DEFCOUNTEDTYPE.
 *
 * + Define a cntype_info struct named k5_cntype_##DESCNAME
 *
 * + Define a type-specific structure, referenced by the tinfo field of the
 *   cntype_info structure.
 *
 * + Accept a following semicolon syntactically.
 */
        /*
 * Declare an externally-defined type.  This is a hack we should do
 * away with once we move to generating code from a script.  For now,
 * this macro is unfortunately not compatible with the defining macros
 * above, since you can't do the typedefs twice and we need the
 * declarations to produce typedefs.  (We could eliminate the typedefs
 * from the DEF* macros, but then every DEF* macro use, even the ones
 * for internal type nodes we only use to build other types, would
 * need an accompanying declaration which explicitly lists the
 * type.)
 */
        /* Partially encode the contents of a type and return its tag information.
 * Used only by kdc_req_body. */
        /* Decode the tag and contents of a type, storing the result in the
 * caller-allocated C object val.  Used only by kdc_req_body. */
        /* Returns a completed encoding, with tag and in the correct byte order, in an
 * allocated krb5_data. */
        #[no_mangle]
        #[c2rust::src_loc = "540:1"]
        pub fn k5_asn1_full_decode(code: *const krb5_data,
                                   a: *const atype_info,
                                   rep_out: *mut *mut libc::c_void)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "537:1"]
        pub fn k5_asn1_full_encode(rep: *const libc::c_void,
                                   a: *const atype_info,
                                   code_out: *mut *mut krb5_data)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "525:1"]
        pub fn k5_asn1_encode_atype(buf: *mut asn1buf,
                                    val: *const libc::c_void,
                                    a: *const atype_info,
                                    tag_out: *mut taginfo) -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "531:1"]
        pub fn k5_asn1_decode_atype(t: *const taginfo, asn1: *const uint8_t,
                                    len: size_t, a: *const atype_info,
                                    val: *mut libc::c_void)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "54:1"]
        pub fn k5_asn1_encode_bitstring(buf: *mut asn1buf,
                                        val: *const *mut uint8_t, len: size_t)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "70:1"]
        pub fn k5_asn1_decode_bitstring(asn1: *const uint8_t, len: size_t,
                                        bits_out: *mut *mut uint8_t,
                                        len_out: *mut size_t)
         -> krb5_error_code;
        #[no_mangle]
        #[c2rust::src_loc = "50:1"]
        pub fn k5_asn1_encode_int(buf: *mut asn1buf, val: intmax_t);
        #[no_mangle]
        #[c2rust::src_loc = "51:1"]
        pub fn k5_asn1_encode_uint(buf: *mut asn1buf, val: uintmax_t);
        #[no_mangle]
        #[c2rust::src_loc = "62:1"]
        pub fn k5_asn1_decode_int(asn1: *const uint8_t, len: size_t,
                                  val: *mut intmax_t) -> krb5_error_code;
    }
    /*
 * Ugly hack!
 * Like "offsetof", but with type checking.
 */
    /* gobble semicolon */
    /* gobble semicolon */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/lib/krb5/asn.1/krbasn1.h:27"]
pub mod krbasn1_h {
    #[c2rust::src_loc = "32:34"]
    pub const CONSTRUCTED: asn1_construction = 32;
    #[c2rust::src_loc = "35:16"]
    pub const CONTEXT_SPECIFIC: asn1_class = 128;
    #[c2rust::src_loc = "34:34"]
    pub const APPLICATION: asn1_class = 64;
    #[c2rust::src_loc = "37:1"]
    pub type asn1_tagnum = libc::c_int;
    #[c2rust::src_loc = "32:9"]
    pub type asn1_construction = libc::c_uint;
    #[c2rust::src_loc = "32:16"]
    pub const PRIMITIVE: asn1_construction = 0;
    #[c2rust::src_loc = "34:9"]
    pub type asn1_class = libc::c_uint;
    #[c2rust::src_loc = "35:41"]
    pub const PRIVATE: asn1_class = 192;
    #[c2rust::src_loc = "34:16"]
    pub const UNIVERSAL: asn1_class = 0;
    /* Kerberos Message Types */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/k5-int-pkinit.h:27"]
pub mod k5_int_pkinit_h {
    #[c2rust::src_loc = "98:1"]
    pub type krb5_reply_key_pack = _krb5_reply_key_pack;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "98:16"]
    pub struct _krb5_reply_key_pack {
        pub replyKey: krb5_keyblock,
        pub asChecksum: krb5_checksum,
    }
    #[c2rust::src_loc = "49:1"]
    pub type krb5_algorithm_identifier = _krb5_algorithm_identifier;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "49:16"]
    pub struct _krb5_algorithm_identifier {
        pub algorithm: krb5_data,
        pub parameters: krb5_data,
    }
    #[c2rust::src_loc = "70:1"]
    pub type krb5_external_principal_identifier
        =
        _krb5_external_principal_identifier;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "70:16"]
    pub struct _krb5_external_principal_identifier {
        pub subjectName: krb5_data,
        pub issuerAndSerialNumber: krb5_data,
        pub subjectKeyIdentifier: krb5_data,
    }
    #[c2rust::src_loc = "104:1"]
    pub type krb5_pa_pk_as_rep = _krb5_pa_pk_as_rep;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "104:16"]
    pub struct _krb5_pa_pk_as_rep {
        pub choice: krb5_pa_pk_as_rep_selection,
        pub u: krb5_pa_pk_as_rep_choices,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "110:11"]
    pub union krb5_pa_pk_as_rep_choices {
        pub dh_Info: krb5_dh_rep_info,
        pub encKeyPack: krb5_data,
    }
    #[c2rust::src_loc = "84:1"]
    pub type krb5_dh_rep_info = _krb5_dh_rep_info;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "84:16"]
    pub struct _krb5_dh_rep_info {
        pub dhSignedData: krb5_data,
        pub serverDHNonce: krb5_data,
        pub kdfID: *mut krb5_data,
    }
    #[c2rust::src_loc = "105:5"]
    pub type krb5_pa_pk_as_rep_selection = libc::c_int;
    #[c2rust::src_loc = "108:9"]
    pub const choice_pa_pk_as_rep_encKeyPack: krb5_pa_pk_as_rep_selection = 1;
    #[c2rust::src_loc = "107:9"]
    pub const choice_pa_pk_as_rep_dhInfo: krb5_pa_pk_as_rep_selection = 0;
    #[c2rust::src_loc = "106:9"]
    pub const choice_pa_pk_as_rep_UNKNOWN: krb5_pa_pk_as_rep_selection = -1;
    #[c2rust::src_loc = "61:1"]
    pub type krb5_auth_pack = _krb5_auth_pack;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "61:16"]
    pub struct _krb5_auth_pack {
        pub pkAuthenticator: krb5_pk_authenticator,
        pub clientPublicValue: *mut krb5_subject_pk_info,
        pub supportedCMSTypes: *mut *mut krb5_algorithm_identifier,
        pub clientDHNonce: krb5_data,
        pub supportedKDFs: *mut *mut krb5_data,
    }
    #[c2rust::src_loc = "55:1"]
    pub type krb5_subject_pk_info = _krb5_subject_pk_info;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "55:16"]
    pub struct _krb5_subject_pk_info {
        pub algorithm: krb5_algorithm_identifier,
        pub subjectPublicKey: krb5_data,
    }
    #[c2rust::src_loc = "40:1"]
    pub type krb5_pk_authenticator = _krb5_pk_authenticator;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "40:16"]
    pub struct _krb5_pk_authenticator {
        pub cusec: krb5_int32,
        pub ctime: krb5_timestamp,
        pub nonce: krb5_int32,
        pub paChecksum: krb5_checksum,
        pub freshnessToken: *mut krb5_data,
    }
    #[c2rust::src_loc = "77:1"]
    pub type krb5_pa_pk_as_req = _krb5_pa_pk_as_req;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "77:16"]
    pub struct _krb5_pa_pk_as_req {
        pub signedAuthPack: krb5_data,
        pub trustedCertifiers: *mut *mut krb5_external_principal_identifier,
        pub kdcPkId: krb5_data,
    }
    #[c2rust::src_loc = "91:1"]
    pub type krb5_kdc_dh_key_info = _krb5_kdc_dh_key_info;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "91:16"]
    pub struct _krb5_kdc_dh_key_info {
        pub subjectPublicKey: krb5_data,
        pub nonce: krb5_int32,
        pub dhKeyExpiration: krb5_timestamp,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "117:16"]
    pub struct _krb5_sp80056a_other_info {
        pub algorithm_identifier: krb5_algorithm_identifier,
        pub party_u_info: krb5_principal,
        pub party_v_info: krb5_principal,
        pub supp_pub_info: krb5_data,
    }
    #[c2rust::src_loc = "117:1"]
    pub type krb5_sp80056a_other_info = _krb5_sp80056a_other_info;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "125:16"]
    pub struct _krb5_pkinit_supp_pub_info {
        pub enctype: krb5_enctype,
        pub as_req: krb5_data,
        pub pk_as_rep: krb5_data,
    }
    #[c2rust::src_loc = "125:1"]
    pub type krb5_pkinit_supp_pub_info = _krb5_pkinit_supp_pub_info;
    use super::krb5_h::{krb5_keyblock, krb5_checksum, krb5_data, krb5_int32,
                        krb5_timestamp, krb5_principal, krb5_enctype};
    /* _KRB5_INT_PKINIT_H */
}
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/k5-spake.h:28"]
pub mod k5_spake_h {
    /* PA-SPAKE is a choice among the message types which can appear in a PA-SPAKE
 * padata element. */
    #[c2rust::src_loc = "85:1"]
    pub type krb5_pa_spake = krb5_pa_spake_st;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "85:16"]
    pub struct krb5_pa_spake_st {
        pub choice: krb5_spake_msgtype,
        pub u: krb5_spake_message_choices,
    }
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "87:11"]
    pub union krb5_spake_message_choices {
        pub support: krb5_spake_support,
        pub challenge: krb5_spake_challenge,
        pub response: krb5_spake_response,
        pub encdata: krb5_enc_data,
    }
    /* SPAKEResponse is sent from the client to the KDC to communicate its public
 * value and encrypted second-factor response. */
    #[c2rust::src_loc = "70:1"]
    pub type krb5_spake_response = krb5_spake_response_st;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "70:16"]
    pub struct krb5_spake_response_st {
        pub pubkey: krb5_data,
        pub factor: krb5_enc_data,
    }
    /* SPAKEChallenge is sent from the KDC to the client to communicate its group
 * selection, public value, and second-factor challenge options. */
    #[c2rust::src_loc = "62:1"]
    pub type krb5_spake_challenge = krb5_spake_challenge_st;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "62:16"]
    pub struct krb5_spake_challenge_st {
        pub group: int32_t,
        pub pubkey: krb5_data,
        pub factors: *mut *mut krb5_spake_factor,
    }
    /* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/* include/k5-spake.h - SPAKE preauth mech declarations */
/*
 * Copyright (C) 2015 by the Massachusetts Institute of Technology.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */
    /*
 * The SPAKE preauth mechanism allows long-term client keys to be used for
 * preauthentication without exposing them to offline dictionary attacks.  The
 * negotiated key can also be used for second-factor authentication.  This
 * header file declares structures and encoder/decoder functions for the
 * mechanism's padata messages.
 */
    /* SPAKESecondFactor is contained within a SPAKEChallenge, SPAKEResponse, or
 * EncryptedData message and contains a second-factor challenge or response. */
    #[c2rust::src_loc = "48:1"]
    pub type krb5_spake_factor = krb5_spake_factor_st;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "48:16"]
    pub struct krb5_spake_factor_st {
        pub type_0: int32_t,
        pub data: *mut krb5_data,
    }
    /* SPAKESupport is sent from the client to the KDC to indicate which group the
 * client supports. */
    #[c2rust::src_loc = "55:1"]
    pub type krb5_spake_support = krb5_spake_support_st;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "55:16"]
    pub struct krb5_spake_support_st {
        pub ngroups: int32_t,
        pub groups: *mut int32_t,
    }
    #[c2rust::src_loc = "75:1"]
    pub type krb5_spake_msgtype = libc::c_int;
    #[c2rust::src_loc = "80:5"]
    pub const SPAKE_MSGTYPE_ENCDATA: krb5_spake_msgtype = 3;
    #[c2rust::src_loc = "79:5"]
    pub const SPAKE_MSGTYPE_RESPONSE: krb5_spake_msgtype = 2;
    #[c2rust::src_loc = "78:5"]
    pub const SPAKE_MSGTYPE_CHALLENGE: krb5_spake_msgtype = 1;
    #[c2rust::src_loc = "77:5"]
    pub const SPAKE_MSGTYPE_SUPPORT: krb5_spake_msgtype = 0;
    #[c2rust::src_loc = "76:5"]
    pub const SPAKE_MSGTYPE_UNKNOWN: krb5_spake_msgtype = -1;
    use super::krb5_h::{krb5_enc_data, krb5_data};
    use super::stdint_intn_h::int32_t;
    /* K5_SPAKE_H */
}
#[c2rust::header_src = "/usr/include/stdlib.h:27"]
pub mod stdlib_h {
    extern "C" {
        #[no_mangle]
        #[c2rust::src_loc = "539:14"]
        pub fn malloc(_: libc::c_ulong) -> *mut libc::c_void;
        #[no_mangle]
        #[c2rust::src_loc = "565:1"]
        pub fn free(__ptr: *mut libc::c_void);
    }
}
#[c2rust::header_src = "/usr/include/string.h:27"]
pub mod string_h {
    extern "C" {
        #[no_mangle]
        #[c2rust::src_loc = "60:14"]
        pub fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong)
         -> *mut libc::c_void;
    }
}
#[c2rust::header_src = "/usr/include/bits/byteswap.h:27"]
pub mod byteswap_h {
    #[inline]
    #[c2rust::src_loc = "48:1"]
    pub unsafe extern "C" fn __bswap_32(mut __bsx: __uint32_t) -> __uint32_t {
        return (__bsx & 0xff000000 as libc::c_uint) >> 24 as libc::c_int |
                   (__bsx & 0xff0000 as libc::c_uint) >> 8 as libc::c_int |
                   (__bsx & 0xff00 as libc::c_uint) << 8 as libc::c_int |
                   (__bsx & 0xff as libc::c_uint) << 24 as libc::c_int;
    }
    use super::types_h::__uint32_t;
}
pub use self::types_h::{__uint8_t, __int32_t, __uint32_t, __intmax_t,
                        __uintmax_t, __time_t};
pub use self::time_t_h::time_t;
pub use self::stddef_h::size_t;
pub use self::stdint_intn_h::int32_t;
pub use self::stdint_uintn_h::{uint8_t, uint32_t};
pub use self::stdint_h::{intmax_t, uintmax_t};
pub use self::k5_platform_h::{C2RustUnnamed, store_32_be};
pub use self::krb5_h::{krb5_octet, krb5_int32, krb5_ui_4, krb5_boolean,
                       krb5_msgtype, krb5_kvno, krb5_addrtype, krb5_enctype,
                       krb5_cksumtype, krb5_authdatatype, krb5_preauthtype,
                       krb5_flags, krb5_timestamp, krb5_deltat,
                       krb5_error_code, krb5_magic, _krb5_data, krb5_data,
                       krb5_principal_data, krb5_principal,
                       krb5_const_principal, _krb5_address, krb5_address,
                       krb5_post_recv_fn, krb5_context, krb5_pre_send_fn,
                       krb5_trace_callback, krb5_trace_info, _krb5_trace_info,
                       krb5_prompt_type, _krb5_keyblock, krb5_keyblock,
                       _krb5_checksum, krb5_checksum, _krb5_enc_data,
                       krb5_enc_data, _krb5_ticket_times, krb5_ticket_times,
                       _krb5_authdata, krb5_authdata, _krb5_transited,
                       krb5_transited, _krb5_enc_tkt_part, krb5_enc_tkt_part,
                       _krb5_ticket, krb5_ticket, _krb5_authenticator,
                       krb5_authenticator, _krb5_last_req_entry,
                       krb5_last_req_entry, _krb5_pa_data, krb5_pa_data,
                       _krb5_kdc_req, krb5_kdc_req, _krb5_enc_kdc_rep_part,
                       krb5_enc_kdc_rep_part, _krb5_kdc_rep, krb5_kdc_rep,
                       _krb5_error, krb5_error, _krb5_ap_req, krb5_ap_req,
                       _krb5_ap_rep, krb5_ap_rep, _krb5_ap_rep_enc_part,
                       krb5_ap_rep_enc_part, _krb5_cred_info, krb5_cred_info,
                       _krb5_cred_enc_part, krb5_cred_enc_part, _krb5_cred,
                       krb5_cred, _krb5_pa_pac_req, krb5_pa_pac_req,
                       _profile_t, krb5_free_principal, krb5_free_addresses,
                       krb5_free_data};
pub use self::k5_int_h::{_krb5_context, plugin_interface, dns_canonhost,
                         CANONHOST_FALLBACK, CANONHOST_TRUE, CANONHOST_FALSE,
                         krb5_preauth_context, kdb5_dal_handle,
                         _krb5_os_context, krb5_enc_sam_response_enc_2,
                         _krb5_enc_sam_response_enc_2, krb5_verifier_mac,
                         _krb5_verifier_mac, krb5_pa_otp_req,
                         _krb5_pa_otp_req, krb5_fast_req, _krb5_fast_req,
                         krb5_etype_list, _krb5_etype_list,
                         krb5_sam_response_2, _krb5_sam_response_2,
                         krb5_sam_challenge_2_body,
                         _krb5_sam_challenge_2_body, krb5_otp_tokeninfo,
                         _krb5_otp_tokeninfo, krb5_pa_for_user,
                         _krb5_pa_for_user, krb5_etype_info_entry,
                         _krb5_etype_info_entry, krb5_ad_signedpath,
                         _krb5_ad_signedpath, krb5_fast_armored_req,
                         _krb5_fast_armored_req, krb5_fast_armor,
                         _krb5_fast_armor, krb5_secure_cookie,
                         _krb5_secure_cookie, krb5_priv, _krb5_priv,
                         krb5_ad_kdcissued, _krb5_ad_kdcissued,
                         krb5_fast_response, _krb5_fast_response,
                         krb5_fast_finished, _krb5_fast_finished, krb5_safe,
                         _krb5_safe, krb5_iakerb_finished,
                         _krb5_iakerb_finished, krb5_pa_pac_options,
                         _krb5_pa_pac_options, krb5_iakerb_header,
                         _krb5_iakerb_header, krb5_priv_enc_part,
                         _krb5_priv_enc_part, krb5_pa_s4u_x509_user,
                         _krb5_pa_s4u_x509_user, krb5_s4u_userid,
                         _krb5_s4u_userid, krb5_cammac, _krb5_cammac,
                         krb5_kkdcp_message, _krb5_kkdcp_message,
                         krb5_pa_enc_ts, _krb5_pa_enc_ts,
                         krb5_sam_challenge_2, _krb5_sam_challenge_2,
                         krb5_pa_otp_challenge, _krb5_pa_otp_challenge,
                         _krb5_ad_signedpath_data, krb5_ad_signedpath_data,
                         krb5_safe_with_body, krb5_setpw_req, ts2tt,
                         make_data, plugin_mapping, _kdb_log_context,
                         k5_tls_vtable_st, hostrealm_module_handle,
                         localauth_module_handle, ccselect_module_handle,
                         krb5_preauth_context_st, _kdb5_dal_handle,
                         krb5int_copy_data_contents, krb5_free_tickets,
                         krb5_free_safe};
pub use self::k5_err_h::errinfo;
pub use self::k5_plugin_h::{plugin_dir_handle, plugin_file_handle};
pub use self::profile_h::profile_t;
pub use self::asn1_encode_h::{atype_info, atype_type, atype_max,
                              atype_int_immediate, atype_uint, atype_int,
                              atype_bool, atype_tagged_thing,
                              atype_nonempty_nullterm_sequence_of,
                              atype_nullterm_sequence_of, atype_sequence,
                              atype_counted, atype_optional, atype_offset,
                              atype_ptr, atype_fn, atype_min, tagged_info,
                              seq_info, offset_info, counted_info,
                              cntype_info, cntype_type, cntype_max,
                              cntype_choice, cntype_seqof, cntype_der,
                              cntype_string, cntype_min, string_info, asn1buf,
                              optional_info, ptr_info, immediate_info,
                              choice_info, fn_info, taginfo, asn1buf_st,
                              k5_asn1_encode_generaltime,
                              k5_asn1_decode_generaltime,
                              k5_asn1_decode_bytestring,
                              k5_asn1_encode_bytestring, k5_asn1_full_decode,
                              k5_asn1_full_encode, k5_asn1_encode_atype,
                              k5_asn1_decode_atype, k5_asn1_encode_bitstring,
                              k5_asn1_decode_bitstring, k5_asn1_encode_int,
                              k5_asn1_encode_uint, k5_asn1_decode_int};
pub use self::krbasn1_h::{CONSTRUCTED, CONTEXT_SPECIFIC, APPLICATION,
                          asn1_tagnum, asn1_construction, PRIMITIVE,
                          asn1_class, PRIVATE, UNIVERSAL};
pub use self::k5_int_pkinit_h::{krb5_reply_key_pack, _krb5_reply_key_pack,
                                krb5_algorithm_identifier,
                                _krb5_algorithm_identifier,
                                krb5_external_principal_identifier,
                                _krb5_external_principal_identifier,
                                krb5_pa_pk_as_rep, _krb5_pa_pk_as_rep,
                                krb5_pa_pk_as_rep_choices, krb5_dh_rep_info,
                                _krb5_dh_rep_info,
                                krb5_pa_pk_as_rep_selection,
                                choice_pa_pk_as_rep_encKeyPack,
                                choice_pa_pk_as_rep_dhInfo,
                                choice_pa_pk_as_rep_UNKNOWN, krb5_auth_pack,
                                _krb5_auth_pack, krb5_subject_pk_info,
                                _krb5_subject_pk_info, krb5_pk_authenticator,
                                _krb5_pk_authenticator, krb5_pa_pk_as_req,
                                _krb5_pa_pk_as_req, krb5_kdc_dh_key_info,
                                _krb5_kdc_dh_key_info,
                                _krb5_sp80056a_other_info,
                                krb5_sp80056a_other_info,
                                _krb5_pkinit_supp_pub_info,
                                krb5_pkinit_supp_pub_info};
pub use self::k5_spake_h::{krb5_pa_spake, krb5_pa_spake_st,
                           krb5_spake_message_choices, krb5_spake_response,
                           krb5_spake_response_st, krb5_spake_challenge,
                           krb5_spake_challenge_st, krb5_spake_factor,
                           krb5_spake_factor_st, krb5_spake_support,
                           krb5_spake_support_st, krb5_spake_msgtype,
                           SPAKE_MSGTYPE_ENCDATA, SPAKE_MSGTYPE_RESPONSE,
                           SPAKE_MSGTYPE_CHALLENGE, SPAKE_MSGTYPE_SUPPORT,
                           SPAKE_MSGTYPE_UNKNOWN};
use self::stdlib_h::{malloc, free};
use self::string_h::memset;
pub use self::byteswap_h::__bswap_32;
#[c2rust::src_loc = "374:1"]
pub type aux_type_ticket = aux_type_untagged_ticket;
#[c2rust::src_loc = "373:1"]
pub type aux_type_untagged_ticket = krb5_ticket;
#[c2rust::src_loc = "70:1"]
pub type aux_counttype_s_octetstring = libc::c_uint;
#[c2rust::src_loc = "70:1"]
pub type aux_ptrtype_s_octetstring = *mut libc::c_char;
#[c2rust::src_loc = "73:1"]
pub type aux_type_ostring_data = krb5_data;
#[c2rust::src_loc = "216:1"]
pub type aux_type_enc_data_2_untagged = krb5_enc_data;
#[c2rust::src_loc = "216:1"]
pub type aux_type_enc_data_2 = aux_type_enc_data_2_untagged;
#[c2rust::src_loc = "675:1"]
pub type aux_type_enc_sam_response_enc_2 = krb5_enc_sam_response_enc_2;
#[c2rust::src_loc = "199:1"]
pub type aux_type_ptr_seqof_host_addresses
    =
    *mut aux_type_seqof_host_addresses;
#[c2rust::src_loc = "198:1"]
pub type aux_type_seqof_host_addresses = aux_type_address_ptr;
#[c2rust::src_loc = "195:1"]
pub type aux_type_address_ptr = *mut aux_type_address;
#[c2rust::src_loc = "194:1"]
pub type aux_type_address = krb5_address;
#[c2rust::src_loc = "800:1"]
pub type aux_type_tgs_req = aux_type_kdc_req;
#[c2rust::src_loc = "798:1"]
pub type aux_type_kdc_req = krb5_kdc_req;
#[c2rust::src_loc = "891:1"]
pub type aux_type_krb5_cred = aux_type_untagged_cred;
#[c2rust::src_loc = "890:1"]
pub type aux_type_untagged_cred = krb5_cred;
#[c2rust::src_loc = "1533:1"]
pub type aux_type_reply_key_pack = krb5_reply_key_pack;
#[c2rust::src_loc = "1698:1"]
pub type aux_type_vmacs = aux_type_vmac_ptr;
#[c2rust::src_loc = "1696:1"]
pub type aux_type_vmac_ptr = *mut aux_type_vmac;
#[c2rust::src_loc = "1695:1"]
pub type aux_type_vmac = krb5_verifier_mac;
#[c2rust::src_loc = "1661:1"]
pub type aux_type_pa_otp_req = krb5_pa_otp_req;
#[c2rust::src_loc = "220:1"]
pub type aux_type_encrypted_data = krb5_enc_data;
#[c2rust::src_loc = "275:1"]
pub type aux_type_auth_data = aux_type_authdata_elt_ptr;
#[c2rust::src_loc = "274:1"]
pub type aux_type_authdata_elt_ptr = *mut aux_type_authdata_elt;
#[c2rust::src_loc = "273:1"]
pub type aux_type_authdata_elt = krb5_authdata;
#[c2rust::src_loc = "1803:1"]
pub type aux_type_pa_spake = krb5_pa_spake;
#[c2rust::src_loc = "1699:1"]
pub type aux_type_vmacs_ptr = *mut aux_type_vmacs;
#[c2rust::src_loc = "1491:1"]
pub type aux_type_seqof_external_principal_identifier
    =
    aux_type_external_principal_identifier_ptr;
#[c2rust::src_loc = "1489:1"]
pub type aux_type_external_principal_identifier_ptr
    =
    *mut aux_type_external_principal_identifier;
#[c2rust::src_loc = "1487:1"]
pub type aux_type_external_principal_identifier
    =
    krb5_external_principal_identifier;
#[c2rust::src_loc = "1094:1"]
pub type aux_type_seqof_princ_plus_realm = aux_type_princ_plus_realm;
#[c2rust::src_loc = "1093:1"]
pub type aux_type_princ_plus_realm = *mut aux_type_princ_plus_realm_data;
#[c2rust::src_loc = "1091:1"]
pub type aux_type_princ_plus_realm_data = krb5_principal_data;
#[c2rust::src_loc = "1036:1"]
pub type aux_type_fast_req = krb5_fast_req;
#[c2rust::src_loc = "999:1"]
pub type aux_type_etype_list = krb5_etype_list;
#[c2rust::src_loc = "688:1"]
pub type aux_type_sam_response_2 = krb5_sam_response_2;
#[c2rust::src_loc = "667:1"]
pub type aux_type_sam_challenge_2_body = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "1615:1"]
pub type aux_type_otp_tokeninfo = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1398:1"]
pub type aux_type_pkinit_krb5_principal_name_data = krb5_principal_data;
#[c2rust::src_loc = "963:1"]
pub type aux_type_pa_for_user = krb5_pa_for_user;
#[c2rust::src_loc = "709:1"]
pub type aux_type_authenticator = aux_type_untagged_authenticator;
#[c2rust::src_loc = "708:1"]
pub type aux_type_untagged_authenticator = krb5_authenticator;
#[c2rust::src_loc = "914:1"]
pub type aux_type_enc_cred_part = aux_type_untagged_enc_cred_part;
#[c2rust::src_loc = "913:1"]
pub type aux_type_untagged_enc_cred_part = krb5_cred_enc_part;
#[c2rust::src_loc = "548:1"]
pub type aux_type_kdc_req_body = krb5_kdc_req;
#[c2rust::src_loc = "385:1"]
pub type aux_type_seqof_pa_data = aux_type_pa_data_ptr;
#[c2rust::src_loc = "383:1"]
pub type aux_type_pa_data_ptr = *mut aux_type_pa_data;
#[c2rust::src_loc = "382:1"]
pub type aux_type_pa_data = krb5_pa_data;
#[c2rust::src_loc = "635:1"]
pub type aux_type_etype_info = aux_type_etype_info_entry_ptr;
#[c2rust::src_loc = "634:1"]
pub type aux_type_etype_info_entry_ptr = *mut aux_type_etype_info_entry;
#[c2rust::src_loc = "621:1"]
pub type aux_type_etype_info_entry = krb5_etype_info_entry;
#[c2rust::src_loc = "1762:1"]
pub type aux_type_spake_factor = krb5_spake_factor;
#[c2rust::src_loc = "1542:1"]
pub type aux_type_pa_pk_as_rep = krb5_pa_pk_as_rep;
#[c2rust::src_loc = "731:1"]
pub type aux_type_enc_tkt_part = aux_type_untagged_enc_tkt_part;
#[c2rust::src_loc = "730:1"]
pub type aux_type_untagged_enc_tkt_part = krb5_enc_tkt_part;
#[c2rust::src_loc = "1669:1"]
pub type aux_type_pa_otp_enc_req = krb5_data;
#[c2rust::src_loc = "638:1"]
pub type aux_type_etype_info2 = aux_type_etype_info2_entry_ptr;
#[c2rust::src_loc = "637:1"]
pub type aux_type_etype_info2_entry_ptr = *mut aux_type_etype_info2_entry;
#[c2rust::src_loc = "632:1"]
pub type aux_type_etype_info2_entry = krb5_etype_info_entry;
#[c2rust::src_loc = "386:1"]
pub type aux_type_ptr_seqof_pa_data = *mut aux_type_seqof_pa_data;
#[c2rust::src_loc = "1124:1"]
pub type aux_type_ad_signedpath = krb5_ad_signedpath;
#[c2rust::src_loc = "799:1"]
pub type aux_type_as_req = aux_type_kdc_req;
/* This is a CHOICE type with only one choice (so far) and we're not using a
 * distinguisher/union for it. */
#[c2rust::src_loc = "1024:1"]
pub type aux_type_pa_fx_fast_request = aux_type_fast_armored_req;
#[c2rust::src_loc = "1020:1"]
pub type aux_type_fast_armored_req = krb5_fast_armored_req;
#[c2rust::src_loc = "1731:1"]
pub type aux_type_secure_cookie = krb5_secure_cookie;
#[c2rust::src_loc = "858:1"]
pub type aux_type_priv = aux_type_untagged_priv;
#[c2rust::src_loc = "857:1"]
pub type aux_type_untagged_priv = krb5_priv;
#[c2rust::src_loc = "1084:1"]
pub type aux_type_ad_kdc_issued = krb5_ad_kdcissued;
#[c2rust::src_loc = "1062:1"]
pub type aux_type_fast_response = krb5_fast_response;
#[c2rust::src_loc = "937:1"]
pub type aux_type_krb5_error = aux_type_untagged_krb5_error;
#[c2rust::src_loc = "936:1"]
pub type aux_type_untagged_krb5_error = krb5_error;
#[c2rust::src_loc = "830:1"]
pub type aux_type_safe = aux_type_untagged_safe;
#[c2rust::src_loc = "829:1"]
pub type aux_type_untagged_safe = krb5_safe;
#[c2rust::src_loc = "773:1"]
pub type aux_type_ap_rep = aux_type_untagged_ap_rep;
#[c2rust::src_loc = "772:1"]
pub type aux_type_untagged_ap_rep = krb5_ap_rep;
#[c2rust::src_loc = "391:1"]
pub type aux_type_ptr_seqof_ticket = *mut aux_type_seqof_ticket;
#[c2rust::src_loc = "390:1"]
pub type aux_type_seqof_ticket = aux_type_ticket_ptr;
#[c2rust::src_loc = "389:1"]
pub type aux_type_ticket_ptr = *mut aux_type_ticket;
#[c2rust::src_loc = "95:1"]
pub type aux_type_seqof_utf8_data = aux_type_utf8_data_ptr;
#[c2rust::src_loc = "94:1"]
pub type aux_type_utf8_data_ptr = *mut aux_type_utf8_data;
#[c2rust::src_loc = "92:1"]
pub type aux_type_utf8_data = krb5_data;
#[c2rust::src_loc = "1139:1"]
pub type aux_type_iakerb_finished = krb5_iakerb_finished;
#[c2rust::src_loc = "1752:1"]
pub type aux_type_pa_pac_options = krb5_pa_pac_options;
#[c2rust::src_loc = "1476:1"]
pub type aux_type_auth_pack = krb5_auth_pack;
#[c2rust::src_loc = "749:1"]
pub type aux_type_as_rep = aux_type_kdc_rep;
#[c2rust::src_loc = "748:1"]
pub type aux_type_kdc_rep = krb5_kdc_rep;
#[c2rust::src_loc = "300:1"]
pub type aux_type_encryption_key = krb5_keyblock;
#[c2rust::src_loc = "1508:1"]
pub type aux_type_pa_pk_as_req = krb5_pa_pk_as_req;
#[c2rust::src_loc = "1132:1"]
pub type aux_type_iakerb_header = krb5_iakerb_header;
#[c2rust::src_loc = "786:1"]
pub type aux_type_ap_rep_enc_part = aux_type_untagged_ap_rep_enc_part;
#[c2rust::src_loc = "784:1"]
pub type aux_type_untagged_ap_rep_enc_part = krb5_ap_rep_enc_part;
#[c2rust::src_loc = "880:1"]
pub type aux_type_priv_enc_part = aux_type_untagged_priv_enc_part;
#[c2rust::src_loc = "879:1"]
pub type aux_type_untagged_priv_enc_part = krb5_priv_enc_part;
#[c2rust::src_loc = "1371:1"]
pub type aux_type_ptr_seqof_algorithm_identifier
    =
    *mut aux_type_seqof_algorithm_identifier;
#[c2rust::src_loc = "1370:1"]
pub type aux_type_seqof_algorithm_identifier
    =
    aux_type_ptr_algorithm_identifier;
#[c2rust::src_loc = "1368:1"]
pub type aux_type_ptr_algorithm_identifier
    =
    *mut aux_type_algorithm_identifier;
#[c2rust::src_loc = "1366:1"]
pub type aux_type_algorithm_identifier = krb5_algorithm_identifier;
#[c2rust::src_loc = "990:1"]
pub type aux_type_pa_s4u_x509_user = krb5_pa_s4u_x509_user;
#[c2rust::src_loc = "1095:1"]
pub type aux_type_ptr_seqof_princ_plus_realm
    =
    *mut aux_type_seqof_princ_plus_realm;
#[c2rust::src_loc = "1710:1"]
pub type aux_type_cammac = krb5_cammac;
#[c2rust::src_loc = "1526:1"]
pub type aux_type_kdc_dh_key_info = krb5_kdc_dh_key_info;
#[c2rust::src_loc = "1683:1"]
pub type aux_type_kkdcp_message = krb5_kkdcp_message;
#[c2rust::src_loc = "276:1"]
pub type aux_type_auth_data_ptr = *mut aux_type_auth_data;
#[c2rust::src_loc = "763:1"]
pub type aux_type_ap_req = aux_type_untagged_ap_req;
#[c2rust::src_loc = "762:1"]
pub type aux_type_untagged_ap_req = krb5_ap_req;
#[c2rust::src_loc = "944:1"]
pub type aux_type_pa_enc_ts = krb5_pa_enc_ts;
#[c2rust::src_loc = "750:1"]
pub type aux_type_tgs_rep = aux_type_kdc_rep;
#[c2rust::src_loc = "996:1"]
pub type aux_type_pa_pac_req = krb5_pa_pac_req;
#[c2rust::src_loc = "645:1"]
pub type aux_type_sam_challenge_2 = krb5_sam_challenge_2;
#[c2rust::src_loc = "309:1"]
pub type aux_type_checksum = krb5_checksum;
#[c2rust::src_loc = "1591:1"]
pub type aux_type_seqof_typed_data = aux_type_typed_data_ptr;
#[c2rust::src_loc = "1589:1"]
pub type aux_type_typed_data_ptr = *mut aux_type_typed_data;
#[c2rust::src_loc = "1588:1"]
pub type aux_type_typed_data = krb5_pa_data;
#[c2rust::src_loc = "1634:1"]
pub type aux_type_pa_otp_challenge = krb5_pa_otp_challenge;
/* This is a CHOICE type with only one choice (so far) and we're not using a
 * distinguisher/union for it. */
#[c2rust::src_loc = "1072:1"]
pub type aux_type_pa_fx_fast_reply = aux_type_fast_rep;
#[c2rust::src_loc = "1068:1"]
pub type aux_type_fast_rep = krb5_enc_data;
/*
 * krb5_kvno is defined as unsigned int, but historically (MIT krb5 through 1.6
 * in the encoder, and through 1.10 in the decoder) we treat it as signed, in
 * violation of RFC 4120.  kvno values large enough to be problematic are only
 * likely to be seen with Windows read-only domain controllers, which overload
 * the high 16-bits of kvno values for krbtgt principals.  Since Windows
 * encodes kvnos as signed 32-bit values, for interoperability it's best if we
 * do the same.
 */
#[c2rust::src_loc = "211:1"]
pub type aux_type_kvno = krb5_kvno;
#[c2rust::src_loc = "212:1"]
pub type aux_type_opt_kvno = aux_type_kvno;
#[c2rust::src_loc = "215:1"]
pub type aux_type_enc_data_1_untagged = krb5_enc_data;
#[c2rust::src_loc = "215:1"]
pub type aux_type_enc_data_1 = aux_type_enc_data_1_untagged;
#[c2rust::src_loc = "45:1"]
pub type aux_type_int32 = int32_t;
#[c2rust::src_loc = "214:1"]
pub type aux_type_enc_data_0_untagged = krb5_enc_data;
#[c2rust::src_loc = "214:1"]
pub type aux_type_enc_data_0 = aux_type_enc_data_0_untagged;
#[c2rust::src_loc = "368:1"]
pub type aux_type_ticket_3_untagged = krb5_ticket;
#[c2rust::src_loc = "368:1"]
pub type aux_type_ticket_3 = aux_type_ticket_3_untagged;
#[c2rust::src_loc = "78:1"]
pub type aux_counttype_generalstring = libc::c_uint;
#[c2rust::src_loc = "78:1"]
pub type aux_ptrtype_generalstring = *mut libc::c_char;
#[c2rust::src_loc = "86:1"]
pub type aux_type_gstring_data_ptr = *mut aux_type_gstring_data;
#[c2rust::src_loc = "84:1"]
pub type aux_type_gstring_data = krb5_data;
#[c2rust::src_loc = "87:1"]
pub type aux_counttype_cseqof_gstring_data = int32_t;
#[c2rust::src_loc = "87:1"]
pub type aux_ptrtype_cseqof_gstring_data = aux_type_gstring_data_ptr;
#[c2rust::src_loc = "109:1"]
pub type aux_type_princname_1 = aux_type_princname_1_untagged;
#[c2rust::src_loc = "109:1"]
pub type aux_type_princname_1_untagged = krb5_principal_data;
#[c2rust::src_loc = "108:1"]
pub type aux_type_princname_0_untagged = krb5_principal_data;
#[c2rust::src_loc = "108:1"]
pub type aux_type_princname_0 = aux_type_princname_0_untagged;
#[c2rust::src_loc = "115:1"]
pub type aux_type_principal = *mut aux_type_principal_data;
#[c2rust::src_loc = "114:1"]
pub type aux_type_principal_data = krb5_principal_data;
#[c2rust::src_loc = "367:1"]
pub type aux_type_ticket_2_untagged = krb5_ticket;
#[c2rust::src_loc = "367:1"]
pub type aux_type_ticket_2 = aux_type_ticket_2_untagged;
#[c2rust::src_loc = "103:1"]
pub type aux_type_realm_of_principal_data = krb5_principal_data;
#[c2rust::src_loc = "105:1"]
pub type aux_type_realm_of_principal = *mut aux_type_realm_of_principal_data;
#[c2rust::src_loc = "366:1"]
pub type aux_type_ticket_1_untagged = krb5_ticket;
#[c2rust::src_loc = "366:1"]
pub type aux_type_ticket_1 = aux_type_ticket_1_untagged;
#[c2rust::src_loc = "365:1"]
pub type aux_type_ticket_0 = aux_type_krb5_version;
#[c2rust::src_loc = "30:1"]
pub type aux_type_krb5_version = libc::c_int;
#[c2rust::src_loc = "75:1"]
pub type aux_type_opt_ostring_data = aux_type_ostring_data;
#[c2rust::src_loc = "1502:1"]
pub type aux_type_pa_pk_as_req_2_untagged = krb5_pa_pk_as_req;
#[c2rust::src_loc = "1502:1"]
pub type aux_type_pa_pk_as_req_2 = aux_type_pa_pk_as_req_2_untagged;
#[c2rust::src_loc = "1482:1"]
pub type aux_type_extprinc_2_untagged = krb5_external_principal_identifier;
#[c2rust::src_loc = "1482:1"]
pub type aux_type_extprinc_2 = aux_type_extprinc_2_untagged;
#[c2rust::src_loc = "1480:1"]
pub type aux_type_extprinc_1_untagged = krb5_external_principal_identifier;
#[c2rust::src_loc = "1480:1"]
pub type aux_type_extprinc_1 = aux_type_extprinc_1_untagged;
#[c2rust::src_loc = "1478:1"]
pub type aux_type_extprinc_0_untagged = krb5_external_principal_identifier;
#[c2rust::src_loc = "1478:1"]
pub type aux_type_extprinc_0 = aux_type_extprinc_0_untagged;
#[c2rust::src_loc = "1493:1"]
pub type aux_type_ptr_seqof_external_principal_identifier
    =
    *mut aux_type_seqof_external_principal_identifier;
#[c2rust::src_loc = "1495:1"]
pub type aux_type_opt_ptr_seqof_external_principal_identifier
    =
    aux_type_ptr_seqof_external_principal_identifier;
#[c2rust::src_loc = "1500:1"]
pub type aux_type_pa_pk_as_req_1_untagged = krb5_pa_pk_as_req;
#[c2rust::src_loc = "1500:1"]
pub type aux_type_pa_pk_as_req_1 = aux_type_pa_pk_as_req_1_untagged;
#[c2rust::src_loc = "1498:1"]
pub type aux_type_pa_pk_as_req_0_untagged = krb5_pa_pk_as_req;
#[c2rust::src_loc = "1498:1"]
pub type aux_type_pa_pk_as_req_0 = aux_type_pa_pk_as_req_0_untagged;
#[c2rust::src_loc = "1536:1"]
pub type aux_type_pa_pk_as_rep_1 = aux_type_ostring_data;
#[c2rust::src_loc = "97:1"]
pub type aux_counttype_object_identifier = libc::c_uint;
#[c2rust::src_loc = "97:1"]
pub type aux_ptrtype_object_identifier = *mut libc::c_char;
#[c2rust::src_loc = "1381:1"]
pub type aux_type_kdf_alg_id_0 = aux_type_oid_data;
#[c2rust::src_loc = "100:1"]
pub type aux_type_oid_data = krb5_data;
#[c2rust::src_loc = "1386:1"]
pub type aux_type_ptr_kdf_alg_id = *mut aux_type_kdf_alg_id;
#[c2rust::src_loc = "1385:1"]
pub type aux_type_kdf_alg_id = krb5_data;
#[c2rust::src_loc = "1389:1"]
pub type aux_type_opt_ptr_kdf_alg_id = aux_type_ptr_kdf_alg_id;
#[c2rust::src_loc = "1513:1"]
pub type aux_type_dh_rep_info_2_untagged = krb5_dh_rep_info;
#[c2rust::src_loc = "1513:1"]
pub type aux_type_dh_rep_info_2 = aux_type_dh_rep_info_2_untagged;
#[c2rust::src_loc = "1512:1"]
pub type aux_type_dh_rep_info_1_untagged = krb5_dh_rep_info;
#[c2rust::src_loc = "1512:1"]
pub type aux_type_dh_rep_info_1 = aux_type_dh_rep_info_1_untagged;
#[c2rust::src_loc = "1510:1"]
pub type aux_type_dh_rep_info_0_untagged = krb5_dh_rep_info;
#[c2rust::src_loc = "1510:1"]
pub type aux_type_dh_rep_info_0 = aux_type_dh_rep_info_0_untagged;
#[c2rust::src_loc = "1535:1"]
pub type aux_type_pa_pk_as_rep_0 = aux_type_dh_rep_info;
#[c2rust::src_loc = "1517:1"]
pub type aux_type_dh_rep_info = krb5_dh_rep_info;
#[c2rust::src_loc = "1540:1"]
pub type aux_counttype_pa_pk_as_rep_choice = krb5_pa_pk_as_rep_selection;
#[c2rust::src_loc = "1540:1"]
pub type aux_ptrtype_pa_pk_as_rep_choice = krb5_pa_pk_as_rep_choices;
#[c2rust::src_loc = "1387:1"]
pub type aux_type_supported_kdfs = aux_type_ptr_kdf_alg_id;
#[c2rust::src_loc = "1388:1"]
pub type aux_type_ptr_supported_kdfs = *mut aux_type_supported_kdfs;
#[c2rust::src_loc = "1390:1"]
pub type aux_type_opt_ptr_supported_kdfs = aux_type_ptr_supported_kdfs;
#[c2rust::src_loc = "1470:1"]
pub type aux_type_auth_pack_4_untagged = krb5_auth_pack;
#[c2rust::src_loc = "1470:1"]
pub type aux_type_auth_pack_4 = aux_type_auth_pack_4_untagged;
#[c2rust::src_loc = "1469:1"]
pub type aux_type_auth_pack_3_untagged = krb5_auth_pack;
#[c2rust::src_loc = "1469:1"]
pub type aux_type_auth_pack_3 = aux_type_auth_pack_3_untagged;
#[c2rust::src_loc = "63:1"]
pub type aux_counttype_der = libc::c_uint;
#[c2rust::src_loc = "63:1"]
pub type aux_ptrtype_der = *mut libc::c_char;
#[c2rust::src_loc = "65:1"]
pub type aux_type_opt_der_data = aux_type_der_data;
#[c2rust::src_loc = "64:1"]
pub type aux_type_der_data = krb5_data;
#[c2rust::src_loc = "1362:1"]
pub type aux_type_algid_1 = krb5_algorithm_identifier;
#[c2rust::src_loc = "1361:1"]
pub type aux_type_algid_0 = krb5_algorithm_identifier;
#[c2rust::src_loc = "1372:1"]
pub type aux_type_opt_ptr_seqof_algorithm_identifier
    =
    aux_type_ptr_seqof_algorithm_identifier;
#[c2rust::src_loc = "1467:1"]
pub type aux_type_auth_pack_2_untagged = krb5_auth_pack;
#[c2rust::src_loc = "1467:1"]
pub type aux_type_auth_pack_2 = aux_type_auth_pack_2_untagged;
#[c2rust::src_loc = "1449:1"]
pub type aux_counttype_s_bitstring = libc::c_uint;
#[c2rust::src_loc = "1449:1"]
pub type aux_ptrtype_s_bitstring = *mut libc::c_char;
#[c2rust::src_loc = "1452:1"]
pub type aux_type_bitstring_data = krb5_data;
#[c2rust::src_loc = "1456:1"]
pub type aux_type_spki_1 = krb5_subject_pk_info;
#[c2rust::src_loc = "1455:1"]
pub type aux_type_spki_0 = krb5_subject_pk_info;
#[c2rust::src_loc = "1461:1"]
pub type aux_type_subject_pk_info_ptr = *mut aux_type_subject_pk_info;
#[c2rust::src_loc = "1460:1"]
pub type aux_type_subject_pk_info = krb5_subject_pk_info;
#[c2rust::src_loc = "1462:1"]
pub type aux_type_opt_subject_pk_info_ptr = aux_type_subject_pk_info_ptr;
#[c2rust::src_loc = "1465:1"]
pub type aux_type_auth_pack_1_untagged = krb5_auth_pack;
#[c2rust::src_loc = "1465:1"]
pub type aux_type_auth_pack_1 = aux_type_auth_pack_1_untagged;
#[c2rust::src_loc = "74:1"]
pub type aux_type_ostring_data_ptr = *mut aux_type_ostring_data;
#[c2rust::src_loc = "76:1"]
pub type aux_type_opt_ostring_data_ptr = aux_type_ostring_data_ptr;
#[c2rust::src_loc = "1440:1"]
pub type aux_type_pk_authenticator_4_untagged = krb5_pk_authenticator;
#[c2rust::src_loc = "1440:1"]
pub type aux_type_pk_authenticator_4 = aux_type_pk_authenticator_4_untagged;
#[c2rust::src_loc = "67:1"]
pub type aux_counttype_octetstring = libc::c_uint;
#[c2rust::src_loc = "67:1"]
pub type aux_ptrtype_octetstring = *mut uint8_t;
/* A krb5_checksum encoded as an OCTET STRING, for PKAuthenticator. */
#[c2rust::src_loc = "1433:1"]
pub type aux_type_ostring_checksum = krb5_checksum;
#[c2rust::src_loc = "1438:1"]
pub type aux_type_pk_authenticator_3_untagged = krb5_pk_authenticator;
#[c2rust::src_loc = "1438:1"]
pub type aux_type_pk_authenticator_3 = aux_type_pk_authenticator_3_untagged;
#[c2rust::src_loc = "1437:1"]
pub type aux_type_pk_authenticator_2_untagged = krb5_pk_authenticator;
#[c2rust::src_loc = "1437:1"]
pub type aux_type_pk_authenticator_2 = aux_type_pk_authenticator_2_untagged;
#[c2rust::src_loc = "185:1"]
pub type aux_type_kerberos_time = krb5_timestamp;
#[c2rust::src_loc = "1436:1"]
pub type aux_type_pk_authenticator_1_untagged = krb5_pk_authenticator;
#[c2rust::src_loc = "1436:1"]
pub type aux_type_pk_authenticator_1 = aux_type_pk_authenticator_1_untagged;
#[c2rust::src_loc = "1435:1"]
pub type aux_type_pk_authenticator_0_untagged = krb5_pk_authenticator;
#[c2rust::src_loc = "1435:1"]
pub type aux_type_pk_authenticator_0 = aux_type_pk_authenticator_0_untagged;
#[c2rust::src_loc = "1447:1"]
pub type aux_type_pk_authenticator = krb5_pk_authenticator;
#[c2rust::src_loc = "1464:1"]
pub type aux_type_auth_pack_0_untagged = krb5_auth_pack;
#[c2rust::src_loc = "1464:1"]
pub type aux_type_auth_pack_0 = aux_type_auth_pack_0_untagged;
#[c2rust::src_loc = "187:1"]
pub type aux_type_opt_kerberos_time = aux_type_kerberos_time;
#[c2rust::src_loc = "1521:1"]
pub type aux_type_dh_key_2_untagged = krb5_kdc_dh_key_info;
#[c2rust::src_loc = "1521:1"]
pub type aux_type_dh_key_2 = aux_type_dh_key_2_untagged;
#[c2rust::src_loc = "1520:1"]
pub type aux_type_dh_key_1_untagged = krb5_kdc_dh_key_info;
#[c2rust::src_loc = "1520:1"]
pub type aux_type_dh_key_1 = aux_type_dh_key_1_untagged;
#[c2rust::src_loc = "1519:1"]
pub type aux_type_dh_key_0_untagged = krb5_kdc_dh_key_info;
#[c2rust::src_loc = "1519:1"]
pub type aux_type_dh_key_0 = aux_type_dh_key_0_untagged;
#[c2rust::src_loc = "305:1"]
pub type aux_type_checksum_1 = aux_type_checksum_1_untagged;
#[c2rust::src_loc = "305:1"]
pub type aux_type_checksum_1_untagged = krb5_checksum;
#[c2rust::src_loc = "304:1"]
pub type aux_type_checksum_0_untagged = krb5_checksum;
#[c2rust::src_loc = "304:1"]
pub type aux_type_checksum_0 = aux_type_checksum_0_untagged;
#[c2rust::src_loc = "1529:1"]
pub type aux_type_reply_key_pack_1_untagged = krb5_reply_key_pack;
#[c2rust::src_loc = "1529:1"]
pub type aux_type_reply_key_pack_1 = aux_type_reply_key_pack_1_untagged;
#[c2rust::src_loc = "296:1"]
pub type aux_type_keyblock_1 = aux_type_keyblock_1_untagged;
#[c2rust::src_loc = "296:1"]
pub type aux_type_keyblock_1_untagged = krb5_keyblock;
#[c2rust::src_loc = "295:1"]
pub type aux_type_keyblock_0_untagged = krb5_keyblock;
#[c2rust::src_loc = "295:1"]
pub type aux_type_keyblock_0 = aux_type_keyblock_0_untagged;
#[c2rust::src_loc = "1528:1"]
pub type aux_type_reply_key_pack_0_untagged = krb5_reply_key_pack;
#[c2rust::src_loc = "1528:1"]
pub type aux_type_reply_key_pack_0 = aux_type_reply_key_pack_0_untagged;
#[c2rust::src_loc = "1416:1"]
pub type aux_type_sp80056a_other_info = krb5_sp80056a_other_info;
#[c2rust::src_loc = "1411:1"]
pub type aux_type_oinfo_2_untagged = krb5_sp80056a_other_info;
#[c2rust::src_loc = "1411:1"]
pub type aux_type_oinfo_2 = aux_type_oinfo_2_untagged;
#[c2rust::src_loc = "1394:1"]
pub type aux_type_pkinit_princ_1 = aux_type_principal_data;
#[c2rust::src_loc = "1393:1"]
pub type aux_type_pkinit_princ_0 = aux_type_realm_of_principal_data;
#[c2rust::src_loc = "1400:1"]
pub type aux_type_pkinit_krb5_principal_name
    =
    *mut aux_type_pkinit_krb5_principal_name_data;
#[c2rust::src_loc = "1403:1"]
pub type aux_type_pkinit_krb5_principal_name_wrapped
    =
    aux_type_pkinit_krb5_principal_name;
#[c2rust::src_loc = "1409:1"]
pub type aux_type_oinfo_1_untagged = krb5_sp80056a_other_info;
#[c2rust::src_loc = "1409:1"]
pub type aux_type_oinfo_1 = aux_type_oinfo_1_untagged;
#[c2rust::src_loc = "1407:1"]
pub type aux_type_oinfo_0_untagged = krb5_sp80056a_other_info;
#[c2rust::src_loc = "1407:1"]
pub type aux_type_oinfo_0 = aux_type_oinfo_0_untagged;
#[c2rust::src_loc = "1405:1"]
pub type aux_type_oinfo_notag = krb5_sp80056a_other_info;
#[c2rust::src_loc = "1426:1"]
pub type aux_type_pkinit_supp_pub_info = krb5_pkinit_supp_pub_info;
#[c2rust::src_loc = "1422:1"]
pub type aux_type_supp_pub_2_untagged = krb5_pkinit_supp_pub_info;
#[c2rust::src_loc = "1422:1"]
pub type aux_type_supp_pub_2 = aux_type_supp_pub_2_untagged;
#[c2rust::src_loc = "1421:1"]
pub type aux_type_supp_pub_1_untagged = krb5_pkinit_supp_pub_info;
#[c2rust::src_loc = "1421:1"]
pub type aux_type_supp_pub_1 = aux_type_supp_pub_1_untagged;
#[c2rust::src_loc = "1420:1"]
pub type aux_type_supp_pub_0_untagged = krb5_pkinit_supp_pub_info;
#[c2rust::src_loc = "1420:1"]
pub type aux_type_supp_pub_0 = aux_type_supp_pub_0_untagged;
#[c2rust::src_loc = "269:1"]
pub type aux_type_authdata_1 = aux_type_authdata_1_untagged;
#[c2rust::src_loc = "269:1"]
pub type aux_type_authdata_1_untagged = krb5_authdata;
#[c2rust::src_loc = "268:1"]
pub type aux_type_authdata_0_untagged = krb5_authdata;
#[c2rust::src_loc = "268:1"]
pub type aux_type_authdata_0 = aux_type_authdata_0_untagged;
#[c2rust::src_loc = "277:1"]
pub type aux_type_opt_auth_data_ptr = aux_type_auth_data_ptr;
#[c2rust::src_loc = "699:1"]
pub type aux_type_authenticator_8_untagged = krb5_authenticator;
#[c2rust::src_loc = "699:1"]
pub type aux_type_authenticator_8 = aux_type_authenticator_8_untagged;
#[c2rust::src_loc = "153:1"]
pub type aux_type_seqno = uint32_t;
#[c2rust::src_loc = "154:1"]
pub type aux_type_opt_seqno = aux_type_seqno;
#[c2rust::src_loc = "698:1"]
pub type aux_type_authenticator_7_untagged = krb5_authenticator;
#[c2rust::src_loc = "698:1"]
pub type aux_type_authenticator_7 = aux_type_authenticator_7_untagged;
#[c2rust::src_loc = "301:1"]
pub type aux_type_ptr_encryption_key = *mut aux_type_encryption_key;
#[c2rust::src_loc = "302:1"]
pub type aux_type_opt_ptr_encryption_key = aux_type_ptr_encryption_key;
#[c2rust::src_loc = "696:1"]
pub type aux_type_authenticator_6_untagged = krb5_authenticator;
#[c2rust::src_loc = "696:1"]
pub type aux_type_authenticator_6 = aux_type_authenticator_6_untagged;
#[c2rust::src_loc = "695:1"]
pub type aux_type_authenticator_5_untagged = krb5_authenticator;
#[c2rust::src_loc = "695:1"]
pub type aux_type_authenticator_5 = aux_type_authenticator_5_untagged;
#[c2rust::src_loc = "694:1"]
pub type aux_type_authenticator_4_untagged = krb5_authenticator;
#[c2rust::src_loc = "694:1"]
pub type aux_type_authenticator_4 = aux_type_authenticator_4_untagged;
#[c2rust::src_loc = "310:1"]
pub type aux_type_checksum_ptr = *mut aux_type_checksum;
#[c2rust::src_loc = "313:1"]
pub type aux_type_opt_checksum_ptr = aux_type_checksum_ptr;
#[c2rust::src_loc = "693:1"]
pub type aux_type_authenticator_3_untagged = krb5_authenticator;
#[c2rust::src_loc = "693:1"]
pub type aux_type_authenticator_3 = aux_type_authenticator_3_untagged;
#[c2rust::src_loc = "692:1"]
pub type aux_type_authenticator_2_untagged = krb5_authenticator;
#[c2rust::src_loc = "692:1"]
pub type aux_type_authenticator_2 = aux_type_authenticator_2_untagged;
#[c2rust::src_loc = "691:1"]
pub type aux_type_authenticator_1_untagged = krb5_authenticator;
#[c2rust::src_loc = "691:1"]
pub type aux_type_authenticator_1 = aux_type_authenticator_1_untagged;
#[c2rust::src_loc = "690:1"]
pub type aux_type_authenticator_0 = aux_type_krb5_version;
#[c2rust::src_loc = "722:1"]
pub type aux_type_enc_tkt_10_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "722:1"]
pub type aux_type_enc_tkt_10 = aux_type_enc_tkt_10_untagged;
#[c2rust::src_loc = "190:1"]
pub type aux_type_address_1 = aux_type_address_1_untagged;
#[c2rust::src_loc = "190:1"]
pub type aux_type_address_1_untagged = krb5_address;
#[c2rust::src_loc = "189:1"]
pub type aux_type_address_0_untagged = krb5_address;
#[c2rust::src_loc = "189:1"]
pub type aux_type_address_0 = aux_type_address_0_untagged;
#[c2rust::src_loc = "200:1"]
pub type aux_type_opt_ptr_seqof_host_addresses
    =
    aux_type_ptr_seqof_host_addresses;
#[c2rust::src_loc = "720:1"]
pub type aux_type_enc_tkt_9_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "720:1"]
pub type aux_type_enc_tkt_9 = aux_type_enc_tkt_9_untagged;
#[c2rust::src_loc = "719:1"]
pub type aux_type_enc_tkt_8_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "719:1"]
pub type aux_type_enc_tkt_8 = aux_type_enc_tkt_8_untagged;
#[c2rust::src_loc = "718:1"]
pub type aux_type_enc_tkt_7_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "718:1"]
pub type aux_type_enc_tkt_7 = aux_type_enc_tkt_7_untagged;
#[c2rust::src_loc = "717:1"]
pub type aux_type_enc_tkt_6_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "717:1"]
pub type aux_type_enc_tkt_6 = aux_type_enc_tkt_6_untagged;
#[c2rust::src_loc = "716:1"]
pub type aux_type_enc_tkt_5_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "716:1"]
pub type aux_type_enc_tkt_5 = aux_type_enc_tkt_5_untagged;
#[c2rust::src_loc = "553:1"]
pub type aux_type_transited_1_untagged = krb5_transited;
#[c2rust::src_loc = "553:1"]
pub type aux_type_transited_1 = aux_type_transited_1_untagged;
#[c2rust::src_loc = "52:1"]
pub type aux_type_octet = krb5_octet;
#[c2rust::src_loc = "552:1"]
pub type aux_type_transited_0_untagged = krb5_transited;
#[c2rust::src_loc = "552:1"]
pub type aux_type_transited_0 = aux_type_transited_0_untagged;
#[c2rust::src_loc = "557:1"]
pub type aux_type_transited = krb5_transited;
#[c2rust::src_loc = "715:1"]
pub type aux_type_enc_tkt_4_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "715:1"]
pub type aux_type_enc_tkt_4 = aux_type_enc_tkt_4_untagged;
#[c2rust::src_loc = "714:1"]
pub type aux_type_enc_tkt_3_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "714:1"]
pub type aux_type_enc_tkt_3 = aux_type_enc_tkt_3_untagged;
#[c2rust::src_loc = "713:1"]
pub type aux_type_enc_tkt_2_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "713:1"]
pub type aux_type_enc_tkt_2 = aux_type_enc_tkt_2_untagged;
#[c2rust::src_loc = "712:1"]
pub type aux_type_enc_tkt_1_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "712:1"]
pub type aux_type_enc_tkt_1 = aux_type_enc_tkt_1_untagged;
#[c2rust::src_loc = "264:1"]
pub type aux_type_krb5_flags = krb5_flags;
#[c2rust::src_loc = "711:1"]
pub type aux_type_enc_tkt_0_untagged = krb5_enc_tkt_part;
#[c2rust::src_loc = "711:1"]
pub type aux_type_enc_tkt_0 = aux_type_enc_tkt_0_untagged;
#[c2rust::src_loc = "734:1"]
pub type aux_type_enc_tgs_rep_part = aux_type_enc_kdc_rep_part;
#[c2rust::src_loc = "441:1"]
pub type aux_type_enc_kdc_rep_part = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "378:1"]
pub type aux_type_pa_data_2 = aux_type_pa_data_2_untagged;
#[c2rust::src_loc = "378:1"]
pub type aux_type_pa_data_2_untagged = krb5_pa_data;
#[c2rust::src_loc = "377:1"]
pub type aux_type_pa_data_1_untagged = krb5_pa_data;
#[c2rust::src_loc = "377:1"]
pub type aux_type_pa_data_1 = aux_type_pa_data_1_untagged;
#[c2rust::src_loc = "387:1"]
pub type aux_type_opt_ptr_seqof_pa_data = aux_type_ptr_seqof_pa_data;
#[c2rust::src_loc = "432:1"]
pub type aux_type_enc_kdc_rep_12_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "432:1"]
pub type aux_type_enc_kdc_rep_12 = aux_type_enc_kdc_rep_12_untagged;
#[c2rust::src_loc = "430:1"]
pub type aux_type_enc_kdc_rep_11_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "430:1"]
pub type aux_type_enc_kdc_rep_11 = aux_type_enc_kdc_rep_11_untagged;
#[c2rust::src_loc = "429:1"]
pub type aux_type_enc_kdc_rep_10_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "429:1"]
pub type aux_type_enc_kdc_rep_10 = aux_type_enc_kdc_rep_10_untagged;
#[c2rust::src_loc = "428:1"]
pub type aux_type_enc_kdc_rep_9_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "428:1"]
pub type aux_type_enc_kdc_rep_9 = aux_type_enc_kdc_rep_9_untagged;
#[c2rust::src_loc = "425:1"]
pub type aux_type_enc_kdc_rep_8_def_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "425:1"]
pub type aux_type_enc_kdc_rep_8_def = aux_type_enc_kdc_rep_8_def_untagged;
#[c2rust::src_loc = "427:1"]
pub type aux_type_enc_kdc_rep_8 = aux_type_enc_kdc_rep_8_def;
#[c2rust::src_loc = "423:1"]
pub type aux_type_enc_kdc_rep_7_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "423:1"]
pub type aux_type_enc_kdc_rep_7 = aux_type_enc_kdc_rep_7_untagged;
#[c2rust::src_loc = "419:1"]
pub type aux_type_enc_kdc_rep_6_def_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "419:1"]
pub type aux_type_enc_kdc_rep_6_def = aux_type_enc_kdc_rep_6_def_untagged;
#[c2rust::src_loc = "421:1"]
pub type aux_type_enc_kdc_rep_6 = aux_type_enc_kdc_rep_6_def;
#[c2rust::src_loc = "417:1"]
pub type aux_type_enc_kdc_rep_5_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "417:1"]
pub type aux_type_enc_kdc_rep_5 = aux_type_enc_kdc_rep_5_untagged;
#[c2rust::src_loc = "416:1"]
pub type aux_type_enc_kdc_rep_4_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "416:1"]
pub type aux_type_enc_kdc_rep_4 = aux_type_enc_kdc_rep_4_untagged;
#[c2rust::src_loc = "415:1"]
pub type aux_type_enc_kdc_rep_3_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "415:1"]
pub type aux_type_enc_kdc_rep_3 = aux_type_enc_kdc_rep_3_untagged;
#[c2rust::src_loc = "414:1"]
pub type aux_type_enc_kdc_rep_2_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "414:1"]
pub type aux_type_enc_kdc_rep_2 = aux_type_enc_kdc_rep_2_untagged;
#[c2rust::src_loc = "355:1"]
pub type aux_type_last_req_1_untagged = krb5_last_req_entry;
#[c2rust::src_loc = "355:1"]
pub type aux_type_last_req_1 = aux_type_last_req_1_untagged;
#[c2rust::src_loc = "351:1"]
pub type aux_type_last_req_type = int32_t;
#[c2rust::src_loc = "354:1"]
pub type aux_type_last_req_0_untagged = krb5_last_req_entry;
#[c2rust::src_loc = "354:1"]
pub type aux_type_last_req_0 = aux_type_last_req_0_untagged;
#[c2rust::src_loc = "361:1"]
pub type aux_type_last_req_ent_ptr = *mut aux_type_last_req_ent;
#[c2rust::src_loc = "359:1"]
pub type aux_type_last_req_ent = krb5_last_req_entry;
#[c2rust::src_loc = "362:1"]
pub type aux_type_last_req = aux_type_last_req_ent_ptr;
#[c2rust::src_loc = "363:1"]
pub type aux_type_last_req_ptr = *mut aux_type_last_req;
#[c2rust::src_loc = "413:1"]
pub type aux_type_enc_kdc_rep_1_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "413:1"]
pub type aux_type_enc_kdc_rep_1 = aux_type_enc_kdc_rep_1_untagged;
#[c2rust::src_loc = "412:1"]
pub type aux_type_enc_kdc_rep_0_untagged = krb5_enc_kdc_rep_part;
#[c2rust::src_loc = "412:1"]
pub type aux_type_enc_kdc_rep_0 = aux_type_enc_kdc_rep_0_untagged;
#[c2rust::src_loc = "742:1"]
pub type aux_type_kdc_rep_6_untagged = krb5_kdc_rep;
#[c2rust::src_loc = "742:1"]
pub type aux_type_kdc_rep_6 = aux_type_kdc_rep_6_untagged;
#[c2rust::src_loc = "741:1"]
pub type aux_type_kdc_rep_5_untagged = krb5_kdc_rep;
#[c2rust::src_loc = "741:1"]
pub type aux_type_kdc_rep_5 = aux_type_kdc_rep_5_untagged;
#[c2rust::src_loc = "740:1"]
pub type aux_type_kdc_rep_4_untagged = krb5_kdc_rep;
#[c2rust::src_loc = "740:1"]
pub type aux_type_kdc_rep_4 = aux_type_kdc_rep_4_untagged;
#[c2rust::src_loc = "739:1"]
pub type aux_type_kdc_rep_3_untagged = krb5_kdc_rep;
#[c2rust::src_loc = "739:1"]
pub type aux_type_kdc_rep_3 = aux_type_kdc_rep_3_untagged;
#[c2rust::src_loc = "738:1"]
pub type aux_type_kdc_rep_2_untagged = krb5_kdc_rep;
#[c2rust::src_loc = "738:1"]
pub type aux_type_kdc_rep_2 = aux_type_kdc_rep_2_untagged;
#[c2rust::src_loc = "51:1"]
pub type aux_type_uint = libc::c_uint;
#[c2rust::src_loc = "737:1"]
pub type aux_type_kdc_rep_1_untagged = krb5_kdc_rep;
#[c2rust::src_loc = "737:1"]
pub type aux_type_kdc_rep_1 = aux_type_kdc_rep_1_untagged;
#[c2rust::src_loc = "736:1"]
pub type aux_type_kdc_rep_0 = aux_type_krb5_version;
#[c2rust::src_loc = "757:1"]
pub type aux_type_ap_req_4_untagged = krb5_ap_req;
#[c2rust::src_loc = "757:1"]
pub type aux_type_ap_req_4 = aux_type_ap_req_4_untagged;
#[c2rust::src_loc = "756:1"]
pub type aux_type_ap_req_3_untagged = krb5_ap_req;
#[c2rust::src_loc = "756:1"]
pub type aux_type_ap_req_3 = aux_type_ap_req_3_untagged;
#[c2rust::src_loc = "755:1"]
pub type aux_type_ap_req_2_untagged = krb5_ap_req;
#[c2rust::src_loc = "755:1"]
pub type aux_type_ap_req_2 = aux_type_ap_req_2_untagged;
#[c2rust::src_loc = "754:1"]
pub type aux_type_ap_req_1 = aux_type_ap_req_msg_type;
#[c2rust::src_loc = "752:1"]
pub type aux_type_ap_req_msg_type = libc::c_int;
#[c2rust::src_loc = "753:1"]
pub type aux_type_ap_req_0 = aux_type_krb5_version;
#[c2rust::src_loc = "768:1"]
pub type aux_type_ap_rep_2_untagged = krb5_ap_rep;
#[c2rust::src_loc = "768:1"]
pub type aux_type_ap_rep_2 = aux_type_ap_rep_2_untagged;
#[c2rust::src_loc = "767:1"]
pub type aux_type_ap_rep_1 = aux_type_ap_rep_msg_type;
#[c2rust::src_loc = "765:1"]
pub type aux_type_ap_rep_msg_type = libc::c_int;
#[c2rust::src_loc = "766:1"]
pub type aux_type_ap_rep_0 = aux_type_krb5_version;
#[c2rust::src_loc = "779:1"]
pub type aux_type_ap_rep_enc_part_3_untagged = krb5_ap_rep_enc_part;
#[c2rust::src_loc = "779:1"]
pub type aux_type_ap_rep_enc_part_3 = aux_type_ap_rep_enc_part_3_untagged;
#[c2rust::src_loc = "777:1"]
pub type aux_type_ap_rep_enc_part_2_untagged = krb5_ap_rep_enc_part;
#[c2rust::src_loc = "777:1"]
pub type aux_type_ap_rep_enc_part_2 = aux_type_ap_rep_enc_part_2_untagged;
#[c2rust::src_loc = "776:1"]
pub type aux_type_ap_rep_enc_part_1_untagged = krb5_ap_rep_enc_part;
#[c2rust::src_loc = "776:1"]
pub type aux_type_ap_rep_enc_part_1 = aux_type_ap_rep_enc_part_1_untagged;
#[c2rust::src_loc = "775:1"]
pub type aux_type_ap_rep_enc_part_0_untagged = krb5_ap_rep_enc_part;
#[c2rust::src_loc = "775:1"]
pub type aux_type_ap_rep_enc_part_0 = aux_type_ap_rep_enc_part_0_untagged;
#[c2rust::src_loc = "817:1"]
pub type aux_type_as_req_encode = aux_type_untagged_as_req;
#[c2rust::src_loc = "816:1"]
pub type aux_type_untagged_as_req = krb5_kdc_req;
#[derive(Copy, Clone)]
#[repr(C)]
#[c2rust::src_loc = "449:16"]
pub struct kdc_req_hack {
    pub v: krb5_kdc_req,
    pub server_realm: krb5_data,
}
#[c2rust::src_loc = "392:1"]
pub type aux_type_opt_ptr_seqof_ticket = aux_type_ptr_seqof_ticket;
#[c2rust::src_loc = "466:1"]
pub type aux_type_req_body_11_untagged = kdc_req_hack;
#[c2rust::src_loc = "466:1"]
pub type aux_type_req_body_11 = aux_type_req_body_11_untagged;
#[c2rust::src_loc = "227:1"]
pub type aux_type_opt_encrypted_data = aux_type_encrypted_data;
#[c2rust::src_loc = "464:1"]
pub type aux_type_req_body_10_untagged = kdc_req_hack;
#[c2rust::src_loc = "464:1"]
pub type aux_type_req_body_10 = aux_type_req_body_10_untagged;
#[c2rust::src_loc = "462:1"]
pub type aux_type_req_body_9_untagged = kdc_req_hack;
#[c2rust::src_loc = "462:1"]
pub type aux_type_req_body_9 = aux_type_req_body_9_untagged;
#[c2rust::src_loc = "46:1"]
pub type aux_type_int32_ptr = *mut aux_type_int32;
#[c2rust::src_loc = "47:1"]
pub type aux_counttype_cseqof_int32 = int32_t;
#[c2rust::src_loc = "47:1"]
pub type aux_ptrtype_cseqof_int32 = aux_type_int32_ptr;
#[c2rust::src_loc = "461:1"]
pub type aux_type_req_body_8 = aux_type_req_body_8_untagged;
#[c2rust::src_loc = "461:1"]
pub type aux_type_req_body_8_untagged = kdc_req_hack;
#[c2rust::src_loc = "460:1"]
pub type aux_type_req_body_7_untagged = kdc_req_hack;
#[c2rust::src_loc = "460:1"]
pub type aux_type_req_body_7 = aux_type_req_body_7_untagged;
#[c2rust::src_loc = "459:1"]
pub type aux_type_req_body_6_untagged = kdc_req_hack;
#[c2rust::src_loc = "459:1"]
pub type aux_type_req_body_6 = aux_type_req_body_6_untagged;
#[c2rust::src_loc = "458:1"]
pub type aux_type_req_body_5_untagged = kdc_req_hack;
#[c2rust::src_loc = "458:1"]
pub type aux_type_req_body_5 = aux_type_req_body_5_untagged;
#[c2rust::src_loc = "457:1"]
pub type aux_type_req_body_4_untagged = kdc_req_hack;
#[c2rust::src_loc = "457:1"]
pub type aux_type_req_body_4 = aux_type_req_body_4_untagged;
#[c2rust::src_loc = "116:1"]
pub type aux_type_opt_principal = aux_type_principal;
#[c2rust::src_loc = "456:1"]
pub type aux_type_req_body_3_untagged = kdc_req_hack;
#[c2rust::src_loc = "456:1"]
pub type aux_type_req_body_3 = aux_type_req_body_3_untagged;
#[c2rust::src_loc = "455:1"]
pub type aux_type_req_body_2_untagged = kdc_req_hack;
#[c2rust::src_loc = "455:1"]
pub type aux_type_req_body_2 = aux_type_req_body_2_untagged;
#[c2rust::src_loc = "454:1"]
pub type aux_type_req_body_1_untagged = kdc_req_hack;
#[c2rust::src_loc = "454:1"]
pub type aux_type_req_body_1 = aux_type_req_body_1_untagged;
#[c2rust::src_loc = "453:1"]
pub type aux_type_req_body_0_untagged = kdc_req_hack;
#[c2rust::src_loc = "453:1"]
pub type aux_type_req_body_0 = aux_type_req_body_0_untagged;
#[c2rust::src_loc = "793:1"]
pub type aux_type_kdc_req_4 = aux_type_kdc_req_body;
#[c2rust::src_loc = "792:1"]
pub type aux_type_kdc_req_3_untagged = krb5_kdc_req;
#[c2rust::src_loc = "792:1"]
pub type aux_type_kdc_req_3 = aux_type_kdc_req_3_untagged;
#[c2rust::src_loc = "805:1"]
pub type aux_type_as_req_2 = aux_type_as_req_msg_type;
/* This is only needed because libkrb5 doesn't set msg_type when encoding
 * krb5_kdc_reqs.  If we fix that, we can use the above types for encoding. */
#[c2rust::src_loc = "804:1"]
pub type aux_type_as_req_msg_type = libc::c_int;
/* First context tag is 1.  Fourth field is the encoding of the krb5_kdc_req
 * structure as a KDC-REQ-BODY. */
#[c2rust::src_loc = "790:1"]
pub type aux_type_kdc_req_1 = aux_type_krb5_version;
#[c2rust::src_loc = "819:1"]
pub type aux_type_tgs_req_encode = aux_type_untagged_tgs_req;
#[c2rust::src_loc = "818:1"]
pub type aux_type_untagged_tgs_req = krb5_kdc_req;
#[c2rust::src_loc = "807:1"]
pub type aux_type_tgs_req_2 = aux_type_tgs_req_msg_type;
#[c2rust::src_loc = "806:1"]
pub type aux_type_tgs_req_msg_type = libc::c_int;
#[c2rust::src_loc = "825:1"]
pub type aux_type_safe_3_untagged = krb5_safe;
#[c2rust::src_loc = "825:1"]
pub type aux_type_safe_3 = aux_type_safe_3_untagged;
#[c2rust::src_loc = "196:1"]
pub type aux_type_opt_address_ptr = aux_type_address_ptr;
#[c2rust::src_loc = "571:1"]
pub type aux_type_safe_body_5_untagged = krb5_safe;
#[c2rust::src_loc = "571:1"]
pub type aux_type_safe_body_5 = aux_type_safe_body_5_untagged;
#[c2rust::src_loc = "570:1"]
pub type aux_type_safe_body_4_untagged = krb5_safe;
#[c2rust::src_loc = "570:1"]
pub type aux_type_safe_body_4 = aux_type_safe_body_4_untagged;
#[c2rust::src_loc = "569:1"]
pub type aux_type_safe_body_3_untagged = krb5_safe;
#[c2rust::src_loc = "569:1"]
pub type aux_type_safe_body_3 = aux_type_safe_body_3_untagged;
#[c2rust::src_loc = "567:1"]
pub type aux_type_safe_body_2_def_untagged = krb5_safe;
#[c2rust::src_loc = "567:1"]
pub type aux_type_safe_body_2_def = aux_type_safe_body_2_def_untagged;
#[c2rust::src_loc = "568:1"]
pub type aux_type_safe_body_2 = aux_type_safe_body_2_def;
#[c2rust::src_loc = "566:1"]
pub type aux_type_safe_body_1_untagged = krb5_safe;
#[c2rust::src_loc = "566:1"]
pub type aux_type_safe_body_1 = aux_type_safe_body_1_untagged;
#[c2rust::src_loc = "565:1"]
pub type aux_type_safe_body_0_untagged = krb5_safe;
#[c2rust::src_loc = "565:1"]
pub type aux_type_safe_body_0 = aux_type_safe_body_0_untagged;
#[c2rust::src_loc = "824:1"]
pub type aux_type_safe_2 = aux_type_safe_body;
#[c2rust::src_loc = "576:1"]
pub type aux_type_safe_body = krb5_safe;
#[c2rust::src_loc = "823:1"]
pub type aux_type_safe_1 = aux_type_safe_msg_type;
#[c2rust::src_loc = "821:1"]
pub type aux_type_safe_msg_type = libc::c_int;
#[c2rust::src_loc = "822:1"]
pub type aux_type_safe_0 = aux_type_krb5_version;
#[c2rust::src_loc = "847:1"]
pub type aux_type_safe_with_body = aux_type_untagged_safe_with_body;
#[c2rust::src_loc = "845:1"]
pub type aux_type_untagged_safe_with_body = krb5_safe_with_body;
#[c2rust::src_loc = "835:1"]
pub type aux_type_safe_checksum_only = krb5_safe;
#[c2rust::src_loc = "836:1"]
pub type aux_type_safe_checksum_only_ptr = *mut aux_type_safe_checksum_only;
#[c2rust::src_loc = "839:1"]
pub type aux_type_safe_with_body_3_untagged = krb5_safe_with_body;
#[c2rust::src_loc = "839:1"]
pub type aux_type_safe_with_body_3 = aux_type_safe_with_body_3_untagged;
#[c2rust::src_loc = "834:1"]
pub type aux_type_saved_safe_body_ptr = *mut aux_type_der_data;
#[c2rust::src_loc = "837:1"]
pub type aux_type_safe_with_body_2_untagged = krb5_safe_with_body;
#[c2rust::src_loc = "837:1"]
pub type aux_type_safe_with_body_2 = aux_type_safe_with_body_2_untagged;
#[c2rust::src_loc = "853:1"]
pub type aux_type_priv_3_untagged = krb5_priv;
#[c2rust::src_loc = "853:1"]
pub type aux_type_priv_3 = aux_type_priv_3_untagged;
#[c2rust::src_loc = "852:1"]
pub type aux_type_priv_1 = aux_type_priv_msg_type;
#[c2rust::src_loc = "850:1"]
pub type aux_type_priv_msg_type = libc::c_int;
#[c2rust::src_loc = "851:1"]
pub type aux_type_priv_0 = aux_type_krb5_version;
#[c2rust::src_loc = "873:1"]
pub type aux_type_priv_enc_part_5_untagged = krb5_priv_enc_part;
#[c2rust::src_loc = "873:1"]
pub type aux_type_priv_enc_part_5 = aux_type_priv_enc_part_5_untagged;
#[c2rust::src_loc = "872:1"]
pub type aux_type_priv_enc_part_4_untagged = krb5_priv_enc_part;
#[c2rust::src_loc = "872:1"]
pub type aux_type_priv_enc_part_4 = aux_type_priv_enc_part_4_untagged;
#[c2rust::src_loc = "871:1"]
pub type aux_type_priv_enc_part_3_untagged = krb5_priv_enc_part;
#[c2rust::src_loc = "871:1"]
pub type aux_type_priv_enc_part_3 = aux_type_priv_enc_part_3_untagged;
#[c2rust::src_loc = "868:1"]
pub type aux_type_priv_enc_part_2_def_untagged = krb5_priv_enc_part;
#[c2rust::src_loc = "868:1"]
pub type aux_type_priv_enc_part_2_def = aux_type_priv_enc_part_2_def_untagged;
#[c2rust::src_loc = "869:1"]
pub type aux_type_priv_enc_part_2 = aux_type_priv_enc_part_2_def;
#[c2rust::src_loc = "867:1"]
pub type aux_type_priv_enc_part_1_untagged = krb5_priv_enc_part;
#[c2rust::src_loc = "867:1"]
pub type aux_type_priv_enc_part_1 = aux_type_priv_enc_part_1_untagged;
#[c2rust::src_loc = "866:1"]
pub type aux_type_priv_enc_part_0_untagged = krb5_priv_enc_part;
#[c2rust::src_loc = "866:1"]
pub type aux_type_priv_enc_part_0 = aux_type_priv_enc_part_0_untagged;
#[c2rust::src_loc = "886:1"]
pub type aux_type_cred_3_untagged = krb5_cred;
#[c2rust::src_loc = "886:1"]
pub type aux_type_cred_3 = aux_type_cred_3_untagged;
#[c2rust::src_loc = "885:1"]
pub type aux_type_cred_2_untagged = krb5_cred;
#[c2rust::src_loc = "885:1"]
pub type aux_type_cred_2 = aux_type_cred_2_untagged;
#[c2rust::src_loc = "884:1"]
pub type aux_type_cred_1 = aux_type_cred_msg_type;
#[c2rust::src_loc = "882:1"]
pub type aux_type_cred_msg_type = libc::c_int;
#[c2rust::src_loc = "883:1"]
pub type aux_type_cred_0 = aux_type_krb5_version;
#[c2rust::src_loc = "907:1"]
pub type aux_type_enc_cred_part_5_untagged = krb5_cred_enc_part;
#[c2rust::src_loc = "907:1"]
pub type aux_type_enc_cred_part_5 = aux_type_enc_cred_part_5_untagged;
#[c2rust::src_loc = "906:1"]
pub type aux_type_enc_cred_part_4_untagged = krb5_cred_enc_part;
#[c2rust::src_loc = "906:1"]
pub type aux_type_enc_cred_part_4 = aux_type_enc_cred_part_4_untagged;
#[c2rust::src_loc = "903:1"]
pub type aux_type_enc_cred_part_3_def_untagged = krb5_cred_enc_part;
#[c2rust::src_loc = "903:1"]
pub type aux_type_enc_cred_part_3_def = aux_type_enc_cred_part_3_def_untagged;
#[c2rust::src_loc = "904:1"]
pub type aux_type_enc_cred_part_3 = aux_type_enc_cred_part_3_def;
#[c2rust::src_loc = "902:1"]
pub type aux_type_enc_cred_part_2_untagged = krb5_cred_enc_part;
#[c2rust::src_loc = "902:1"]
pub type aux_type_enc_cred_part_2 = aux_type_enc_cred_part_2_untagged;
#[c2rust::src_loc = "48:1"]
pub type aux_type_opt_int32 = aux_type_int32;
#[c2rust::src_loc = "901:1"]
pub type aux_type_enc_cred_part_1_untagged = krb5_cred_enc_part;
#[c2rust::src_loc = "901:1"]
pub type aux_type_enc_cred_part_1 = aux_type_enc_cred_part_1_untagged;
#[c2rust::src_loc = "588:1"]
pub type aux_type_cred_info_10_untagged = krb5_cred_info;
#[c2rust::src_loc = "588:1"]
pub type aux_type_cred_info_10 = aux_type_cred_info_10_untagged;
#[c2rust::src_loc = "587:1"]
pub type aux_type_cred_info_9_untagged = krb5_cred_info;
#[c2rust::src_loc = "587:1"]
pub type aux_type_cred_info_9 = aux_type_cred_info_9_untagged;
#[c2rust::src_loc = "106:1"]
pub type aux_type_opt_realm_of_principal = aux_type_realm_of_principal;
#[c2rust::src_loc = "586:1"]
pub type aux_type_cred_info_8_untagged = krb5_cred_info;
#[c2rust::src_loc = "586:1"]
pub type aux_type_cred_info_8 = aux_type_cred_info_8_untagged;
#[c2rust::src_loc = "585:1"]
pub type aux_type_cred_info_7_untagged = krb5_cred_info;
#[c2rust::src_loc = "585:1"]
pub type aux_type_cred_info_7 = aux_type_cred_info_7_untagged;
#[c2rust::src_loc = "584:1"]
pub type aux_type_cred_info_6_untagged = krb5_cred_info;
#[c2rust::src_loc = "584:1"]
pub type aux_type_cred_info_6 = aux_type_cred_info_6_untagged;
#[c2rust::src_loc = "583:1"]
pub type aux_type_cred_info_5_untagged = krb5_cred_info;
#[c2rust::src_loc = "583:1"]
pub type aux_type_cred_info_5 = aux_type_cred_info_5_untagged;
#[c2rust::src_loc = "582:1"]
pub type aux_type_cred_info_4_untagged = krb5_cred_info;
#[c2rust::src_loc = "582:1"]
pub type aux_type_cred_info_4 = aux_type_cred_info_4_untagged;
#[c2rust::src_loc = "266:1"]
pub type aux_type_opt_krb5_flags = aux_type_krb5_flags;
#[c2rust::src_loc = "581:1"]
pub type aux_type_cred_info_3_untagged = krb5_cred_info;
#[c2rust::src_loc = "581:1"]
pub type aux_type_cred_info_3 = aux_type_cred_info_3_untagged;
#[c2rust::src_loc = "580:1"]
pub type aux_type_cred_info_2_untagged = krb5_cred_info;
#[c2rust::src_loc = "580:1"]
pub type aux_type_cred_info_2 = aux_type_cred_info_2_untagged;
#[c2rust::src_loc = "579:1"]
pub type aux_type_cred_info_1_untagged = krb5_cred_info;
#[c2rust::src_loc = "579:1"]
pub type aux_type_cred_info_1 = aux_type_cred_info_1_untagged;
#[c2rust::src_loc = "578:1"]
pub type aux_type_cred_info_0_untagged = krb5_cred_info;
#[c2rust::src_loc = "578:1"]
pub type aux_type_cred_info_0 = aux_type_cred_info_0_untagged;
#[c2rust::src_loc = "597:1"]
pub type aux_type_cred_info_ptr = *mut aux_type_cred_info;
#[c2rust::src_loc = "596:1"]
pub type aux_type_cred_info = krb5_cred_info;
#[c2rust::src_loc = "598:1"]
pub type aux_type_seqof_cred_info = aux_type_cred_info_ptr;
#[c2rust::src_loc = "600:1"]
pub type aux_type_ptrseqof_cred_info = *mut aux_type_seqof_cred_info;
#[c2rust::src_loc = "899:1"]
pub type aux_type_enc_cred_part_0_untagged = krb5_cred_enc_part;
#[c2rust::src_loc = "899:1"]
pub type aux_type_enc_cred_part_0 = aux_type_enc_cred_part_0_untagged;
#[c2rust::src_loc = "929:1"]
pub type aux_type_error_12_untagged = krb5_error;
#[c2rust::src_loc = "929:1"]
pub type aux_type_error_12 = aux_type_error_12_untagged;
#[c2rust::src_loc = "85:1"]
pub type aux_type_opt_gstring_data = aux_type_gstring_data;
#[c2rust::src_loc = "928:1"]
pub type aux_type_error_11_untagged = krb5_error;
#[c2rust::src_loc = "928:1"]
pub type aux_type_error_11 = aux_type_error_11_untagged;
#[c2rust::src_loc = "927:1"]
pub type aux_type_error_10_untagged = krb5_error;
#[c2rust::src_loc = "927:1"]
pub type aux_type_error_10 = aux_type_error_10_untagged;
#[c2rust::src_loc = "926:1"]
pub type aux_type_error_9_untagged = krb5_error;
#[c2rust::src_loc = "926:1"]
pub type aux_type_error_9 = aux_type_error_9_untagged;
#[c2rust::src_loc = "925:1"]
pub type aux_type_error_8_untagged = krb5_error;
#[c2rust::src_loc = "925:1"]
pub type aux_type_error_8 = aux_type_error_8_untagged;
#[c2rust::src_loc = "924:1"]
pub type aux_type_error_7_untagged = krb5_error;
#[c2rust::src_loc = "924:1"]
pub type aux_type_error_7 = aux_type_error_7_untagged;
#[c2rust::src_loc = "53:1"]
pub type aux_type_uint32 = uint32_t;
#[c2rust::src_loc = "923:1"]
pub type aux_type_error_6_untagged = krb5_error;
#[c2rust::src_loc = "923:1"]
pub type aux_type_error_6 = aux_type_error_6_untagged;
#[c2rust::src_loc = "922:1"]
pub type aux_type_error_5_untagged = krb5_error;
#[c2rust::src_loc = "922:1"]
pub type aux_type_error_5 = aux_type_error_5_untagged;
#[c2rust::src_loc = "921:1"]
pub type aux_type_error_4_untagged = krb5_error;
#[c2rust::src_loc = "921:1"]
pub type aux_type_error_4 = aux_type_error_4_untagged;
#[c2rust::src_loc = "920:1"]
pub type aux_type_error_3_untagged = krb5_error;
#[c2rust::src_loc = "920:1"]
pub type aux_type_error_3 = aux_type_error_3_untagged;
#[c2rust::src_loc = "919:1"]
pub type aux_type_error_2_untagged = krb5_error;
#[c2rust::src_loc = "919:1"]
pub type aux_type_error_2 = aux_type_error_2_untagged;
#[c2rust::src_loc = "918:1"]
pub type aux_type_error_1 = aux_type_error_msg_type;
#[c2rust::src_loc = "916:1"]
pub type aux_type_error_msg_type = libc::c_int;
#[c2rust::src_loc = "917:1"]
pub type aux_type_error_0 = aux_type_krb5_version;
#[c2rust::src_loc = "1584:1"]
pub type aux_type_typed_data_1 = aux_type_typed_data_1_untagged;
#[c2rust::src_loc = "1584:1"]
pub type aux_type_typed_data_1_untagged = krb5_pa_data;
#[c2rust::src_loc = "1583:1"]
pub type aux_type_typed_data_0_untagged = krb5_pa_data;
#[c2rust::src_loc = "1583:1"]
pub type aux_type_typed_data_0 = aux_type_typed_data_0_untagged;
#[c2rust::src_loc = "615:1"]
pub type aux_type_etype_info_1_def = aux_type_etype_info_1_def_untagged;
#[c2rust::src_loc = "615:1"]
pub type aux_type_etype_info_1_def_untagged = krb5_etype_info_entry;
#[c2rust::src_loc = "617:1"]
pub type aux_type_etype_info_1 = aux_type_etype_info_1_def;
#[c2rust::src_loc = "614:1"]
pub type aux_type_etype_info_0_untagged = krb5_etype_info_entry;
#[c2rust::src_loc = "614:1"]
pub type aux_type_etype_info_0 = aux_type_etype_info_0_untagged;
#[c2rust::src_loc = "628:1"]
pub type aux_type_etype_info2_2_untagged = krb5_etype_info_entry;
#[c2rust::src_loc = "628:1"]
pub type aux_type_etype_info2_2 = aux_type_etype_info2_2_untagged;
#[c2rust::src_loc = "81:1"]
pub type aux_counttype_u_generalstring = libc::c_uint;
#[c2rust::src_loc = "81:1"]
pub type aux_ptrtype_u_generalstring = *mut uint8_t;
#[c2rust::src_loc = "624:1"]
pub type aux_type_etype_info2_1_def = aux_type_etype_info2_1_def_untagged;
#[c2rust::src_loc = "624:1"]
pub type aux_type_etype_info2_1_def_untagged = krb5_etype_info_entry;
#[c2rust::src_loc = "626:1"]
pub type aux_type_etype_info2_1 = aux_type_etype_info2_1_def;
#[c2rust::src_loc = "940:1"]
pub type aux_type_pa_enc_ts_1_untagged = krb5_pa_enc_ts;
#[c2rust::src_loc = "940:1"]
pub type aux_type_pa_enc_ts_1 = aux_type_pa_enc_ts_1_untagged;
#[c2rust::src_loc = "939:1"]
pub type aux_type_pa_enc_ts_0_untagged = krb5_pa_enc_ts;
#[c2rust::src_loc = "939:1"]
pub type aux_type_pa_enc_ts_0 = aux_type_pa_enc_ts_0_untagged;
#[c2rust::src_loc = "311:1"]
pub type aux_type_seqof_checksum = aux_type_checksum_ptr;
#[c2rust::src_loc = "312:1"]
pub type aux_type_ptr_seqof_checksum = *mut aux_type_seqof_checksum;
#[c2rust::src_loc = "641:1"]
pub type aux_type_sch_1_untagged = krb5_sam_challenge_2;
#[c2rust::src_loc = "641:1"]
pub type aux_type_sch_1 = aux_type_sch_1_untagged;
#[c2rust::src_loc = "640:1"]
pub type aux_type_sch_0_untagged = krb5_sam_challenge_2;
#[c2rust::src_loc = "640:1"]
pub type aux_type_sch_0 = aux_type_sch_0_untagged;
#[c2rust::src_loc = "661:1"]
pub type aux_type_schb_9_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "661:1"]
pub type aux_type_schb_9 = aux_type_schb_9_untagged;
#[c2rust::src_loc = "660:1"]
pub type aux_type_schb_8_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "660:1"]
pub type aux_type_schb_8 = aux_type_schb_8_untagged;
#[c2rust::src_loc = "658:1"]
pub type aux_type_schb_7_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "658:1"]
pub type aux_type_schb_7 = aux_type_schb_7_untagged;
#[c2rust::src_loc = "656:1"]
pub type aux_type_schb_6_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "656:1"]
pub type aux_type_schb_6 = aux_type_schb_6_untagged;
#[c2rust::src_loc = "654:1"]
pub type aux_type_schb_5_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "654:1"]
pub type aux_type_schb_5 = aux_type_schb_5_untagged;
#[c2rust::src_loc = "652:1"]
pub type aux_type_schb_4_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "652:1"]
pub type aux_type_schb_4 = aux_type_schb_4_untagged;
#[c2rust::src_loc = "651:1"]
pub type aux_type_schb_3_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "651:1"]
pub type aux_type_schb_3 = aux_type_schb_3_untagged;
#[c2rust::src_loc = "649:1"]
pub type aux_type_schb_2_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "649:1"]
pub type aux_type_schb_2 = aux_type_schb_2_untagged;
#[c2rust::src_loc = "648:1"]
pub type aux_type_schb_1_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "648:1"]
pub type aux_type_schb_1 = aux_type_schb_1_untagged;
#[c2rust::src_loc = "647:1"]
pub type aux_type_schb_0_untagged = krb5_sam_challenge_2_body;
#[c2rust::src_loc = "647:1"]
pub type aux_type_schb_0 = aux_type_schb_0_untagged;
#[c2rust::src_loc = "671:1"]
pub type aux_type_esre_1_untagged = krb5_enc_sam_response_enc_2;
#[c2rust::src_loc = "671:1"]
pub type aux_type_esre_1 = aux_type_esre_1_untagged;
#[c2rust::src_loc = "670:1"]
pub type aux_type_esre_0_untagged = krb5_enc_sam_response_enc_2;
#[c2rust::src_loc = "670:1"]
pub type aux_type_esre_0 = aux_type_esre_0_untagged;
#[c2rust::src_loc = "683:1"]
pub type aux_type_sam_resp_4_untagged = krb5_sam_response_2;
#[c2rust::src_loc = "683:1"]
pub type aux_type_sam_resp_4 = aux_type_sam_resp_4_untagged;
#[c2rust::src_loc = "681:1"]
pub type aux_type_sam_resp_3_untagged = krb5_sam_response_2;
#[c2rust::src_loc = "681:1"]
pub type aux_type_sam_resp_3 = aux_type_sam_resp_3_untagged;
#[c2rust::src_loc = "680:1"]
pub type aux_type_sam_resp_2_untagged = krb5_sam_response_2;
#[c2rust::src_loc = "680:1"]
pub type aux_type_sam_resp_2 = aux_type_sam_resp_2_untagged;
#[c2rust::src_loc = "679:1"]
pub type aux_type_sam_resp_1_untagged = krb5_sam_response_2;
#[c2rust::src_loc = "679:1"]
pub type aux_type_sam_resp_1 = aux_type_sam_resp_1_untagged;
#[c2rust::src_loc = "678:1"]
pub type aux_type_sam_resp_0_untagged = krb5_sam_response_2;
#[c2rust::src_loc = "678:1"]
pub type aux_type_sam_resp_0 = aux_type_sam_resp_0_untagged;
#[c2rust::src_loc = "952:1"]
pub type aux_type_setpw_req = krb5_setpw_req;
#[c2rust::src_loc = "948:1"]
pub type aux_type_setpw_2_untagged = krb5_setpw_req;
#[c2rust::src_loc = "948:1"]
pub type aux_type_setpw_2 = aux_type_setpw_2_untagged;
#[c2rust::src_loc = "947:1"]
pub type aux_type_setpw_1_untagged = krb5_setpw_req;
#[c2rust::src_loc = "947:1"]
pub type aux_type_setpw_1 = aux_type_setpw_1_untagged;
#[c2rust::src_loc = "946:1"]
pub type aux_type_setpw_0_untagged = krb5_setpw_req;
#[c2rust::src_loc = "946:1"]
pub type aux_type_setpw_0 = aux_type_setpw_0_untagged;
#[c2rust::src_loc = "958:1"]
pub type aux_type_pa_for_user_3_untagged = krb5_pa_for_user;
#[c2rust::src_loc = "958:1"]
pub type aux_type_pa_for_user_3 = aux_type_pa_for_user_3_untagged;
#[c2rust::src_loc = "957:1"]
pub type aux_type_pa_for_user_2_untagged = krb5_pa_for_user;
#[c2rust::src_loc = "957:1"]
pub type aux_type_pa_for_user_2 = aux_type_pa_for_user_2_untagged;
#[c2rust::src_loc = "956:1"]
pub type aux_type_pa_for_user_1_untagged = krb5_pa_for_user;
#[c2rust::src_loc = "956:1"]
pub type aux_type_pa_for_user_1 = aux_type_pa_for_user_1_untagged;
#[c2rust::src_loc = "955:1"]
pub type aux_type_pa_for_user_0_untagged = krb5_pa_for_user;
/* [MS-SFU] Section 2.2.1. */
#[c2rust::src_loc = "955:1"]
pub type aux_type_pa_for_user_0 = aux_type_pa_for_user_0_untagged;
#[c2rust::src_loc = "983:1"]
pub type aux_type_s4u_userid = krb5_s4u_userid;
#[c2rust::src_loc = "978:1"]
pub type aux_type_s4u_userid_4_untagged = krb5_s4u_userid;
#[c2rust::src_loc = "978:1"]
pub type aux_type_s4u_userid_4 = aux_type_s4u_userid_4_untagged;
#[c2rust::src_loc = "977:1"]
pub type aux_type_s4u_userid_3_untagged = krb5_s4u_userid;
#[c2rust::src_loc = "977:1"]
pub type aux_type_s4u_userid_3 = aux_type_s4u_userid_3_untagged;
#[c2rust::src_loc = "976:1"]
pub type aux_type_s4u_userid_2_untagged = krb5_s4u_userid;
#[c2rust::src_loc = "976:1"]
pub type aux_type_s4u_userid_2 = aux_type_s4u_userid_2_untagged;
#[c2rust::src_loc = "973:1"]
pub type aux_type_opt_s4u_principal = aux_type_principal;
#[c2rust::src_loc = "975:1"]
pub type aux_type_s4u_userid_1_untagged = krb5_s4u_userid;
#[c2rust::src_loc = "975:1"]
pub type aux_type_s4u_userid_1 = aux_type_s4u_userid_1_untagged;
#[c2rust::src_loc = "974:1"]
pub type aux_type_s4u_userid_0_untagged = krb5_s4u_userid;
#[c2rust::src_loc = "974:1"]
pub type aux_type_s4u_userid_0 = aux_type_s4u_userid_0_untagged;
#[c2rust::src_loc = "986:1"]
pub type aux_type_pa_s4u_x509_user_1_untagged = krb5_pa_s4u_x509_user;
#[c2rust::src_loc = "986:1"]
pub type aux_type_pa_s4u_x509_user_1 = aux_type_pa_s4u_x509_user_1_untagged;
#[c2rust::src_loc = "985:1"]
pub type aux_type_pa_s4u_x509_user_0_untagged = krb5_pa_s4u_x509_user;
#[c2rust::src_loc = "985:1"]
pub type aux_type_pa_s4u_x509_user_0 = aux_type_pa_s4u_x509_user_0_untagged;
#[c2rust::src_loc = "44:1"]
pub type aux_type_boolean = krb5_boolean;
#[c2rust::src_loc = "992:1"]
pub type aux_type_pa_pac_req_0_untagged = krb5_pa_pac_req;
#[c2rust::src_loc = "992:1"]
pub type aux_type_pa_pac_req_0 = aux_type_pa_pac_req_0_untagged;
#[c2rust::src_loc = "1014:1"]
pub type aux_type_fast_armored_req_2_untagged = krb5_fast_armored_req;
#[c2rust::src_loc = "1014:1"]
pub type aux_type_fast_armored_req_2 = aux_type_fast_armored_req_2_untagged;
#[c2rust::src_loc = "1013:1"]
pub type aux_type_fast_armored_req_1_untagged = krb5_fast_armored_req;
#[c2rust::src_loc = "1013:1"]
pub type aux_type_fast_armored_req_1 = aux_type_fast_armored_req_1_untagged;
#[c2rust::src_loc = "1003:1"]
pub type aux_type_fast_armor_1_untagged = krb5_fast_armor;
#[c2rust::src_loc = "1003:1"]
pub type aux_type_fast_armor_1 = aux_type_fast_armor_1_untagged;
#[c2rust::src_loc = "1002:1"]
pub type aux_type_fast_armor_0_untagged = krb5_fast_armor;
/* draft-ietf-krb-wg-preauth-framework-09 */
#[c2rust::src_loc = "1002:1"]
pub type aux_type_fast_armor_0 = aux_type_fast_armor_0_untagged;
#[c2rust::src_loc = "1008:1"]
pub type aux_type_ptr_fast_armor = *mut aux_type_fast_armor;
#[c2rust::src_loc = "1007:1"]
pub type aux_type_fast_armor = krb5_fast_armor;
#[c2rust::src_loc = "1009:1"]
pub type aux_type_opt_ptr_fast_armor = aux_type_ptr_fast_armor;
#[c2rust::src_loc = "1011:1"]
pub type aux_type_fast_armored_req_0_untagged = krb5_fast_armored_req;
#[c2rust::src_loc = "1011:1"]
pub type aux_type_fast_armored_req_0 = aux_type_fast_armored_req_0_untagged;
#[c2rust::src_loc = "1029:1"]
pub type aux_type_ptr_kdc_req_body = *mut aux_type_kdc_req_body;
#[c2rust::src_loc = "1032:1"]
pub type aux_type_fast_req_2_untagged = krb5_fast_req;
#[c2rust::src_loc = "1032:1"]
pub type aux_type_fast_req_2 = aux_type_fast_req_2_untagged;
#[c2rust::src_loc = "1027:1"]
pub type aux_type_fast_req_padata = krb5_kdc_req;
#[c2rust::src_loc = "1028:1"]
pub type aux_type_ptr_fast_req_padata = *mut aux_type_fast_req_padata;
#[c2rust::src_loc = "1031:1"]
pub type aux_type_fast_req_1_untagged = krb5_fast_req;
#[c2rust::src_loc = "1031:1"]
pub type aux_type_fast_req_1 = aux_type_fast_req_1_untagged;
#[c2rust::src_loc = "1030:1"]
pub type aux_type_fast_req_0_untagged = krb5_fast_req;
#[c2rust::src_loc = "1030:1"]
pub type aux_type_fast_req_0 = aux_type_fast_req_0_untagged;
#[c2rust::src_loc = "1064:1"]
pub type aux_type_fast_rep_0 = aux_type_encrypted_data;
#[c2rust::src_loc = "1128:1"]
pub type aux_type_iakerb_header_2_untagged = krb5_iakerb_header;
#[c2rust::src_loc = "1128:1"]
pub type aux_type_iakerb_header_2 = aux_type_iakerb_header_2_untagged;
#[c2rust::src_loc = "1127:1"]
pub type aux_type_iakerb_header_1_untagged = krb5_iakerb_header;
#[c2rust::src_loc = "1127:1"]
pub type aux_type_iakerb_header_1 = aux_type_iakerb_header_1_untagged;
#[c2rust::src_loc = "1135:1"]
pub type aux_type_iakerb_finished_0_untagged = krb5_iakerb_finished;
#[c2rust::src_loc = "1135:1"]
pub type aux_type_iakerb_finished_0 = aux_type_iakerb_finished_0_untagged;
#[c2rust::src_loc = "1057:1"]
pub type aux_type_fast_response_3_untagged = krb5_fast_response;
#[c2rust::src_loc = "1057:1"]
pub type aux_type_fast_response_3 = aux_type_fast_response_3_untagged;
#[c2rust::src_loc = "1042:1"]
pub type aux_type_fast_finished_4_untagged = krb5_fast_finished;
#[c2rust::src_loc = "1042:1"]
pub type aux_type_fast_finished_4 = aux_type_fast_finished_4_untagged;
#[c2rust::src_loc = "1041:1"]
pub type aux_type_fast_finished_3_untagged = krb5_fast_finished;
#[c2rust::src_loc = "1041:1"]
pub type aux_type_fast_finished_3 = aux_type_fast_finished_3_untagged;
#[c2rust::src_loc = "1040:1"]
pub type aux_type_fast_finished_2_untagged = krb5_fast_finished;
#[c2rust::src_loc = "1040:1"]
pub type aux_type_fast_finished_2 = aux_type_fast_finished_2_untagged;
#[c2rust::src_loc = "1039:1"]
pub type aux_type_fast_finished_1_untagged = krb5_fast_finished;
#[c2rust::src_loc = "1039:1"]
pub type aux_type_fast_finished_1 = aux_type_fast_finished_1_untagged;
#[c2rust::src_loc = "1038:1"]
pub type aux_type_fast_finished_0_untagged = krb5_fast_finished;
#[c2rust::src_loc = "1038:1"]
pub type aux_type_fast_finished_0 = aux_type_fast_finished_0_untagged;
#[c2rust::src_loc = "1049:1"]
pub type aux_type_ptr_fast_finished = *mut aux_type_fast_finished;
#[c2rust::src_loc = "1048:1"]
pub type aux_type_fast_finished = krb5_fast_finished;
#[c2rust::src_loc = "1050:1"]
pub type aux_type_opt_ptr_fast_finished = aux_type_ptr_fast_finished;
#[c2rust::src_loc = "1055:1"]
pub type aux_type_fast_response_2_untagged = krb5_fast_response;
#[c2rust::src_loc = "1055:1"]
pub type aux_type_fast_response_2 = aux_type_fast_response_2_untagged;
#[c2rust::src_loc = "1053:1"]
pub type aux_type_fast_response_1_untagged = krb5_fast_response;
#[c2rust::src_loc = "1053:1"]
pub type aux_type_fast_response_1 = aux_type_fast_response_1_untagged;
#[c2rust::src_loc = "1052:1"]
pub type aux_type_fast_response_0_untagged = krb5_fast_response;
#[c2rust::src_loc = "1052:1"]
pub type aux_type_fast_response_0 = aux_type_fast_response_0_untagged;
#[c2rust::src_loc = "1079:1"]
pub type aux_type_ad_kdcissued_3_untagged = krb5_ad_kdcissued;
#[c2rust::src_loc = "1079:1"]
pub type aux_type_ad_kdcissued_3 = aux_type_ad_kdcissued_3_untagged;
#[c2rust::src_loc = "1078:1"]
pub type aux_type_ad_kdcissued_2_untagged = krb5_ad_kdcissued;
#[c2rust::src_loc = "1078:1"]
pub type aux_type_ad_kdcissued_2 = aux_type_ad_kdcissued_2_untagged;
#[c2rust::src_loc = "1076:1"]
pub type aux_type_ad_kdcissued_1_untagged = krb5_ad_kdcissued;
#[c2rust::src_loc = "1076:1"]
pub type aux_type_ad_kdcissued_1 = aux_type_ad_kdcissued_1_untagged;
#[c2rust::src_loc = "1075:1"]
pub type aux_type_ad_kdcissued_0_untagged = krb5_ad_kdcissued;
#[c2rust::src_loc = "1075:1"]
pub type aux_type_ad_kdcissued_0 = aux_type_ad_kdcissued_0_untagged;
#[c2rust::src_loc = "1118:1"]
pub type aux_type_signedpath_3_untagged = krb5_ad_signedpath;
#[c2rust::src_loc = "1118:1"]
pub type aux_type_signedpath_3 = aux_type_signedpath_3_untagged;
#[c2rust::src_loc = "1087:1"]
pub type aux_type_princ_plus_realm_1 = aux_type_realm_of_principal_data;
#[c2rust::src_loc = "1086:1"]
pub type aux_type_princ_plus_realm_0 = aux_type_principal_data;
#[c2rust::src_loc = "1096:1"]
pub type aux_type_opt_ptr_seqof_princ_plus_realm
    =
    aux_type_ptr_seqof_princ_plus_realm;
#[c2rust::src_loc = "1116:1"]
pub type aux_type_signedpath_2_untagged = krb5_ad_signedpath;
#[c2rust::src_loc = "1116:1"]
pub type aux_type_signedpath_2 = aux_type_signedpath_2_untagged;
#[c2rust::src_loc = "1115:1"]
pub type aux_type_signedpath_1_untagged = krb5_ad_signedpath;
#[c2rust::src_loc = "1115:1"]
pub type aux_type_signedpath_1 = aux_type_signedpath_1_untagged;
#[c2rust::src_loc = "1114:1"]
pub type aux_type_signedpath_0_untagged = krb5_ad_signedpath;
#[c2rust::src_loc = "1114:1"]
pub type aux_type_signedpath_0 = aux_type_signedpath_0_untagged;
#[c2rust::src_loc = "1111:1"]
pub type aux_type_ad_signedpath_data = krb5_ad_signedpath_data;
#[c2rust::src_loc = "1105:1"]
pub type aux_type_spdata_4_untagged = krb5_ad_signedpath_data;
#[c2rust::src_loc = "1105:1"]
pub type aux_type_spdata_4 = aux_type_spdata_4_untagged;
#[c2rust::src_loc = "1103:1"]
pub type aux_type_spdata_3_untagged = krb5_ad_signedpath_data;
#[c2rust::src_loc = "1103:1"]
pub type aux_type_spdata_3 = aux_type_spdata_3_untagged;
#[c2rust::src_loc = "1101:1"]
pub type aux_type_spdata_2_untagged = krb5_ad_signedpath_data;
#[c2rust::src_loc = "1101:1"]
pub type aux_type_spdata_2 = aux_type_spdata_2_untagged;
#[c2rust::src_loc = "1100:1"]
pub type aux_type_spdata_1_untagged = krb5_ad_signedpath_data;
#[c2rust::src_loc = "1100:1"]
pub type aux_type_spdata_1 = aux_type_spdata_1_untagged;
#[c2rust::src_loc = "1099:1"]
pub type aux_type_spdata_0_untagged = krb5_ad_signedpath_data;
#[c2rust::src_loc = "1099:1"]
pub type aux_type_spdata_0 = aux_type_spdata_0_untagged;
#[c2rust::src_loc = "49:1"]
pub type aux_type_opt_int32_minus1 = aux_type_int32;
#[c2rust::src_loc = "1608:1"]
pub type aux_type_tokinfo_8_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1608:1"]
pub type aux_type_tokinfo_8 = aux_type_tokinfo_8_untagged;
#[c2rust::src_loc = "1606:1"]
pub type aux_type_tokinfo_7_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1606:1"]
pub type aux_type_tokinfo_7 = aux_type_tokinfo_7_untagged;
#[c2rust::src_loc = "89:1"]
pub type aux_counttype_utf8string = libc::c_uint;
#[c2rust::src_loc = "89:1"]
pub type aux_ptrtype_utf8string = *mut libc::c_char;
#[c2rust::src_loc = "93:1"]
pub type aux_type_opt_utf8_data = aux_type_utf8_data;
#[c2rust::src_loc = "1605:1"]
pub type aux_type_tokinfo_6_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1605:1"]
pub type aux_type_tokinfo_6 = aux_type_tokinfo_6_untagged;
#[c2rust::src_loc = "1603:1"]
pub type aux_type_tokinfo_5_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1603:1"]
pub type aux_type_tokinfo_5 = aux_type_tokinfo_5_untagged;
#[c2rust::src_loc = "1602:1"]
pub type aux_type_tokinfo_4_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1602:1"]
pub type aux_type_tokinfo_4 = aux_type_tokinfo_4_untagged;
#[c2rust::src_loc = "1601:1"]
pub type aux_type_tokinfo_3_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1601:1"]
pub type aux_type_tokinfo_3 = aux_type_tokinfo_3_untagged;
#[c2rust::src_loc = "1599:1"]
pub type aux_type_tokinfo_2_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1599:1"]
pub type aux_type_tokinfo_2 = aux_type_tokinfo_2_untagged;
#[c2rust::src_loc = "1598:1"]
pub type aux_type_tokinfo_1_untagged = krb5_otp_tokeninfo;
#[c2rust::src_loc = "1598:1"]
pub type aux_type_tokinfo_1 = aux_type_tokinfo_1_untagged;
#[c2rust::src_loc = "1597:1"]
pub type aux_type_tokinfo_0_untagged = krb5_otp_tokeninfo;
/* Definitions for OTP preauth (RFC 6560) */
#[c2rust::src_loc = "1597:1"]
pub type aux_type_tokinfo_0 = aux_type_tokinfo_0_untagged;
#[c2rust::src_loc = "1628:1"]
pub type aux_type_otp_ch_4_untagged = krb5_pa_otp_challenge;
#[c2rust::src_loc = "1628:1"]
pub type aux_type_otp_ch_4 = aux_type_otp_ch_4_untagged;
#[c2rust::src_loc = "1627:1"]
pub type aux_type_otp_ch_3_untagged = krb5_pa_otp_challenge;
#[c2rust::src_loc = "1627:1"]
pub type aux_type_otp_ch_3 = aux_type_otp_ch_3_untagged;
#[c2rust::src_loc = "1619:1"]
pub type aux_type_otp_tokeninfo_ptr = *mut aux_type_otp_tokeninfo;
#[c2rust::src_loc = "1620:1"]
pub type aux_type_seqof_otp_tokeninfo = aux_type_otp_tokeninfo_ptr;
#[c2rust::src_loc = "1621:1"]
pub type aux_type_ptr_seqof_otp_tokeninfo = *mut aux_type_seqof_otp_tokeninfo;
#[c2rust::src_loc = "1625:1"]
pub type aux_type_otp_ch_2_untagged = krb5_pa_otp_challenge;
#[c2rust::src_loc = "1625:1"]
pub type aux_type_otp_ch_2 = aux_type_otp_ch_2_untagged;
#[c2rust::src_loc = "1624:1"]
pub type aux_type_otp_ch_1_untagged = krb5_pa_otp_challenge;
#[c2rust::src_loc = "1624:1"]
pub type aux_type_otp_ch_1 = aux_type_otp_ch_1_untagged;
#[c2rust::src_loc = "1623:1"]
pub type aux_type_otp_ch_0_untagged = krb5_pa_otp_challenge;
#[c2rust::src_loc = "1623:1"]
pub type aux_type_otp_ch_0 = aux_type_otp_ch_0_untagged;
#[c2rust::src_loc = "1653:1"]
pub type aux_type_otp_req_13_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1653:1"]
pub type aux_type_otp_req_13 = aux_type_otp_req_13_untagged;
#[c2rust::src_loc = "1652:1"]
pub type aux_type_otp_req_12_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1652:1"]
pub type aux_type_otp_req_12 = aux_type_otp_req_12_untagged;
#[c2rust::src_loc = "1651:1"]
pub type aux_type_otp_req_11_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1651:1"]
pub type aux_type_otp_req_11 = aux_type_otp_req_11_untagged;
#[c2rust::src_loc = "1650:1"]
pub type aux_type_otp_req_10_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1650:1"]
pub type aux_type_otp_req_10 = aux_type_otp_req_10_untagged;
#[c2rust::src_loc = "1649:1"]
pub type aux_type_otp_req_9_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1649:1"]
pub type aux_type_otp_req_9 = aux_type_otp_req_9_untagged;
#[c2rust::src_loc = "1648:1"]
pub type aux_type_otp_req_8_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1648:1"]
pub type aux_type_otp_req_8 = aux_type_otp_req_8_untagged;
#[c2rust::src_loc = "1647:1"]
pub type aux_type_otp_req_7_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1647:1"]
pub type aux_type_otp_req_7 = aux_type_otp_req_7_untagged;
#[c2rust::src_loc = "1646:1"]
pub type aux_type_otp_req_6_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1646:1"]
pub type aux_type_otp_req_6 = aux_type_otp_req_6_untagged;
#[c2rust::src_loc = "1645:1"]
pub type aux_type_otp_req_5_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1645:1"]
pub type aux_type_otp_req_5 = aux_type_otp_req_5_untagged;
#[c2rust::src_loc = "1643:1"]
pub type aux_type_otp_req_4_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1643:1"]
pub type aux_type_otp_req_4 = aux_type_otp_req_4_untagged;
#[c2rust::src_loc = "1369:1"]
pub type aux_type_opt_ptr_algorithm_identifier
    =
    aux_type_ptr_algorithm_identifier;
#[c2rust::src_loc = "1641:1"]
pub type aux_type_otp_req_3_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1641:1"]
pub type aux_type_otp_req_3 = aux_type_otp_req_3_untagged;
#[c2rust::src_loc = "1640:1"]
pub type aux_type_otp_req_2_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1640:1"]
pub type aux_type_otp_req_2 = aux_type_otp_req_2_untagged;
#[c2rust::src_loc = "1639:1"]
pub type aux_type_otp_req_1_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1639:1"]
pub type aux_type_otp_req_1 = aux_type_otp_req_1_untagged;
#[c2rust::src_loc = "1638:1"]
pub type aux_type_otp_req_0_untagged = krb5_pa_otp_req;
#[c2rust::src_loc = "1638:1"]
pub type aux_type_otp_req_0 = aux_type_otp_req_0_untagged;
#[c2rust::src_loc = "1665:1"]
pub type aux_type_pa_otp_enc_req_0 = aux_type_ostring_data;
#[c2rust::src_loc = "1677:1"]
pub type aux_type_kkdcp_message_2_untagged = krb5_kkdcp_message;
#[c2rust::src_loc = "1677:1"]
pub type aux_type_kkdcp_message_2 = aux_type_kkdcp_message_2_untagged;
#[c2rust::src_loc = "1675:1"]
pub type aux_type_kkdcp_message_1_untagged = krb5_kkdcp_message;
#[c2rust::src_loc = "1675:1"]
pub type aux_type_kkdcp_message_1 = aux_type_kkdcp_message_1_untagged;
#[c2rust::src_loc = "1673:1"]
pub type aux_type_kkdcp_message_0_untagged = krb5_kkdcp_message;
#[c2rust::src_loc = "1673:1"]
pub type aux_type_kkdcp_message_0 = aux_type_kkdcp_message_0_untagged;
#[c2rust::src_loc = "1691:1"]
pub type aux_type_vmac_3_untagged = krb5_verifier_mac;
#[c2rust::src_loc = "1691:1"]
pub type aux_type_vmac_3 = aux_type_vmac_3_untagged;
#[c2rust::src_loc = "1690:1"]
pub type aux_type_vmac_2_untagged = krb5_verifier_mac;
#[c2rust::src_loc = "1690:1"]
pub type aux_type_vmac_2 = aux_type_vmac_2_untagged;
#[c2rust::src_loc = "1689:1"]
pub type aux_type_vmac_1_untagged = krb5_verifier_mac;
#[c2rust::src_loc = "1689:1"]
pub type aux_type_vmac_1 = aux_type_vmac_1_untagged;
#[c2rust::src_loc = "1688:1"]
pub type aux_type_vmac_0_untagged = krb5_verifier_mac;
#[c2rust::src_loc = "1688:1"]
pub type aux_type_vmac_0 = aux_type_vmac_0_untagged;
#[c2rust::src_loc = "1700:1"]
pub type aux_type_opt_vmacs_ptr = aux_type_vmacs_ptr;
#[c2rust::src_loc = "1705:1"]
pub type aux_type_cammac_3_untagged = krb5_cammac;
#[c2rust::src_loc = "1705:1"]
pub type aux_type_cammac_3 = aux_type_cammac_3_untagged;
#[c2rust::src_loc = "1697:1"]
pub type aux_type_opt_vmac_ptr = aux_type_vmac_ptr;
#[c2rust::src_loc = "1704:1"]
pub type aux_type_cammac_2_untagged = krb5_cammac;
#[c2rust::src_loc = "1704:1"]
pub type aux_type_cammac_2 = aux_type_cammac_2_untagged;
#[c2rust::src_loc = "1703:1"]
pub type aux_type_cammac_1_untagged = krb5_cammac;
#[c2rust::src_loc = "1703:1"]
pub type aux_type_cammac_1 = aux_type_cammac_1_untagged;
#[c2rust::src_loc = "1702:1"]
pub type aux_type_cammac_0_untagged = krb5_cammac;
#[c2rust::src_loc = "1702:1"]
pub type aux_type_cammac_0 = aux_type_cammac_0_untagged;
#[c2rust::src_loc = "1727:1"]
pub type aux_type_secure_cookie_1 = krb5_secure_cookie;
/*
 * SecureCookie ::= SEQUENCE {
 *     time     INTEGER,
 *     data     SEQUENCE OF PA-DATA,
 *     ...
 * }
 */
#[c2rust::src_loc = "1725:1"]
pub type aux_type_inttime = time_t;
#[c2rust::src_loc = "1726:1"]
pub type aux_type_secure_cookie_0 = krb5_secure_cookie;
#[c2rust::src_loc = "1748:1"]
pub type aux_type_pa_pac_options_0_untagged = krb5_pa_pac_options;
/*
 * -- based on MS-KILE and MS-SFU
 * PAC-OPTIONS-FLAGS ::= BIT STRING {
 *     claims(0),
 *     branch-aware(1),
 *     forward-to-full-dc(2),
 *     resource-based-constrained-delegation(3)
 * }
 *
 * PA-PAC-OPTIONS ::= SEQUENCE {
 *     flags [0] PAC-OPTIONS-FLAGS
 * }
 */
#[c2rust::src_loc = "1748:1"]
pub type aux_type_pa_pac_options_0 = aux_type_pa_pac_options_0_untagged;
#[c2rust::src_loc = "733:1"]
pub type aux_type_enc_as_rep_part = aux_type_enc_kdc_rep_part;
#[c2rust::src_loc = "791:1"]
pub type aux_type_kdc_req_2_untagged = krb5_kdc_req;
#[c2rust::src_loc = "791:1"]
pub type aux_type_kdc_req_2 = aux_type_kdc_req_2_untagged;
#[derive(Copy, Clone)]
#[repr(C)]
#[c2rust::src_loc = "288:8"]
pub struct authdata_types {
    pub types: *mut krb5_authdatatype,
    pub ntypes: libc::c_uint,
}
#[c2rust::src_loc = "280:1"]
pub type aux_type_authdata_elt_type_0 = aux_type_int32;
#[c2rust::src_loc = "285:1"]
pub type aux_type_ptr_authdata_elt_type = *mut aux_type_authdata_elt_type;
#[c2rust::src_loc = "284:1"]
pub type aux_type_authdata_elt_type = krb5_authdatatype;
#[c2rust::src_loc = "286:1"]
pub type aux_counttype_cseqof_authdata_elt_type = libc::c_uint;
#[c2rust::src_loc = "286:1"]
pub type aux_ptrtype_cseqof_authdata_elt_type
    =
    aux_type_ptr_authdata_elt_type;
#[c2rust::src_loc = "1758:1"]
pub type aux_type_spake_factor_1_untagged = krb5_spake_factor;
#[c2rust::src_loc = "1758:1"]
pub type aux_type_spake_factor_1 = aux_type_spake_factor_1_untagged;
#[c2rust::src_loc = "1757:1"]
pub type aux_type_spake_factor_0_untagged = krb5_spake_factor;
#[c2rust::src_loc = "1757:1"]
pub type aux_type_spake_factor_0 = aux_type_spake_factor_0_untagged;
#[c2rust::src_loc = "1796:1"]
pub type aux_type_pa_spake_3 = aux_type_encrypted_data;
#[c2rust::src_loc = "1787:1"]
pub type aux_type_spake_response_1_untagged = krb5_spake_response;
#[c2rust::src_loc = "1787:1"]
pub type aux_type_spake_response_1 = aux_type_spake_response_1_untagged;
#[c2rust::src_loc = "1786:1"]
pub type aux_type_spake_response_0_untagged = krb5_spake_response;
#[c2rust::src_loc = "1786:1"]
pub type aux_type_spake_response_0 = aux_type_spake_response_0_untagged;
#[c2rust::src_loc = "1795:1"]
pub type aux_type_pa_spake_2 = aux_type_spake_response;
#[c2rust::src_loc = "1791:1"]
pub type aux_type_spake_response = krb5_spake_response;
#[c2rust::src_loc = "1763:1"]
pub type aux_type_spake_factor_ptr = *mut aux_type_spake_factor;
#[c2rust::src_loc = "1764:1"]
pub type aux_type_seqof_spake_factor = aux_type_spake_factor_ptr;
#[c2rust::src_loc = "1765:1"]
pub type aux_type_ptr_seqof_spake_factor = *mut aux_type_seqof_spake_factor;
#[c2rust::src_loc = "1778:1"]
pub type aux_type_spake_challenge_2_untagged = krb5_spake_challenge;
#[c2rust::src_loc = "1778:1"]
pub type aux_type_spake_challenge_2 = aux_type_spake_challenge_2_untagged;
#[c2rust::src_loc = "1777:1"]
pub type aux_type_spake_challenge_1_untagged = krb5_spake_challenge;
#[c2rust::src_loc = "1777:1"]
pub type aux_type_spake_challenge_1 = aux_type_spake_challenge_1_untagged;
#[c2rust::src_loc = "1776:1"]
pub type aux_type_spake_challenge_0_untagged = krb5_spake_challenge;
#[c2rust::src_loc = "1776:1"]
pub type aux_type_spake_challenge_0 = aux_type_spake_challenge_0_untagged;
#[c2rust::src_loc = "1794:1"]
pub type aux_type_pa_spake_1 = aux_type_spake_challenge;
#[c2rust::src_loc = "1784:1"]
pub type aux_type_spake_challenge = krb5_spake_challenge;
#[c2rust::src_loc = "1769:1"]
pub type aux_type_spake_support_0 = aux_type_spake_support_0_untagged;
#[c2rust::src_loc = "1769:1"]
pub type aux_type_spake_support_0_untagged = krb5_spake_support;
#[c2rust::src_loc = "1793:1"]
pub type aux_type_pa_spake_0 = aux_type_spake_support;
#[c2rust::src_loc = "1774:1"]
pub type aux_type_spake_support = krb5_spake_support;
#[c2rust::src_loc = "1801:1"]
pub type aux_counttype_pa_spake_choice = krb5_spake_msgtype;
#[c2rust::src_loc = "1801:1"]
pub type aux_ptrtype_pa_spake_choice = krb5_spake_message_choices;
#[c2rust::src_loc = "54:1"]
pub type aux_type_opt_uint = aux_type_uint;
#[c2rust::src_loc = "101:1"]
pub type aux_type_oid_data_ptr = *mut aux_type_oid_data;
/* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/* lib/krb5/asn.1/asn1_k_encode.c */
/*
 * Copyright 1994, 2008 by the Massachusetts Institute of Technology.
 * All Rights Reserved.
 *
 * Export of this software from the United States of America may
 *   require a specific license from the United States Government.
 *   It is the responsibility of any person or organization contemplating
 *   export to obtain such a license before exporting.
 *
 * WITHIN THAT CONSTRAINT, permission to use, copy, modify, and
 * distribute this software and its documentation for any purpose and
 * without fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation, and that
 * the name of M.I.T. not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior
 * permission.  Furthermore if you modify this software you must label
 * your software as modified software and not distribute it in such a
 * fashion that it might be confused with the original M.I.T. software.
 * M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is" without express
 * or implied warranty.
 */
#[c2rust::src_loc = "30:1"]
static mut aux_info_krb5_version: immediate_info =
    {
        let mut init =
            immediate_info{val: 5 as libc::c_int as intmax_t,
                           err:
                               -(1765328381 as libc::c_long) as
                                   krb5_error_code,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "30:1"]
pub static mut k5_atype_krb5_version: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_krb5_version as *const immediate_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "32:1"]
unsafe extern "C" fn int32_not_minus1(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut int32_t) != -(1 as libc::c_int)) as libc::c_int;
}
#[c2rust::src_loc = "38:1"]
unsafe extern "C" fn init_int32_minus1(mut p: *mut libc::c_void) {
    *(p as *mut int32_t) = -(1 as libc::c_int);
}
#[no_mangle]
#[c2rust::src_loc = "44:1"]
pub static mut k5_atype_boolean: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_bool,
                       size:
                           ::std::mem::size_of::<krb5_boolean>() as
                               libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "45:1"]
pub static mut k5_atype_int32: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_int,
                       size:
                           ::std::mem::size_of::<int32_t>() as libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "46:1"]
pub static mut k5_atype_int32_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_int32_ptr>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_int32_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "46:1"]
static mut aux_info_int32_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_int32_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_int32_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_int32 as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "46:1"]
unsafe extern "C" fn aux_storeptr_int32_ptr(mut ptr: *mut libc::c_void,
                                            mut val: *mut libc::c_void) {
    let ref mut fresh0 = *(val as *mut aux_type_int32_ptr);
    *fresh0 = ptr as aux_type_int32_ptr;
}
#[c2rust::src_loc = "46:1"]
unsafe extern "C" fn aux_loadptr_int32_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_int32_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "47:1"]
pub static mut k5_cntype_cseqof_int32: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_seqof,
                            tinfo:
                                &k5_atype_int32_ptr as *const atype_info as
                                    *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "48:1"]
static mut aux_info_opt_int32: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_int32 as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_int32 as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "48:1"]
unsafe extern "C" fn aux_present_opt_int32(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_int32) != 0 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "48:1"]
pub static mut k5_atype_opt_int32: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_int32>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_opt_int32 as *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "49:1"]
static mut aux_info_opt_int32_minus1: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(int32_not_minus1 as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init:
                                  Some(init_int32_minus1 as
                                           unsafe extern "C" fn(_:
                                                                    *mut libc::c_void)
                                               -> ()),
                              basetype:
                                  &k5_atype_int32 as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "49:1"]
pub static mut k5_atype_opt_int32_minus1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_int32_minus1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_int32_minus1 as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "51:1"]
pub static mut k5_atype_uint: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_uint,
                       size:
                           ::std::mem::size_of::<libc::c_uint>() as
                               libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "52:1"]
pub static mut k5_atype_octet: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_uint,
                       size:
                           ::std::mem::size_of::<krb5_octet>() as
                               libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "53:1"]
pub static mut k5_atype_uint32: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_uint,
                       size:
                           ::std::mem::size_of::<uint32_t>() as libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "54:1"]
pub static mut k5_atype_opt_uint: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_uint>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_opt_uint as *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "54:1"]
unsafe extern "C" fn aux_present_opt_uint(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_uint) != 0 as libc::c_int as libc::c_uint) as
               libc::c_int;
}
#[c2rust::src_loc = "54:1"]
static mut aux_info_opt_uint: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_uint as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype: &k5_atype_uint as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "56:1"]
unsafe extern "C" fn nonempty_data(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_data = p as *const krb5_data;
    return (!(*val).data.is_null() &&
                (*val).length != 0 as libc::c_int as libc::c_uint) as
               libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "63:1"]
pub static mut k5_cntype_der: cntype_info =
    {
        let mut init =
            cntype_info{type_0: cntype_der, tinfo: 0 as *const libc::c_void,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "64:1"]
pub static mut k5_atype_der_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_der_data as *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "64:1"]
pub static mut aux_info_der_data: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "65:1"]
pub static mut k5_atype_opt_der_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_der_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_der_data as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "65:1"]
static mut aux_info_opt_der_data: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(nonempty_data as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_der_data as *const atype_info,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "67:1"]
static mut aux_info_octetstring: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
#[no_mangle]
#[c2rust::src_loc = "67:1"]
pub static mut k5_cntype_octetstring: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_octetstring as *const string_info as
                                    *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "70:1"]
pub static mut k5_cntype_s_octetstring: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_s_octetstring as *const string_info
                                    as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "70:1"]
static mut aux_info_s_octetstring: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
#[no_mangle]
#[c2rust::src_loc = "73:1"]
pub static mut k5_atype_ostring_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ostring_data as *const counted_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "73:1"]
pub static mut aux_info_ostring_data: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[c2rust::src_loc = "74:1"]
unsafe extern "C" fn aux_storeptr_ostring_data_ptr(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh1 = *(val as *mut aux_type_ostring_data_ptr);
    *fresh1 = ptr as aux_type_ostring_data_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "74:1"]
pub static mut k5_atype_ostring_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ostring_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ostring_data_ptr as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "74:1"]
static mut aux_info_ostring_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ostring_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ostring_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_ostring_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "74:1"]
unsafe extern "C" fn aux_loadptr_ostring_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ostring_data_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "75:1"]
static mut aux_info_opt_ostring_data: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(nonempty_data as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ostring_data as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "75:1"]
pub static mut k5_atype_opt_ostring_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ostring_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ostring_data as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "76:1"]
pub static mut k5_atype_opt_ostring_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ostring_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ostring_data_ptr as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "76:1"]
static mut aux_info_opt_ostring_data_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ostring_data_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ostring_data_ptr as
                                      *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "76:1"]
unsafe extern "C" fn aux_present_opt_ostring_data_ptr(mut p:
                                                          *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ostring_data_ptr) !=
                0 as aux_type_ostring_data_ptr) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "78:1"]
pub static mut k5_cntype_generalstring: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_generalstring as *const string_info
                                    as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "78:1"]
static mut aux_info_generalstring: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
// Initialized in run_static_initializers
#[c2rust::src_loc = "81:1"]
static mut aux_info_u_generalstring: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
#[no_mangle]
#[c2rust::src_loc = "81:1"]
pub static mut k5_cntype_u_generalstring: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_u_generalstring as
                                    *const string_info as
                                    *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "84:1"]
pub static mut k5_atype_gstring_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_gstring_data as *const counted_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "84:1"]
pub static mut aux_info_gstring_data: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "85:1"]
pub static mut k5_atype_opt_gstring_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_gstring_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_gstring_data as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "85:1"]
static mut aux_info_opt_gstring_data: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(nonempty_data as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_gstring_data as
                                      *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "86:1"]
unsafe extern "C" fn aux_loadptr_gstring_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_gstring_data_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "86:1"]
pub static mut k5_atype_gstring_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_gstring_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_gstring_data_ptr as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "86:1"]
static mut aux_info_gstring_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_gstring_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_gstring_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_gstring_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "86:1"]
unsafe extern "C" fn aux_storeptr_gstring_data_ptr(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh2 = *(val as *mut aux_type_gstring_data_ptr);
    *fresh2 = ptr as aux_type_gstring_data_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "87:1"]
pub static mut k5_cntype_cseqof_gstring_data: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_seqof,
                            tinfo:
                                &k5_atype_gstring_data_ptr as
                                    *const atype_info as
                                    *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "89:1"]
static mut aux_info_utf8string: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
#[no_mangle]
#[c2rust::src_loc = "89:1"]
pub static mut k5_cntype_utf8string: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_utf8string as *const string_info as
                                    *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "92:1"]
pub static mut aux_info_utf8_data: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "92:1"]
pub static mut k5_atype_utf8_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_utf8_data as *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "93:1"]
pub static mut k5_atype_opt_utf8_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_utf8_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_utf8_data as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "93:1"]
static mut aux_info_opt_utf8_data: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(nonempty_data as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_utf8_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "94:1"]
unsafe extern "C" fn aux_storeptr_utf8_data_ptr(mut ptr: *mut libc::c_void,
                                                mut val: *mut libc::c_void) {
    let ref mut fresh3 = *(val as *mut aux_type_utf8_data_ptr);
    *fresh3 = ptr as aux_type_utf8_data_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "94:1"]
pub static mut k5_atype_utf8_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_utf8_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_utf8_data_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "94:1"]
static mut aux_info_utf8_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_utf8_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_utf8_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_utf8_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "94:1"]
unsafe extern "C" fn aux_loadptr_utf8_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_utf8_data_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "95:1"]
pub static mut k5_atype_seqof_utf8_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_utf8_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_utf8_data_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "97:1"]
static mut aux_info_object_identifier: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
#[no_mangle]
#[c2rust::src_loc = "97:1"]
pub static mut k5_cntype_object_identifier: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_object_identifier as
                                    *const string_info as
                                    *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "100:1"]
pub static mut aux_info_oid_data: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "100:1"]
pub static mut k5_atype_oid_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_oid_data as *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "101:1"]
unsafe extern "C" fn aux_loadptr_oid_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_oid_data_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "101:1"]
pub static mut k5_atype_oid_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_oid_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_oid_data_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "101:1"]
static mut aux_info_oid_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_oid_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_oid_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_oid_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "101:1"]
unsafe extern "C" fn aux_storeptr_oid_data_ptr(mut ptr: *mut libc::c_void,
                                               mut val: *mut libc::c_void) {
    let ref mut fresh4 = *(val as *mut aux_type_oid_data_ptr);
    *fresh4 = ptr as aux_type_oid_data_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "103:1"]
pub static mut k5_atype_realm_of_principal_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_realm_of_principal_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_realm_of_principal_data as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "103:1"]
static mut aux_info_realm_of_principal_data: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "105:1"]
static mut aux_info_realm_of_principal: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_realm_of_principal as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_realm_of_principal as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_realm_of_principal_data as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "105:1"]
unsafe extern "C" fn aux_storeptr_realm_of_principal(mut ptr:
                                                         *mut libc::c_void,
                                                     mut val:
                                                         *mut libc::c_void) {
    let ref mut fresh5 = *(val as *mut aux_type_realm_of_principal);
    *fresh5 = ptr as aux_type_realm_of_principal;
}
#[no_mangle]
#[c2rust::src_loc = "105:1"]
pub static mut k5_atype_realm_of_principal: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_realm_of_principal>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_realm_of_principal as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "105:1"]
unsafe extern "C" fn aux_loadptr_realm_of_principal(mut p:
                                                        *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_realm_of_principal) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "106:1"]
pub static mut k5_atype_opt_realm_of_principal: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_realm_of_principal>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_realm_of_principal as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "106:1"]
unsafe extern "C" fn aux_present_opt_realm_of_principal(mut p:
                                                            *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_realm_of_principal) !=
                0 as aux_type_realm_of_principal) as libc::c_int;
}
#[c2rust::src_loc = "106:1"]
static mut aux_info_opt_realm_of_principal: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_realm_of_principal as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_realm_of_principal as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "108:1"]
pub static mut k5_atype_princname_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_princname_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_princname_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "108:1"]
pub static mut k5_atype_princname_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_princname_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_princname_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "108:1"]
static mut aux_info_princname_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "108:1"]
static mut aux_info_princname_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "109:1"]
pub static mut k5_atype_princname_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_principal_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_princname_1_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "109:1"]
pub static mut aux_info_princname_1_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "109:1"]
static mut aux_info_princname_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "109:1"]
pub static mut k5_atype_princname_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_princname_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_princname_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "111:33"]
static mut princname_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_princname_0 as *const atype_info,
         &k5_atype_princname_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "114:1"]
pub static mut k5_atype_principal_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_principal_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_principal_data as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "114:1"]
static mut aux_seqinfo_principal_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "115:1"]
unsafe extern "C" fn aux_storeptr_principal(mut ptr: *mut libc::c_void,
                                            mut val: *mut libc::c_void) {
    let ref mut fresh6 = *(val as *mut aux_type_principal);
    *fresh6 = ptr as aux_type_principal;
}
#[c2rust::src_loc = "115:1"]
static mut aux_info_principal: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_principal as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_principal as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_principal_data as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "115:1"]
pub static mut k5_atype_principal: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_principal>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_principal as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "115:1"]
unsafe extern "C" fn aux_loadptr_principal(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_principal) as *mut libc::c_void;
}
#[c2rust::src_loc = "116:1"]
unsafe extern "C" fn aux_present_opt_principal(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_principal) != 0 as aux_type_principal) as
               libc::c_int;
}
#[c2rust::src_loc = "116:1"]
static mut aux_info_opt_principal: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_principal as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_principal as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "116:1"]
pub static mut k5_atype_opt_principal: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_principal>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_principal as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
/*
 * Define the seqno type, which is an ASN.1 integer represented in a uint32_t.
 * When decoding, negative 32-bit numbers are accepted for interoperability
 * with old implementations.
 */
#[c2rust::src_loc = "123:1"]
unsafe extern "C" fn encode_seqno(mut buf: *mut asn1buf,
                                  mut p: *const libc::c_void,
                                  mut rettag: *mut taginfo)
 -> krb5_error_code {
    let mut val: uint32_t = *(p as *mut uint32_t);
    (*rettag).asn1class = UNIVERSAL;
    (*rettag).construction = PRIMITIVE;
    (*rettag).tagnum = 2 as libc::c_int;
    k5_asn1_encode_uint(buf, val as uintmax_t);
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "133:1"]
unsafe extern "C" fn decode_seqno(mut t: *const taginfo,
                                  mut asn1: *const uint8_t, mut len: size_t,
                                  mut p: *mut libc::c_void)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut val: intmax_t = 0;
    ret = k5_asn1_decode_int(asn1, len, &mut val);
    if ret != 0 { return ret }
    if val < (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long
           || val > 0xffffffff as libc::c_uint as libc::c_long {
        return 1859794436 as libc::c_long as krb5_error_code
    }
    /* Negative values will cast correctly to uint32_t. */
    *(p as *mut uint32_t) = val as uint32_t;
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "147:1"]
unsafe extern "C" fn check_seqno(mut t: *const taginfo) -> libc::c_int {
    return ((*t).asn1class as libc::c_uint ==
                UNIVERSAL as libc::c_int as libc::c_uint &&
                (*t).construction as libc::c_uint ==
                    PRIMITIVE as libc::c_int as libc::c_uint &&
                (*t).tagnum == 2 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "153:1"]
pub static mut k5_atype_seqno: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_fn,
                           size:
                               ::std::mem::size_of::<uint32_t>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_seqno as *const fn_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "153:1"]
static mut aux_info_seqno: fn_info =
    unsafe {
        {
            let mut init =
                fn_info{enc:
                            Some(encode_seqno as
                                     unsafe extern "C" fn(_: *mut asn1buf,
                                                          _:
                                                              *const libc::c_void,
                                                          _: *mut taginfo)
                                         -> krb5_error_code),
                        dec:
                            Some(decode_seqno as
                                     unsafe extern "C" fn(_: *const taginfo,
                                                          _: *const uint8_t,
                                                          _: size_t,
                                                          _:
                                                              *mut libc::c_void)
                                         -> krb5_error_code),
                        check_tag:
                            Some(check_seqno as
                                     unsafe extern "C" fn(_: *const taginfo)
                                         -> libc::c_int),
                        free_func: None,};
            init
        }
    };
#[c2rust::src_loc = "154:1"]
static mut aux_info_opt_seqno: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_seqno as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_seqno as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "154:1"]
pub static mut k5_atype_opt_seqno: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_seqno>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_opt_seqno as *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "154:1"]
unsafe extern "C" fn aux_present_opt_seqno(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_seqno) != 0 as libc::c_int as libc::c_uint)
               as libc::c_int;
}
/* Define the kerberos_time type, which is an ASN.1 generaltime represented in
 * a krb5_timestamp. */
#[c2rust::src_loc = "158:1"]
unsafe extern "C" fn encode_kerberos_time(mut buf: *mut asn1buf,
                                          mut p: *const libc::c_void,
                                          mut rettag: *mut taginfo)
 -> krb5_error_code {
    let mut val: time_t = ts2tt(*(p as *mut krb5_timestamp));
    (*rettag).asn1class = UNIVERSAL;
    (*rettag).construction = PRIMITIVE;
    (*rettag).tagnum = 24 as libc::c_int;
    return k5_asn1_encode_generaltime(buf, val);
}
#[c2rust::src_loc = "167:1"]
unsafe extern "C" fn decode_kerberos_time(mut t: *const taginfo,
                                          mut asn1: *const uint8_t,
                                          mut len: size_t,
                                          mut p: *mut libc::c_void)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut val: time_t = 0;
    ret = k5_asn1_decode_generaltime(asn1, len, &mut val);
    if ret != 0 { return ret }
    *(p as *mut krb5_timestamp) = val as krb5_timestamp;
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "179:1"]
unsafe extern "C" fn check_kerberos_time(mut t: *const taginfo)
 -> libc::c_int {
    return ((*t).asn1class as libc::c_uint ==
                UNIVERSAL as libc::c_int as libc::c_uint &&
                (*t).construction as libc::c_uint ==
                    PRIMITIVE as libc::c_int as libc::c_uint &&
                (*t).tagnum == 24 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "185:1"]
pub static mut k5_atype_kerberos_time: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_fn,
                           size:
                               ::std::mem::size_of::<krb5_timestamp>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kerberos_time as *const fn_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "185:1"]
static mut aux_info_kerberos_time: fn_info =
    unsafe {
        {
            let mut init =
                fn_info{enc:
                            Some(encode_kerberos_time as
                                     unsafe extern "C" fn(_: *mut asn1buf,
                                                          _:
                                                              *const libc::c_void,
                                                          _: *mut taginfo)
                                         -> krb5_error_code),
                        dec:
                            Some(decode_kerberos_time as
                                     unsafe extern "C" fn(_: *const taginfo,
                                                          _: *const uint8_t,
                                                          _: size_t,
                                                          _:
                                                              *mut libc::c_void)
                                         -> krb5_error_code),
                        check_tag:
                            Some(check_kerberos_time as
                                     unsafe extern "C" fn(_: *const taginfo)
                                         -> libc::c_int),
                        free_func: None,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "187:1"]
pub static mut k5_atype_opt_kerberos_time: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_kerberos_time>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_kerberos_time as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "187:1"]
static mut aux_info_opt_kerberos_time: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_kerberos_time as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_kerberos_time as
                                      *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "187:1"]
unsafe extern "C" fn aux_present_opt_kerberos_time(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_kerberos_time) != 0 as libc::c_int) as
               libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "189:1"]
static mut aux_info_address_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "189:1"]
pub static mut k5_atype_address_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_address_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_address_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "189:1"]
static mut aux_info_address_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "189:1"]
pub static mut k5_atype_address_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_address_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_address_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "190:1"]
pub static mut k5_atype_address_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_address_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_address_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "190:1"]
static mut aux_info_address_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "190:1"]
pub static mut k5_atype_address_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_address>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_address_1_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "190:1"]
pub static mut aux_info_address_1_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[c2rust::src_loc = "191:33"]
static mut address_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_address_0 as *const atype_info,
         &k5_atype_address_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "194:1"]
static mut aux_seqinfo_address: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "194:1"]
pub static mut k5_atype_address: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_address>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_address as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "195:1"]
unsafe extern "C" fn aux_storeptr_address_ptr(mut ptr: *mut libc::c_void,
                                              mut val: *mut libc::c_void) {
    let ref mut fresh7 = *(val as *mut aux_type_address_ptr);
    *fresh7 = ptr as aux_type_address_ptr;
}
#[c2rust::src_loc = "195:1"]
unsafe extern "C" fn aux_loadptr_address_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_address_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "195:1"]
static mut aux_info_address_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_address_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_address_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_address as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "195:1"]
pub static mut k5_atype_address_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_address_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_address_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "196:1"]
pub static mut k5_atype_opt_address_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_address_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_address_ptr as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "196:1"]
static mut aux_info_opt_address_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_address_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_address_ptr as
                                      *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "196:1"]
unsafe extern "C" fn aux_present_opt_address_ptr(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_address_ptr) != 0 as aux_type_address_ptr) as
               libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "198:1"]
pub static mut k5_atype_seqof_host_addresses: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_host_addresses>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_address_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "199:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_host_addresses(mut p:
                                                              *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_host_addresses) as
               *mut libc::c_void;
}
#[c2rust::src_loc = "199:1"]
static mut aux_info_ptr_seqof_host_addresses: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_host_addresses as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_host_addresses as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_host_addresses as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "199:1"]
pub static mut k5_atype_ptr_seqof_host_addresses: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_host_addresses>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_host_addresses as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "199:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_host_addresses(mut ptr:
                                                               *mut libc::c_void,
                                                           mut val:
                                                               *mut libc::c_void) {
    let ref mut fresh8 = *(val as *mut aux_type_ptr_seqof_host_addresses);
    *fresh8 = ptr as aux_type_ptr_seqof_host_addresses;
}
#[c2rust::src_loc = "200:1"]
static mut aux_info_opt_ptr_seqof_host_addresses: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_seqof_host_addresses
                                           as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_seqof_host_addresses as
                                      *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "200:1"]
unsafe extern "C" fn aux_present_opt_ptr_seqof_host_addresses(mut p:
                                                                  *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_ptr_seqof_host_addresses =
        p as *const aux_type_ptr_seqof_host_addresses;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "200:1"]
pub static mut k5_atype_opt_ptr_seqof_host_addresses: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_seqof_host_addresses>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_seqof_host_addresses as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "211:1"]
pub static mut k5_atype_kvno: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_int,
                       size:
                           ::std::mem::size_of::<krb5_kvno>() as
                               libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
#[c2rust::src_loc = "212:1"]
unsafe extern "C" fn aux_present_opt_kvno(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_kvno) != 0 as libc::c_int as libc::c_uint) as
               libc::c_int;
}
#[c2rust::src_loc = "212:1"]
static mut aux_info_opt_kvno: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_kvno as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype: &k5_atype_kvno as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "212:1"]
pub static mut k5_atype_opt_kvno: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_kvno>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_opt_kvno as *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "214:1"]
pub static mut k5_atype_enc_data_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_data_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_data_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "214:1"]
static mut aux_info_enc_data_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "214:1"]
pub static mut k5_atype_enc_data_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_data_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_data_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "214:1"]
static mut aux_info_enc_data_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "215:1"]
pub static mut k5_atype_enc_data_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_data_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_data_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "215:1"]
static mut aux_info_enc_data_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "215:1"]
pub static mut k5_atype_enc_data_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_data_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_data_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "215:1"]
static mut aux_info_enc_data_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "216:1"]
static mut aux_info_enc_data_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "216:1"]
static mut aux_info_enc_data_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "216:1"]
pub static mut k5_atype_enc_data_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_data_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_data_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "216:1"]
pub static mut k5_atype_enc_data_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_data_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_data_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "217:33"]
static mut encrypted_data_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_enc_data_0 as *const atype_info,
         &k5_atype_enc_data_1 as *const atype_info,
         &k5_atype_enc_data_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "220:1"]
pub static mut k5_atype_encrypted_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_enc_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_encrypted_data as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "220:1"]
static mut aux_seqinfo_encrypted_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "221:1"]
unsafe extern "C" fn nonempty_enc_data(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_enc_data = p as *const krb5_enc_data;
    return ((*val).ciphertext.data !=
                0 as *mut libc::c_void as *mut libc::c_char) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "227:1"]
pub static mut k5_atype_opt_encrypted_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_encrypted_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_encrypted_data as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "227:1"]
static mut aux_info_opt_encrypted_data: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(nonempty_enc_data as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_encrypted_data as
                                      *const atype_info,};
            init
        }
    };
/* Define the krb5_flags type, which is an ASN.1 bit string represented in a
 * 32-bit integer. */
#[c2rust::src_loc = "231:1"]
unsafe extern "C" fn encode_krb5_flags(mut buf: *mut asn1buf,
                                       mut p: *const libc::c_void,
                                       mut rettag: *mut taginfo)
 -> krb5_error_code {
    let mut cbuf: [uint8_t; 4] = [0; 4];
    let mut cptr: *mut uint8_t = cbuf.as_mut_ptr();
    store_32_be(*(p as *const krb5_flags) as uint32_t,
                cbuf.as_mut_ptr() as *mut libc::c_void);
    (*rettag).asn1class = UNIVERSAL;
    (*rettag).construction = PRIMITIVE;
    (*rettag).tagnum = 3 as libc::c_int;
    return k5_asn1_encode_bitstring(buf, &mut cptr,
                                    4 as libc::c_int as size_t);
}
#[c2rust::src_loc = "241:1"]
unsafe extern "C" fn decode_krb5_flags(mut t: *const taginfo,
                                       mut asn1: *const uint8_t,
                                       mut len: size_t,
                                       mut val: *mut libc::c_void)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut i: size_t = 0;
    let mut blen: size_t = 0;
    let mut f: krb5_flags = 0 as libc::c_int;
    let mut bits: *mut uint8_t = 0 as *mut uint8_t;
    ret = k5_asn1_decode_bitstring(asn1, len, &mut bits, &mut blen);
    if ret != 0 { return ret }
    /* Copy up to 32 bits into f, starting at the most significant byte. */
    i = 0 as libc::c_int as size_t;
    while i < blen && i < 4 as libc::c_int as libc::c_ulong {
        f |=
            (*bits.offset(i as isize) as libc::c_int) <<
                (8 as libc::c_int as
                     libc::c_ulong).wrapping_mul((3 as libc::c_int as
                                                      libc::c_ulong).wrapping_sub(i));
        i = i.wrapping_add(1)
    }
    *(val as *mut krb5_flags) = f;
    free(bits as *mut libc::c_void);
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "258:1"]
unsafe extern "C" fn check_krb5_flags(mut t: *const taginfo) -> libc::c_int {
    return ((*t).asn1class as libc::c_uint ==
                UNIVERSAL as libc::c_int as libc::c_uint &&
                (*t).construction as libc::c_uint ==
                    PRIMITIVE as libc::c_int as libc::c_uint &&
                (*t).tagnum == 3 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "264:1"]
pub static mut k5_atype_krb5_flags: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_fn,
                           size:
                               ::std::mem::size_of::<krb5_flags>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_krb5_flags as *const fn_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "264:1"]
static mut aux_info_krb5_flags: fn_info =
    unsafe {
        {
            let mut init =
                fn_info{enc:
                            Some(encode_krb5_flags as
                                     unsafe extern "C" fn(_: *mut asn1buf,
                                                          _:
                                                              *const libc::c_void,
                                                          _: *mut taginfo)
                                         -> krb5_error_code),
                        dec:
                            Some(decode_krb5_flags as
                                     unsafe extern "C" fn(_: *const taginfo,
                                                          _: *const uint8_t,
                                                          _: size_t,
                                                          _:
                                                              *mut libc::c_void)
                                         -> krb5_error_code),
                        check_tag:
                            Some(check_krb5_flags as
                                     unsafe extern "C" fn(_: *const taginfo)
                                         -> libc::c_int),
                        free_func: None,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "266:1"]
pub static mut k5_atype_opt_krb5_flags: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_krb5_flags>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_krb5_flags as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "266:1"]
static mut aux_info_opt_krb5_flags: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_krb5_flags as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_krb5_flags as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "266:1"]
unsafe extern "C" fn aux_present_opt_krb5_flags(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_krb5_flags) != 0 as libc::c_int) as
               libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "268:1"]
static mut aux_info_authdata_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "268:1"]
pub static mut k5_atype_authdata_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authdata_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "268:1"]
static mut aux_info_authdata_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "268:1"]
pub static mut k5_atype_authdata_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authdata_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "269:1"]
pub static mut aux_info_authdata_1_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "269:1"]
pub static mut k5_atype_authdata_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_authdata>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_1_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "269:1"]
static mut aux_info_authdata_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "269:1"]
pub static mut k5_atype_authdata_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authdata_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "270:33"]
static mut authdata_elt_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_authdata_0 as *const atype_info,
         &k5_atype_authdata_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "273:1"]
static mut aux_seqinfo_authdata_elt: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "273:1"]
pub static mut k5_atype_authdata_elt: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_authdata>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_authdata_elt as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "274:1"]
unsafe extern "C" fn aux_loadptr_authdata_elt_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_authdata_elt_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "274:1"]
static mut aux_info_authdata_elt_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_authdata_elt_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_authdata_elt_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_authdata_elt as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "274:1"]
unsafe extern "C" fn aux_storeptr_authdata_elt_ptr(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh9 = *(val as *mut aux_type_authdata_elt_ptr);
    *fresh9 = ptr as aux_type_authdata_elt_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "274:1"]
pub static mut k5_atype_authdata_elt_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_authdata_elt_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_elt_ptr as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "275:1"]
pub static mut k5_atype_auth_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nonempty_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_auth_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &k5_atype_authdata_elt_ptr as *const atype_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "276:1"]
pub static mut k5_atype_auth_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_auth_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_data_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "276:1"]
unsafe extern "C" fn aux_loadptr_auth_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_auth_data_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "276:1"]
unsafe extern "C" fn aux_storeptr_auth_data_ptr(mut ptr: *mut libc::c_void,
                                                mut val: *mut libc::c_void) {
    let ref mut fresh10 = *(val as *mut aux_type_auth_data_ptr);
    *fresh10 = ptr as aux_type_auth_data_ptr;
}
#[c2rust::src_loc = "276:1"]
static mut aux_info_auth_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_auth_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_auth_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_auth_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "277:1"]
static mut aux_info_opt_auth_data_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_auth_data_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_auth_data_ptr as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "277:1"]
pub static mut k5_atype_opt_auth_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_auth_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_auth_data_ptr as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "277:1"]
unsafe extern "C" fn aux_present_opt_auth_data_ptr(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_auth_data_ptr =
        p as *const aux_type_auth_data_ptr;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
/* authdata_types retrieves just the types of authdata elements in an array. */
#[no_mangle]
#[c2rust::src_loc = "280:1"]
pub static mut k5_atype_authdata_elt_type_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authdata_elt_type_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_elt_type_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "280:1"]
static mut aux_info_authdata_elt_type_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "281:33"]
static mut authdata_elt_type_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_authdata_elt_type_0 as *const atype_info] };
#[no_mangle]
#[c2rust::src_loc = "284:1"]
pub static mut k5_atype_authdata_elt_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_authdatatype>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_authdata_elt_type as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "284:1"]
static mut aux_seqinfo_authdata_elt_type: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "285:1"]
pub static mut k5_atype_ptr_authdata_elt_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_authdata_elt_type>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_authdata_elt_type as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "285:1"]
unsafe extern "C" fn aux_loadptr_ptr_authdata_elt_type(mut p:
                                                           *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_authdata_elt_type) as *mut libc::c_void;
}
#[c2rust::src_loc = "285:1"]
static mut aux_info_ptr_authdata_elt_type: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_authdata_elt_type as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_authdata_elt_type as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_authdata_elt_type as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "285:1"]
unsafe extern "C" fn aux_storeptr_ptr_authdata_elt_type(mut ptr:
                                                            *mut libc::c_void,
                                                        mut val:
                                                            *mut libc::c_void) {
    let ref mut fresh11 = *(val as *mut aux_type_ptr_authdata_elt_type);
    *fresh11 = ptr as aux_type_ptr_authdata_elt_type;
}
#[no_mangle]
#[c2rust::src_loc = "286:1"]
pub static mut k5_cntype_cseqof_authdata_elt_type: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_seqof,
                            tinfo:
                                &k5_atype_ptr_authdata_elt_type as
                                    *const atype_info as
                                    *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "292:1"]
pub static mut k5_atype_authdata_types: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<authdata_types>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_authdata_types as *const counted_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "292:1"]
pub static mut aux_info_authdata_types: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "295:1"]
static mut aux_info_keyblock_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "295:1"]
pub static mut k5_atype_keyblock_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_keyblock_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_keyblock_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "295:1"]
static mut aux_info_keyblock_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "295:1"]
pub static mut k5_atype_keyblock_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_keyblock_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_keyblock_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "296:1"]
static mut aux_info_keyblock_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "296:1"]
pub static mut k5_atype_keyblock_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_keyblock_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_keyblock_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "296:1"]
pub static mut aux_info_keyblock_1_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "296:1"]
pub static mut k5_atype_keyblock_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_keyblock>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_keyblock_1_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "297:33"]
static mut encryption_key_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_keyblock_0 as *const atype_info,
         &k5_atype_keyblock_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "300:1"]
static mut aux_seqinfo_encryption_key: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "300:1"]
pub static mut k5_atype_encryption_key: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_keyblock>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_encryption_key as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "301:1"]
unsafe extern "C" fn aux_storeptr_ptr_encryption_key(mut ptr:
                                                         *mut libc::c_void,
                                                     mut val:
                                                         *mut libc::c_void) {
    let ref mut fresh12 = *(val as *mut aux_type_ptr_encryption_key);
    *fresh12 = ptr as aux_type_ptr_encryption_key;
}
#[c2rust::src_loc = "301:1"]
static mut aux_info_ptr_encryption_key: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_encryption_key as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_encryption_key as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_encryption_key as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "301:1"]
unsafe extern "C" fn aux_loadptr_ptr_encryption_key(mut p:
                                                        *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_encryption_key) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "301:1"]
pub static mut k5_atype_ptr_encryption_key: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_encryption_key>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_encryption_key as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "302:1"]
pub static mut k5_atype_opt_ptr_encryption_key: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_encryption_key>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_encryption_key as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "302:1"]
unsafe extern "C" fn aux_present_opt_ptr_encryption_key(mut p:
                                                            *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_encryption_key) !=
                0 as aux_type_ptr_encryption_key) as libc::c_int;
}
#[c2rust::src_loc = "302:1"]
static mut aux_info_opt_ptr_encryption_key: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_encryption_key as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_encryption_key as
                                      *const atype_info,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "304:1"]
static mut aux_info_checksum_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "304:1"]
pub static mut k5_atype_checksum_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_checksum_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_checksum_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "304:1"]
static mut aux_info_checksum_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "304:1"]
pub static mut k5_atype_checksum_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_checksum_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_checksum_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "305:1"]
pub static mut aux_info_checksum_1_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "305:1"]
pub static mut k5_atype_checksum_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_checksum>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_checksum_1_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "305:1"]
static mut aux_info_checksum_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "305:1"]
pub static mut k5_atype_checksum_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_checksum_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_checksum_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "306:33"]
static mut checksum_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_checksum_0 as *const atype_info,
         &k5_atype_checksum_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "309:1"]
pub static mut k5_atype_checksum: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_checksum>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_checksum as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "309:1"]
static mut aux_seqinfo_checksum: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "310:1"]
static mut aux_info_checksum_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_checksum_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_checksum_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_checksum as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "310:1"]
unsafe extern "C" fn aux_loadptr_checksum_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_checksum_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "310:1"]
unsafe extern "C" fn aux_storeptr_checksum_ptr(mut ptr: *mut libc::c_void,
                                               mut val: *mut libc::c_void) {
    let ref mut fresh13 = *(val as *mut aux_type_checksum_ptr);
    *fresh13 = ptr as aux_type_checksum_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "310:1"]
pub static mut k5_atype_checksum_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_checksum_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_checksum_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "311:1"]
pub static mut k5_atype_seqof_checksum: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_checksum>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_checksum_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "312:1"]
static mut aux_info_ptr_seqof_checksum: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_checksum as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_checksum as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_checksum as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "312:1"]
pub static mut k5_atype_ptr_seqof_checksum: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_checksum>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_checksum as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "312:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_checksum(mut p:
                                                        *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_checksum) as *mut libc::c_void;
}
#[c2rust::src_loc = "312:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_checksum(mut ptr:
                                                         *mut libc::c_void,
                                                     mut val:
                                                         *mut libc::c_void) {
    let ref mut fresh14 = *(val as *mut aux_type_ptr_seqof_checksum);
    *fresh14 = ptr as aux_type_ptr_seqof_checksum;
}
#[c2rust::src_loc = "313:1"]
unsafe extern "C" fn aux_present_opt_checksum_ptr(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_checksum_ptr) != 0 as aux_type_checksum_ptr)
               as libc::c_int;
}
#[c2rust::src_loc = "313:1"]
static mut aux_info_opt_checksum_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_checksum_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_checksum_ptr as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "313:1"]
pub static mut k5_atype_opt_checksum_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_checksum_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_checksum_ptr as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
/* Define the last_req_type type, which is an int32_t with some massaging on
 * decode for backward compatibility. */
#[c2rust::src_loc = "317:1"]
unsafe extern "C" fn encode_lr_type(mut buf: *mut asn1buf,
                                    mut p: *const libc::c_void,
                                    mut rettag: *mut taginfo)
 -> krb5_error_code {
    let mut val: int32_t = *(p as *mut int32_t);
    (*rettag).asn1class = UNIVERSAL;
    (*rettag).construction = PRIMITIVE;
    (*rettag).tagnum = 2 as libc::c_int;
    k5_asn1_encode_int(buf, val as intmax_t);
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "327:1"]
unsafe extern "C" fn decode_lr_type(mut t: *const taginfo,
                                    mut asn1: *const uint8_t, mut len: size_t,
                                    mut p: *mut libc::c_void)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut val: intmax_t = 0;
    ret = k5_asn1_decode_int(asn1, len, &mut val);
    if ret != 0 { return ret }
    if val > 2147483647 as libc::c_int as libc::c_long ||
           val <
               (-(2147483647 as libc::c_int) - 1 as libc::c_int) as
                   libc::c_long {
        return 1859794436 as libc::c_long as krb5_error_code
    }
    /* If type is in the 128-255 range, treat it as a negative 8-bit value. */
    if val >= 128 as libc::c_int as libc::c_long &&
           val <= 255 as libc::c_int as libc::c_long {
        val -= 256 as libc::c_int as libc::c_long
    }
    *(p as *mut int32_t) = val as int32_t;
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "345:1"]
unsafe extern "C" fn check_lr_type(mut t: *const taginfo) -> libc::c_int {
    return ((*t).asn1class as libc::c_uint ==
                UNIVERSAL as libc::c_int as libc::c_uint &&
                (*t).construction as libc::c_uint ==
                    PRIMITIVE as libc::c_int as libc::c_uint &&
                (*t).tagnum == 2 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "351:1"]
pub static mut k5_atype_last_req_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_fn,
                           size:
                               ::std::mem::size_of::<int32_t>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_type as *const fn_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "351:1"]
static mut aux_info_last_req_type: fn_info =
    unsafe {
        {
            let mut init =
                fn_info{enc:
                            Some(encode_lr_type as
                                     unsafe extern "C" fn(_: *mut asn1buf,
                                                          _:
                                                              *const libc::c_void,
                                                          _: *mut taginfo)
                                         -> krb5_error_code),
                        dec:
                            Some(decode_lr_type as
                                     unsafe extern "C" fn(_: *const taginfo,
                                                          _: *const uint8_t,
                                                          _: size_t,
                                                          _:
                                                              *mut libc::c_void)
                                         -> krb5_error_code),
                        check_tag:
                            Some(check_lr_type as
                                     unsafe extern "C" fn(_: *const taginfo)
                                         -> libc::c_int),
                        free_func: None,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "354:1"]
pub static mut k5_atype_last_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_last_req_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "354:1"]
static mut aux_info_last_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "354:1"]
pub static mut k5_atype_last_req_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_last_req_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "354:1"]
static mut aux_info_last_req_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "355:1"]
static mut aux_info_last_req_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "355:1"]
pub static mut k5_atype_last_req_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_last_req_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "355:1"]
static mut aux_info_last_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "355:1"]
pub static mut k5_atype_last_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_last_req_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "356:33"]
static mut lr_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_last_req_0 as *const atype_info,
         &k5_atype_last_req_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "359:1"]
pub static mut k5_atype_last_req_ent: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_last_req_entry>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_last_req_ent as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "359:1"]
static mut aux_seqinfo_last_req_ent: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "361:1"]
static mut aux_info_last_req_ent_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_last_req_ent_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_last_req_ent_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_last_req_ent as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "361:1"]
unsafe extern "C" fn aux_storeptr_last_req_ent_ptr(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh15 = *(val as *mut aux_type_last_req_ent_ptr);
    *fresh15 = ptr as aux_type_last_req_ent_ptr;
}
#[c2rust::src_loc = "361:1"]
unsafe extern "C" fn aux_loadptr_last_req_ent_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_last_req_ent_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "361:1"]
pub static mut k5_atype_last_req_ent_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_last_req_ent_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_ent_ptr as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "362:1"]
pub static mut k5_atype_last_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nonempty_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_last_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &k5_atype_last_req_ent_ptr as *const atype_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "363:1"]
pub static mut k5_atype_last_req_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_last_req_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_last_req_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "363:1"]
unsafe extern "C" fn aux_storeptr_last_req_ptr(mut ptr: *mut libc::c_void,
                                               mut val: *mut libc::c_void) {
    let ref mut fresh16 = *(val as *mut aux_type_last_req_ptr);
    *fresh16 = ptr as aux_type_last_req_ptr;
}
#[c2rust::src_loc = "363:1"]
unsafe extern "C" fn aux_loadptr_last_req_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_last_req_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "363:1"]
static mut aux_info_last_req_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_last_req_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_last_req_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_last_req as *const atype_info,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "365:1"]
static mut aux_info_ticket_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "365:1"]
pub static mut k5_atype_ticket_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "366:1"]
static mut aux_info_ticket_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "366:1"]
pub static mut k5_atype_ticket_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "366:1"]
pub static mut k5_atype_ticket_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "366:1"]
static mut aux_info_ticket_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "367:1"]
pub static mut k5_atype_ticket_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "367:1"]
static mut aux_info_ticket_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "367:1"]
pub static mut k5_atype_ticket_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "367:1"]
static mut aux_info_ticket_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "368:1"]
pub static mut k5_atype_ticket_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "368:1"]
static mut aux_info_ticket_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "368:1"]
pub static mut k5_atype_ticket_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "368:1"]
static mut aux_info_ticket_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "369:33"]
static mut ticket_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_ticket_0 as *const atype_info,
         &k5_atype_ticket_1 as *const atype_info,
         &k5_atype_ticket_2 as *const atype_info,
         &k5_atype_ticket_3 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "373:1"]
static mut aux_seqinfo_untagged_ticket: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "373:1"]
pub static mut k5_atype_untagged_ticket: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ticket>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_ticket as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "374:1"]
static mut aux_info_ticket: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "374:1"]
pub static mut k5_atype_ticket: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ticket>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ticket as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
/* First context tag is 1, not 0. */
#[no_mangle]
#[c2rust::src_loc = "377:1"]
pub static mut k5_atype_pa_data_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_data_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_data_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "377:1"]
pub static mut k5_atype_pa_data_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_data_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_data_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "377:1"]
static mut aux_info_pa_data_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "377:1"]
static mut aux_info_pa_data_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "378:1"]
pub static mut k5_atype_pa_data_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_data_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_data_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "378:1"]
static mut aux_info_pa_data_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "378:1"]
pub static mut k5_atype_pa_data_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_pa_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_data_2_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "378:1"]
pub static mut aux_info_pa_data_2_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[c2rust::src_loc = "379:33"]
static mut pa_data_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_pa_data_1 as *const atype_info,
         &k5_atype_pa_data_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "382:1"]
pub static mut k5_atype_pa_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_data as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "382:1"]
static mut aux_seqinfo_pa_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "383:1"]
unsafe extern "C" fn aux_loadptr_pa_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_pa_data_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "383:1"]
static mut aux_info_pa_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_pa_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_pa_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_pa_data as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "383:1"]
pub static mut k5_atype_pa_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_pa_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_data_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "383:1"]
unsafe extern "C" fn aux_storeptr_pa_data_ptr(mut ptr: *mut libc::c_void,
                                              mut val: *mut libc::c_void) {
    let ref mut fresh17 = *(val as *mut aux_type_pa_data_ptr);
    *fresh17 = ptr as aux_type_pa_data_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "385:1"]
pub static mut k5_atype_seqof_pa_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_pa_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_pa_data_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "386:1"]
static mut aux_info_ptr_seqof_pa_data: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_pa_data as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_pa_data as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_pa_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "386:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_pa_data(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_pa_data) as *mut libc::c_void;
}
#[c2rust::src_loc = "386:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_pa_data(mut ptr:
                                                        *mut libc::c_void,
                                                    mut val:
                                                        *mut libc::c_void) {
    let ref mut fresh18 = *(val as *mut aux_type_ptr_seqof_pa_data);
    *fresh18 = ptr as aux_type_ptr_seqof_pa_data;
}
#[no_mangle]
#[c2rust::src_loc = "386:1"]
pub static mut k5_atype_ptr_seqof_pa_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_pa_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_pa_data as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "387:1"]
unsafe extern "C" fn aux_present_opt_ptr_seqof_pa_data(mut p:
                                                           *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_ptr_seqof_pa_data =
        p as *const aux_type_ptr_seqof_pa_data;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "387:1"]
pub static mut k5_atype_opt_ptr_seqof_pa_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_seqof_pa_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_seqof_pa_data as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "387:1"]
static mut aux_info_opt_ptr_seqof_pa_data: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_seqof_pa_data as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_seqof_pa_data as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "389:1"]
pub static mut k5_atype_ticket_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ticket_ptr>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ticket_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "389:1"]
unsafe extern "C" fn aux_storeptr_ticket_ptr(mut ptr: *mut libc::c_void,
                                             mut val: *mut libc::c_void) {
    let ref mut fresh19 = *(val as *mut aux_type_ticket_ptr);
    *fresh19 = ptr as aux_type_ticket_ptr;
}
#[c2rust::src_loc = "389:1"]
unsafe extern "C" fn aux_loadptr_ticket_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ticket_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "389:1"]
static mut aux_info_ticket_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ticket_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ticket_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_ticket as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "390:1"]
pub static mut k5_atype_seqof_ticket: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nonempty_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_ticket>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_ticket_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "391:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_ticket(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_ticket) as *mut libc::c_void;
}
#[c2rust::src_loc = "391:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_ticket(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh20 = *(val as *mut aux_type_ptr_seqof_ticket);
    *fresh20 = ptr as aux_type_ptr_seqof_ticket;
}
#[c2rust::src_loc = "391:1"]
static mut aux_info_ptr_seqof_ticket: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_ticket as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_ticket as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_ticket as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "391:1"]
pub static mut k5_atype_ptr_seqof_ticket: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_ticket>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_ticket as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "392:1"]
unsafe extern "C" fn aux_present_opt_ptr_seqof_ticket(mut p:
                                                          *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_ptr_seqof_ticket =
        p as *const aux_type_ptr_seqof_ticket;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
#[c2rust::src_loc = "392:1"]
static mut aux_info_opt_ptr_seqof_ticket: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_seqof_ticket as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_seqof_ticket as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "392:1"]
pub static mut k5_atype_opt_ptr_seqof_ticket: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_seqof_ticket>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_seqof_ticket as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "394:1"]
unsafe extern "C" fn is_enc_kdc_rep_start_set(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_enc_kdc_rep_part =
        p as *const krb5_enc_kdc_rep_part;
    return ((*val).times.starttime != 0 as libc::c_int) as libc::c_int;
}
#[c2rust::src_loc = "400:1"]
unsafe extern "C" fn init_enc_kdc_rep_start(mut p: *mut libc::c_void) {
    let mut val: *mut krb5_enc_kdc_rep_part = p as *mut krb5_enc_kdc_rep_part;
    (*val).times.starttime = (*val).times.authtime;
}
#[c2rust::src_loc = "406:1"]
unsafe extern "C" fn is_renewable_flag_set(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_enc_kdc_rep_part =
        p as *const krb5_enc_kdc_rep_part;
    return (*val).flags & 0x800000 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "412:1"]
pub static mut k5_atype_enc_kdc_rep_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "412:1"]
static mut aux_info_enc_kdc_rep_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "412:1"]
pub static mut k5_atype_enc_kdc_rep_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "412:1"]
static mut aux_info_enc_kdc_rep_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "413:1"]
static mut aux_info_enc_kdc_rep_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "413:1"]
static mut aux_info_enc_kdc_rep_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "413:1"]
pub static mut k5_atype_enc_kdc_rep_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "413:1"]
pub static mut k5_atype_enc_kdc_rep_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "414:1"]
pub static mut k5_atype_enc_kdc_rep_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "414:1"]
static mut aux_info_enc_kdc_rep_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "414:1"]
pub static mut k5_atype_enc_kdc_rep_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "414:1"]
static mut aux_info_enc_kdc_rep_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "415:1"]
pub static mut k5_atype_enc_kdc_rep_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "415:1"]
static mut aux_info_enc_kdc_rep_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "415:1"]
pub static mut k5_atype_enc_kdc_rep_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "415:1"]
static mut aux_info_enc_kdc_rep_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "416:1"]
pub static mut k5_atype_enc_kdc_rep_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "416:1"]
pub static mut k5_atype_enc_kdc_rep_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_4 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "416:1"]
static mut aux_info_enc_kdc_rep_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "416:1"]
static mut aux_info_enc_kdc_rep_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "417:1"]
static mut aux_info_enc_kdc_rep_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "417:1"]
pub static mut k5_atype_enc_kdc_rep_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "417:1"]
static mut aux_info_enc_kdc_rep_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "417:1"]
pub static mut k5_atype_enc_kdc_rep_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_5>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_5 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "419:1"]
static mut aux_info_enc_kdc_rep_6_def_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "419:1"]
pub static mut k5_atype_enc_kdc_rep_6_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_6_def_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_6_def_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "419:1"]
static mut aux_info_enc_kdc_rep_6_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "419:1"]
pub static mut k5_atype_enc_kdc_rep_6_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_6_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_6_def as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "421:1"]
static mut aux_info_enc_kdc_rep_6: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_enc_kdc_rep_start_set as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init:
                                  Some(init_enc_kdc_rep_start as
                                           unsafe extern "C" fn(_:
                                                                    *mut libc::c_void)
                                               -> ()),
                              basetype:
                                  &k5_atype_enc_kdc_rep_6_def as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "421:1"]
pub static mut k5_atype_enc_kdc_rep_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_6>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_6 as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "423:1"]
static mut aux_info_enc_kdc_rep_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "423:1"]
pub static mut k5_atype_enc_kdc_rep_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "423:1"]
static mut aux_info_enc_kdc_rep_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "423:1"]
pub static mut k5_atype_enc_kdc_rep_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_7>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_7 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "425:1"]
pub static mut k5_atype_enc_kdc_rep_8_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_8_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_8_def as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "425:1"]
static mut aux_info_enc_kdc_rep_8_def_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "425:1"]
pub static mut k5_atype_enc_kdc_rep_8_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_8_def_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_8_def_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "425:1"]
static mut aux_info_enc_kdc_rep_8_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "427:1"]
static mut aux_info_enc_kdc_rep_8: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_renewable_flag_set as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_enc_kdc_rep_8_def as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "427:1"]
pub static mut k5_atype_enc_kdc_rep_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_8>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_8 as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "428:1"]
static mut aux_info_enc_kdc_rep_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "428:1"]
pub static mut k5_atype_enc_kdc_rep_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_9_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "428:1"]
static mut aux_info_enc_kdc_rep_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "428:1"]
pub static mut k5_atype_enc_kdc_rep_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_9>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_9 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "429:1"]
static mut aux_info_enc_kdc_rep_10_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "429:1"]
pub static mut k5_atype_enc_kdc_rep_10_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_10_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_10_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "429:1"]
static mut aux_info_enc_kdc_rep_10: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "429:1"]
pub static mut k5_atype_enc_kdc_rep_10: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_10>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_10 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "430:1"]
static mut aux_info_enc_kdc_rep_11_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "430:1"]
pub static mut k5_atype_enc_kdc_rep_11: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_11>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_11 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "430:1"]
static mut aux_info_enc_kdc_rep_11: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "430:1"]
pub static mut k5_atype_enc_kdc_rep_11_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_11_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_11_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "432:1"]
pub static mut k5_atype_enc_kdc_rep_12_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_12_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_12_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "432:1"]
pub static mut k5_atype_enc_kdc_rep_12: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_kdc_rep_12>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_kdc_rep_12 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "432:1"]
static mut aux_info_enc_kdc_rep_12_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "432:1"]
static mut aux_info_enc_kdc_rep_12: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "434:33"]
static mut enc_kdc_rep_part_fields: [*const atype_info; 13] =
    unsafe {
        [&k5_atype_enc_kdc_rep_0 as *const atype_info,
         &k5_atype_enc_kdc_rep_1 as *const atype_info,
         &k5_atype_enc_kdc_rep_2 as *const atype_info,
         &k5_atype_enc_kdc_rep_3 as *const atype_info,
         &k5_atype_enc_kdc_rep_4 as *const atype_info,
         &k5_atype_enc_kdc_rep_5 as *const atype_info,
         &k5_atype_enc_kdc_rep_6 as *const atype_info,
         &k5_atype_enc_kdc_rep_7 as *const atype_info,
         &k5_atype_enc_kdc_rep_8 as *const atype_info,
         &k5_atype_enc_kdc_rep_9 as *const atype_info,
         &k5_atype_enc_kdc_rep_10 as *const atype_info,
         &k5_atype_enc_kdc_rep_11 as *const atype_info,
         &k5_atype_enc_kdc_rep_12 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "441:1"]
static mut aux_seqinfo_enc_kdc_rep_part: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "441:1"]
pub static mut k5_atype_enc_kdc_rep_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_enc_kdc_rep_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_enc_kdc_rep_part as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "453:1"]
static mut aux_info_req_body_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "453:1"]
pub static mut k5_atype_req_body_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "453:1"]
pub static mut k5_atype_req_body_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "453:1"]
static mut aux_info_req_body_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "454:1"]
pub static mut k5_atype_req_body_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "454:1"]
static mut aux_info_req_body_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "454:1"]
pub static mut k5_atype_req_body_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "454:1"]
static mut aux_info_req_body_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "455:1"]
static mut aux_info_req_body_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "455:1"]
pub static mut k5_atype_req_body_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "455:1"]
static mut aux_info_req_body_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "455:1"]
pub static mut k5_atype_req_body_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "456:1"]
static mut aux_info_req_body_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "456:1"]
pub static mut k5_atype_req_body_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "456:1"]
static mut aux_info_req_body_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "456:1"]
pub static mut k5_atype_req_body_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "457:1"]
pub static mut k5_atype_req_body_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "457:1"]
static mut aux_info_req_body_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "457:1"]
static mut aux_info_req_body_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "457:1"]
pub static mut k5_atype_req_body_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "458:1"]
static mut aux_info_req_body_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "458:1"]
pub static mut k5_atype_req_body_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "458:1"]
static mut aux_info_req_body_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "458:1"]
pub static mut k5_atype_req_body_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "459:1"]
pub static mut k5_atype_req_body_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "459:1"]
static mut aux_info_req_body_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "459:1"]
pub static mut k5_atype_req_body_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "459:1"]
static mut aux_info_req_body_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "460:1"]
static mut aux_info_req_body_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "460:1"]
pub static mut k5_atype_req_body_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "460:1"]
static mut aux_info_req_body_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "460:1"]
pub static mut k5_atype_req_body_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_7>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "461:1"]
pub static mut k5_atype_req_body_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<kdc_req_hack>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_8_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "461:1"]
static mut aux_info_req_body_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "461:1"]
pub static mut k5_atype_req_body_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_8>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "461:1"]
pub static mut aux_info_req_body_8_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "462:1"]
static mut aux_info_req_body_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "462:1"]
static mut aux_info_req_body_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "462:1"]
pub static mut k5_atype_req_body_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_9_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "462:1"]
pub static mut k5_atype_req_body_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_9>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_9 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "464:1"]
pub static mut k5_atype_req_body_10: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_10>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_10 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "464:1"]
static mut aux_info_req_body_10: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "464:1"]
pub static mut k5_atype_req_body_10_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_10_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_10_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "464:1"]
static mut aux_info_req_body_10_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "466:1"]
pub static mut k5_atype_req_body_11_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_11_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_11_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "466:1"]
static mut aux_info_req_body_11: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "466:1"]
static mut aux_info_req_body_11_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "466:1"]
pub static mut k5_atype_req_body_11: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_req_body_11>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_req_body_11 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "467:33"]
static mut kdc_req_hack_fields: [*const atype_info; 12] =
    unsafe {
        [&k5_atype_req_body_0 as *const atype_info,
         &k5_atype_req_body_1 as *const atype_info,
         &k5_atype_req_body_2 as *const atype_info,
         &k5_atype_req_body_3 as *const atype_info,
         &k5_atype_req_body_4 as *const atype_info,
         &k5_atype_req_body_5 as *const atype_info,
         &k5_atype_req_body_6 as *const atype_info,
         &k5_atype_req_body_7 as *const atype_info,
         &k5_atype_req_body_8 as *const atype_info,
         &k5_atype_req_body_9 as *const atype_info,
         &k5_atype_req_body_10 as *const atype_info,
         &k5_atype_req_body_11 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "473:1"]
static mut aux_seqinfo_kdc_req_body_hack: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "473:1"]
pub static mut k5_atype_kdc_req_body_hack: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<kdc_req_hack>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_kdc_req_body_hack as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "474:1"]
unsafe extern "C" fn encode_kdc_req_body(mut buf: *mut asn1buf,
                                         mut p: *const libc::c_void,
                                         mut tag_out: *mut taginfo)
 -> krb5_error_code {
    let mut val: *const krb5_kdc_req = p as *const krb5_kdc_req;
    let mut h: kdc_req_hack =
        kdc_req_hack{v:
                         krb5_kdc_req{magic: 0,
                                      msg_type: 0,
                                      padata: 0 as *mut *mut krb5_pa_data,
                                      kdc_options: 0,
                                      client: 0 as *mut krb5_principal_data,
                                      server: 0 as *mut krb5_principal_data,
                                      from: 0,
                                      till: 0,
                                      rtime: 0,
                                      nonce: 0,
                                      nktypes: 0,
                                      ktype: 0 as *mut krb5_enctype,
                                      addresses: 0 as *mut *mut krb5_address,
                                      authorization_data:
                                          krb5_enc_data{magic: 0,
                                                        enctype: 0,
                                                        kvno: 0,
                                                        ciphertext:
                                                            krb5_data{magic:
                                                                          0,
                                                                      length:
                                                                          0,
                                                                      data:
                                                                          0 as
                                                                              *mut libc::c_char,},},
                                      unenc_authdata:
                                          0 as *mut *mut krb5_authdata,
                                      second_ticket:
                                          0 as *mut *mut krb5_ticket,},
                     server_realm:
                         krb5_data{magic: 0,
                                   length: 0,
                                   data: 0 as *mut libc::c_char,},};
    h.v = *val;
    if (*val).kdc_options & 0x8 as libc::c_int != 0 {
        if !(*val).second_ticket.is_null() &&
               !(*(*val).second_ticket.offset(0 as libc::c_int as
                                                  isize)).is_null() {
            h.server_realm =
                (*(**(*val).second_ticket.offset(0 as libc::c_int as
                                                     isize)).server).realm
        } else { return 1859794433 as libc::c_long as krb5_error_code }
    } else if !(*val).server.is_null() {
        h.server_realm = (*(*val).server).realm
    } else { return 1859794433 as libc::c_long as krb5_error_code }
    return k5_asn1_encode_atype(buf,
                                &mut h as *mut kdc_req_hack as
                                    *const libc::c_void,
                                &k5_atype_kdc_req_body_hack, tag_out);
}
#[c2rust::src_loc = "491:1"]
unsafe extern "C" fn free_kdc_req_body(mut val: *mut libc::c_void) {
    let mut req: *mut krb5_kdc_req = val as *mut krb5_kdc_req;
    krb5_free_principal(0 as krb5_context, (*req).client);
    krb5_free_principal(0 as krb5_context, (*req).server);
    free((*req).ktype as *mut libc::c_void);
    krb5_free_addresses(0 as krb5_context, (*req).addresses);
    free((*req).authorization_data.ciphertext.data as *mut libc::c_void);
    krb5_free_tickets(0 as krb5_context, (*req).second_ticket);
}
#[c2rust::src_loc = "502:1"]
unsafe extern "C" fn decode_kdc_req_body(mut t: *const taginfo,
                                         mut asn1: *const uint8_t,
                                         mut len: size_t,
                                         mut val: *mut libc::c_void)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut h: kdc_req_hack =
        kdc_req_hack{v:
                         krb5_kdc_req{magic: 0,
                                      msg_type: 0,
                                      padata: 0 as *mut *mut krb5_pa_data,
                                      kdc_options: 0,
                                      client: 0 as *mut krb5_principal_data,
                                      server: 0 as *mut krb5_principal_data,
                                      from: 0,
                                      till: 0,
                                      rtime: 0,
                                      nonce: 0,
                                      nktypes: 0,
                                      ktype: 0 as *mut krb5_enctype,
                                      addresses: 0 as *mut *mut krb5_address,
                                      authorization_data:
                                          krb5_enc_data{magic: 0,
                                                        enctype: 0,
                                                        kvno: 0,
                                                        ciphertext:
                                                            krb5_data{magic:
                                                                          0,
                                                                      length:
                                                                          0,
                                                                      data:
                                                                          0 as
                                                                              *mut libc::c_char,},},
                                      unenc_authdata:
                                          0 as *mut *mut krb5_authdata,
                                      second_ticket:
                                          0 as *mut *mut krb5_ticket,},
                     server_realm:
                         krb5_data{magic: 0,
                                   length: 0,
                                   data: 0 as *mut libc::c_char,},};
    let mut b: *mut krb5_kdc_req = val as *mut krb5_kdc_req;
    memset(&mut h as *mut kdc_req_hack as *mut libc::c_void, 0 as libc::c_int,
           ::std::mem::size_of::<kdc_req_hack>() as libc::c_ulong);
    ret =
        k5_asn1_decode_atype(t, asn1, len, &k5_atype_kdc_req_body_hack,
                             &mut h as *mut kdc_req_hack as
                                 *mut libc::c_void);
    if ret != 0 { return ret }
    (*b).kdc_options = h.v.kdc_options;
    (*b).client = h.v.client;
    (*b).server = h.v.server;
    (*b).from = h.v.from;
    (*b).till = h.v.till;
    (*b).rtime = h.v.rtime;
    (*b).nonce = h.v.nonce;
    (*b).ktype = h.v.ktype;
    (*b).nktypes = h.v.nktypes;
    (*b).addresses = h.v.addresses;
    (*b).authorization_data = h.v.authorization_data;
    (*b).second_ticket = h.v.second_ticket;
    if !(*b).client.is_null() && !(*b).server.is_null() {
        ret =
            krb5int_copy_data_contents(0 as krb5_context, &mut h.server_realm,
                                       &mut (*(*b).client).realm);
        if ret != 0 {
            free_kdc_req_body(b as *mut libc::c_void);
            free(h.server_realm.data as *mut libc::c_void);
            return ret
        }
        (*(*b).server).realm = h.server_realm
    } else if !(*b).client.is_null() {
        (*(*b).client).realm = h.server_realm
    } else if !(*b).server.is_null() {
        (*(*b).server).realm = h.server_realm
    } else { free(h.server_realm.data as *mut libc::c_void); }
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "542:1"]
unsafe extern "C" fn check_kdc_req_body(mut t: *const taginfo)
 -> libc::c_int {
    return ((*t).asn1class as libc::c_uint ==
                UNIVERSAL as libc::c_int as libc::c_uint &&
                (*t).construction as libc::c_uint ==
                    CONSTRUCTED as libc::c_int as libc::c_uint &&
                (*t).tagnum == 16 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "548:1"]
pub static mut k5_atype_kdc_req_body: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_fn,
                           size:
                               ::std::mem::size_of::<krb5_kdc_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_body as *const fn_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "548:1"]
static mut aux_info_kdc_req_body: fn_info =
    unsafe {
        {
            let mut init =
                fn_info{enc:
                            Some(encode_kdc_req_body as
                                     unsafe extern "C" fn(_: *mut asn1buf,
                                                          _:
                                                              *const libc::c_void,
                                                          _: *mut taginfo)
                                         -> krb5_error_code),
                        dec:
                            Some(decode_kdc_req_body as
                                     unsafe extern "C" fn(_: *const taginfo,
                                                          _: *const uint8_t,
                                                          _: size_t,
                                                          _:
                                                              *mut libc::c_void)
                                         -> krb5_error_code),
                        check_tag:
                            Some(check_kdc_req_body as
                                     unsafe extern "C" fn(_: *const taginfo)
                                         -> libc::c_int),
                        free_func:
                            Some(free_kdc_req_body as
                                     unsafe extern "C" fn(_:
                                                              *mut libc::c_void)
                                         -> ()),};
            init
        }
    };
/* end ugly hack */
#[no_mangle]
#[c2rust::src_loc = "552:1"]
pub static mut k5_atype_transited_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_transited_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_transited_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "552:1"]
static mut aux_info_transited_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "552:1"]
pub static mut k5_atype_transited_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_transited_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_transited_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "552:1"]
static mut aux_info_transited_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "553:1"]
pub static mut k5_atype_transited_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_transited_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_transited_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "553:1"]
static mut aux_info_transited_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "553:1"]
pub static mut k5_atype_transited_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_transited_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_transited_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "553:1"]
static mut aux_info_transited_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "554:33"]
static mut transited_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_transited_0 as *const atype_info,
         &k5_atype_transited_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "557:1"]
pub static mut k5_atype_transited: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_transited>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_transited as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "557:1"]
static mut aux_seqinfo_transited: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "559:1"]
unsafe extern "C" fn is_safe_timestamp_set(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_safe = p as *const krb5_safe;
    return ((*val).timestamp != 0 as libc::c_int) as libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "565:1"]
static mut aux_info_safe_body_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "565:1"]
pub static mut k5_atype_safe_body_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "565:1"]
pub static mut k5_atype_safe_body_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "565:1"]
static mut aux_info_safe_body_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "566:1"]
static mut aux_info_safe_body_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "566:1"]
pub static mut k5_atype_safe_body_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "566:1"]
pub static mut k5_atype_safe_body_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "566:1"]
static mut aux_info_safe_body_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "567:1"]
static mut aux_info_safe_body_2_def_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "567:1"]
pub static mut k5_atype_safe_body_2_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_2_def_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_2_def_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "567:1"]
static mut aux_info_safe_body_2_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "567:1"]
pub static mut k5_atype_safe_body_2_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_2_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_2_def as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "568:1"]
pub static mut k5_atype_safe_body_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_2 as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "568:1"]
static mut aux_info_safe_body_2: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_safe_timestamp_set as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_safe_body_2_def as
                                      *const atype_info,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "569:1"]
static mut aux_info_safe_body_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "569:1"]
pub static mut k5_atype_safe_body_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "569:1"]
static mut aux_info_safe_body_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "569:1"]
pub static mut k5_atype_safe_body_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "570:1"]
static mut aux_info_safe_body_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "570:1"]
pub static mut k5_atype_safe_body_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "570:1"]
static mut aux_info_safe_body_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "570:1"]
pub static mut k5_atype_safe_body_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "571:1"]
static mut aux_info_safe_body_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "571:1"]
pub static mut k5_atype_safe_body_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_5>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "571:1"]
static mut aux_info_safe_body_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "571:1"]
pub static mut k5_atype_safe_body_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_body_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_body_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "572:33"]
static mut safe_body_fields: [*const atype_info; 6] =
    unsafe {
        [&k5_atype_safe_body_0 as *const atype_info,
         &k5_atype_safe_body_1 as *const atype_info,
         &k5_atype_safe_body_2 as *const atype_info,
         &k5_atype_safe_body_3 as *const atype_info,
         &k5_atype_safe_body_4 as *const atype_info,
         &k5_atype_safe_body_5 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "576:1"]
pub static mut k5_atype_safe_body: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_safe>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_safe_body as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "576:1"]
static mut aux_seqinfo_safe_body: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "578:1"]
pub static mut k5_atype_cred_info_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "578:1"]
static mut aux_info_cred_info_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "578:1"]
pub static mut k5_atype_cred_info_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "578:1"]
static mut aux_info_cred_info_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "579:1"]
pub static mut k5_atype_cred_info_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "579:1"]
pub static mut k5_atype_cred_info_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "579:1"]
static mut aux_info_cred_info_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "579:1"]
static mut aux_info_cred_info_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "580:1"]
static mut aux_info_cred_info_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "580:1"]
pub static mut k5_atype_cred_info_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "580:1"]
pub static mut k5_atype_cred_info_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "580:1"]
static mut aux_info_cred_info_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "581:1"]
static mut aux_info_cred_info_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "581:1"]
pub static mut k5_atype_cred_info_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "581:1"]
static mut aux_info_cred_info_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "581:1"]
pub static mut k5_atype_cred_info_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "582:1"]
pub static mut k5_atype_cred_info_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "582:1"]
static mut aux_info_cred_info_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "582:1"]
pub static mut k5_atype_cred_info_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "582:1"]
static mut aux_info_cred_info_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "583:1"]
pub static mut k5_atype_cred_info_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "583:1"]
static mut aux_info_cred_info_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "583:1"]
pub static mut k5_atype_cred_info_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_5>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "583:1"]
static mut aux_info_cred_info_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "584:1"]
pub static mut k5_atype_cred_info_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_6>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "584:1"]
pub static mut k5_atype_cred_info_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "584:1"]
static mut aux_info_cred_info_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "584:1"]
static mut aux_info_cred_info_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "585:1"]
static mut aux_info_cred_info_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "585:1"]
static mut aux_info_cred_info_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "585:1"]
pub static mut k5_atype_cred_info_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "585:1"]
pub static mut k5_atype_cred_info_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_7>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "586:1"]
pub static mut k5_atype_cred_info_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_8>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "586:1"]
static mut aux_info_cred_info_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "586:1"]
static mut aux_info_cred_info_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "586:1"]
pub static mut k5_atype_cred_info_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_8_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "587:1"]
pub static mut k5_atype_cred_info_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_9_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "587:1"]
static mut aux_info_cred_info_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "587:1"]
static mut aux_info_cred_info_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "587:1"]
pub static mut k5_atype_cred_info_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_9>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_9 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "588:1"]
static mut aux_info_cred_info_10_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "588:1"]
pub static mut k5_atype_cred_info_10_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_10_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_10_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "588:1"]
static mut aux_info_cred_info_10: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "588:1"]
pub static mut k5_atype_cred_info_10: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_10>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_10 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "590:33"]
static mut krb_cred_info_fields: [*const atype_info; 11] =
    unsafe {
        [&k5_atype_cred_info_0 as *const atype_info,
         &k5_atype_cred_info_1 as *const atype_info,
         &k5_atype_cred_info_2 as *const atype_info,
         &k5_atype_cred_info_3 as *const atype_info,
         &k5_atype_cred_info_4 as *const atype_info,
         &k5_atype_cred_info_5 as *const atype_info,
         &k5_atype_cred_info_6 as *const atype_info,
         &k5_atype_cred_info_7 as *const atype_info,
         &k5_atype_cred_info_8 as *const atype_info,
         &k5_atype_cred_info_9 as *const atype_info,
         &k5_atype_cred_info_10 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "596:1"]
static mut aux_seqinfo_cred_info: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "596:1"]
pub static mut k5_atype_cred_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_cred_info>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_cred_info as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "597:1"]
pub static mut k5_atype_cred_info_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_cred_info_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_info_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "597:1"]
static mut aux_info_cred_info_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_cred_info_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_cred_info_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_cred_info as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "597:1"]
unsafe extern "C" fn aux_loadptr_cred_info_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_cred_info_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "597:1"]
unsafe extern "C" fn aux_storeptr_cred_info_ptr(mut ptr: *mut libc::c_void,
                                                mut val: *mut libc::c_void) {
    let ref mut fresh21 = *(val as *mut aux_type_cred_info_ptr);
    *fresh21 = ptr as aux_type_cred_info_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "598:1"]
pub static mut k5_atype_seqof_cred_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_cred_info>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_cred_info_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "600:1"]
static mut aux_info_ptrseqof_cred_info: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptrseqof_cred_info as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptrseqof_cred_info as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_cred_info as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "600:1"]
unsafe extern "C" fn aux_loadptr_ptrseqof_cred_info(mut p:
                                                        *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptrseqof_cred_info) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "600:1"]
pub static mut k5_atype_ptrseqof_cred_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptrseqof_cred_info>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptrseqof_cred_info as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "600:1"]
unsafe extern "C" fn aux_storeptr_ptrseqof_cred_info(mut ptr:
                                                         *mut libc::c_void,
                                                     mut val:
                                                         *mut libc::c_void) {
    let ref mut fresh22 = *(val as *mut aux_type_ptrseqof_cred_info);
    *fresh22 = ptr as aux_type_ptrseqof_cred_info;
}
#[c2rust::src_loc = "602:1"]
unsafe extern "C" fn is_salt_present(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_etype_info_entry =
        p as *const krb5_etype_info_entry;
    return ((*val).length !=
                (2147483647 as libc::c_int as
                     libc::c_uint).wrapping_mul(2 as
                                                    libc::c_uint).wrapping_add(1
                                                                                   as
                                                                                   libc::c_uint))
               as libc::c_int;
}
#[c2rust::src_loc = "608:1"]
unsafe extern "C" fn init_no_salt(mut p: *mut libc::c_void) {
    let mut val: *mut krb5_etype_info_entry = p as *mut krb5_etype_info_entry;
    (*val).length =
        (2147483647 as libc::c_int as
             libc::c_uint).wrapping_mul(2 as
                                            libc::c_uint).wrapping_add(1 as
                                                                           libc::c_uint);
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "614:1"]
static mut aux_info_etype_info_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "614:1"]
pub static mut k5_atype_etype_info_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "614:1"]
static mut aux_info_etype_info_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "614:1"]
pub static mut k5_atype_etype_info_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "615:1"]
pub static mut aux_info_etype_info_1_def_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "615:1"]
pub static mut k5_atype_etype_info_1_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_etype_info_entry>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info_1_def_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "615:1"]
static mut aux_info_etype_info_1_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "615:1"]
pub static mut k5_atype_etype_info_1_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info_1_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info_1_def as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "617:1"]
static mut aux_info_etype_info_1: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_salt_present as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init:
                                  Some(init_no_salt as
                                           unsafe extern "C" fn(_:
                                                                    *mut libc::c_void)
                                               -> ()),
                              basetype:
                                  &k5_atype_etype_info_1_def as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "617:1"]
pub static mut k5_atype_etype_info_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info_1 as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "618:33"]
static mut etype_info_entry_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_etype_info_0 as *const atype_info,
         &k5_atype_etype_info_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "621:1"]
static mut aux_seqinfo_etype_info_entry: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "621:1"]
pub static mut k5_atype_etype_info_entry: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_etype_info_entry>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_etype_info_entry as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
/* First field is the same as etype-info. */
#[no_mangle]
#[c2rust::src_loc = "624:1"]
pub static mut k5_atype_etype_info2_1_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info2_1_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info2_1_def as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "624:1"]
static mut aux_info_etype_info2_1_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "624:1"]
pub static mut k5_atype_etype_info2_1_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_etype_info_entry>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info2_1_def_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "624:1"]
pub static mut aux_info_etype_info2_1_def_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "626:1"]
pub static mut k5_atype_etype_info2_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info2_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info2_1 as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "626:1"]
static mut aux_info_etype_info2_1: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_salt_present as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init:
                                  Some(init_no_salt as
                                           unsafe extern "C" fn(_:
                                                                    *mut libc::c_void)
                                               -> ()),
                              basetype:
                                  &k5_atype_etype_info2_1_def as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "628:1"]
pub static mut k5_atype_etype_info2_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info2_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info2_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "628:1"]
static mut aux_info_etype_info2_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "628:1"]
pub static mut k5_atype_etype_info2_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info2_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info2_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "628:1"]
static mut aux_info_etype_info2_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "629:33"]
static mut etype_info2_entry_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_etype_info_0 as *const atype_info,
         &k5_atype_etype_info2_1 as *const atype_info,
         &k5_atype_etype_info2_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "632:1"]
pub static mut k5_atype_etype_info2_entry: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_etype_info_entry>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_etype_info2_entry as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "632:1"]
static mut aux_seqinfo_etype_info2_entry: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "634:1"]
pub static mut k5_atype_etype_info_entry_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info_entry_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info_entry_ptr as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "634:1"]
static mut aux_info_etype_info_entry_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_etype_info_entry_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_etype_info_entry_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_etype_info_entry as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "634:1"]
unsafe extern "C" fn aux_storeptr_etype_info_entry_ptr(mut ptr:
                                                           *mut libc::c_void,
                                                       mut val:
                                                           *mut libc::c_void) {
    let ref mut fresh23 = *(val as *mut aux_type_etype_info_entry_ptr);
    *fresh23 = ptr as aux_type_etype_info_entry_ptr;
}
#[c2rust::src_loc = "634:1"]
unsafe extern "C" fn aux_loadptr_etype_info_entry_ptr(mut p:
                                                          *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_etype_info_entry_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "635:1"]
pub static mut k5_atype_etype_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info>() as
                                   libc::c_ulong,
                           tinfo:
                               &k5_atype_etype_info_entry_ptr as
                                   *const atype_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "637:1"]
pub static mut k5_atype_etype_info2_entry_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info2_entry_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_etype_info2_entry_ptr as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "637:1"]
unsafe extern "C" fn aux_storeptr_etype_info2_entry_ptr(mut ptr:
                                                            *mut libc::c_void,
                                                        mut val:
                                                            *mut libc::c_void) {
    let ref mut fresh24 = *(val as *mut aux_type_etype_info2_entry_ptr);
    *fresh24 = ptr as aux_type_etype_info2_entry_ptr;
}
#[c2rust::src_loc = "637:1"]
unsafe extern "C" fn aux_loadptr_etype_info2_entry_ptr(mut p:
                                                           *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_etype_info2_entry_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "637:1"]
static mut aux_info_etype_info2_entry_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_etype_info2_entry_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_etype_info2_entry_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_etype_info2_entry as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "638:1"]
pub static mut k5_atype_etype_info2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_etype_info2>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_etype_info2_entry_ptr as
                                   *const atype_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "640:1"]
static mut aux_info_sch_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "640:1"]
static mut aux_info_sch_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "640:1"]
pub static mut k5_atype_sch_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sch_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sch_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "640:1"]
pub static mut k5_atype_sch_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sch_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sch_0_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "641:1"]
pub static mut k5_atype_sch_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sch_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sch_1_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "641:1"]
static mut aux_info_sch_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "641:1"]
static mut aux_info_sch_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "641:1"]
pub static mut k5_atype_sch_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sch_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sch_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "642:33"]
static mut sam_challenge_2_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_sch_0 as *const atype_info,
         &k5_atype_sch_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "645:1"]
pub static mut k5_atype_sam_challenge_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_sam_challenge_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_sam_challenge_2 as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "645:1"]
static mut aux_seqinfo_sam_challenge_2: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "647:1"]
pub static mut k5_atype_schb_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_0_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "647:1"]
static mut aux_info_schb_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "647:1"]
static mut aux_info_schb_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "647:1"]
pub static mut k5_atype_schb_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "648:1"]
static mut aux_info_schb_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "648:1"]
pub static mut k5_atype_schb_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_1_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "648:1"]
static mut aux_info_schb_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "648:1"]
pub static mut k5_atype_schb_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "649:1"]
static mut aux_info_schb_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "649:1"]
pub static mut k5_atype_schb_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_2_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "649:1"]
static mut aux_info_schb_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "649:1"]
pub static mut k5_atype_schb_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "651:1"]
static mut aux_info_schb_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "651:1"]
pub static mut k5_atype_schb_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "651:1"]
pub static mut k5_atype_schb_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_3_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "651:1"]
static mut aux_info_schb_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "652:1"]
static mut aux_info_schb_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "652:1"]
pub static mut k5_atype_schb_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "652:1"]
static mut aux_info_schb_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "652:1"]
pub static mut k5_atype_schb_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_4_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "654:1"]
pub static mut k5_atype_schb_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "654:1"]
static mut aux_info_schb_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "654:1"]
pub static mut k5_atype_schb_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_5_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "654:1"]
static mut aux_info_schb_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "656:1"]
pub static mut k5_atype_schb_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "656:1"]
static mut aux_info_schb_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "656:1"]
pub static mut k5_atype_schb_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_6_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "656:1"]
static mut aux_info_schb_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "658:1"]
pub static mut k5_atype_schb_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_7>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "658:1"]
static mut aux_info_schb_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "658:1"]
pub static mut k5_atype_schb_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_7_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "658:1"]
static mut aux_info_schb_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "660:1"]
static mut aux_info_schb_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "660:1"]
pub static mut k5_atype_schb_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_8_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "660:1"]
pub static mut k5_atype_schb_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_8>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "660:1"]
static mut aux_info_schb_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "661:1"]
pub static mut k5_atype_schb_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_schb_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_schb_9_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "661:1"]
pub static mut k5_atype_schb_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_schb_9>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_schb_9 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "661:1"]
static mut aux_info_schb_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "661:1"]
static mut aux_info_schb_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "662:33"]
static mut sam_challenge_2_body_fields: [*const atype_info; 10] =
    unsafe {
        [&k5_atype_schb_0 as *const atype_info,
         &k5_atype_schb_1 as *const atype_info,
         &k5_atype_schb_2 as *const atype_info,
         &k5_atype_schb_3 as *const atype_info,
         &k5_atype_schb_4 as *const atype_info,
         &k5_atype_schb_5 as *const atype_info,
         &k5_atype_schb_6 as *const atype_info,
         &k5_atype_schb_7 as *const atype_info,
         &k5_atype_schb_8 as *const atype_info,
         &k5_atype_schb_9 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "667:1"]
pub static mut k5_atype_sam_challenge_2_body: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_sam_challenge_2_body>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_sam_challenge_2_body as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "667:1"]
static mut aux_seqinfo_sam_challenge_2_body: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "670:1"]
static mut aux_info_esre_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "670:1"]
static mut aux_info_esre_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "670:1"]
pub static mut k5_atype_esre_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_esre_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_esre_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "670:1"]
pub static mut k5_atype_esre_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_esre_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_esre_0_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "671:1"]
static mut aux_info_esre_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "671:1"]
pub static mut k5_atype_esre_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_esre_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_esre_1_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "671:1"]
static mut aux_info_esre_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "671:1"]
pub static mut k5_atype_esre_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_esre_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_esre_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "672:33"]
static mut enc_sam_response_enc_2_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_esre_0 as *const atype_info,
         &k5_atype_esre_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "675:1"]
static mut aux_seqinfo_enc_sam_response_enc_2: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "675:1"]
pub static mut k5_atype_enc_sam_response_enc_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_enc_sam_response_enc_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_enc_sam_response_enc_2 as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "678:1"]
static mut aux_info_sam_resp_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "678:1"]
static mut aux_info_sam_resp_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "678:1"]
pub static mut k5_atype_sam_resp_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "678:1"]
pub static mut k5_atype_sam_resp_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "679:1"]
static mut aux_info_sam_resp_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "679:1"]
pub static mut k5_atype_sam_resp_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "679:1"]
static mut aux_info_sam_resp_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "679:1"]
pub static mut k5_atype_sam_resp_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "680:1"]
pub static mut k5_atype_sam_resp_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "680:1"]
static mut aux_info_sam_resp_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "680:1"]
pub static mut k5_atype_sam_resp_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "680:1"]
static mut aux_info_sam_resp_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "681:1"]
pub static mut k5_atype_sam_resp_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "681:1"]
static mut aux_info_sam_resp_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "681:1"]
pub static mut k5_atype_sam_resp_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "681:1"]
static mut aux_info_sam_resp_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "683:1"]
pub static mut k5_atype_sam_resp_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "683:1"]
static mut aux_info_sam_resp_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "683:1"]
pub static mut k5_atype_sam_resp_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_sam_resp_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_sam_resp_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "683:1"]
static mut aux_info_sam_resp_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "684:33"]
static mut sam_response_2_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_sam_resp_0 as *const atype_info,
         &k5_atype_sam_resp_1 as *const atype_info,
         &k5_atype_sam_resp_2 as *const atype_info,
         &k5_atype_sam_resp_3 as *const atype_info,
         &k5_atype_sam_resp_4 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "688:1"]
pub static mut k5_atype_sam_response_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_sam_response_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_sam_response_2 as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "688:1"]
static mut aux_seqinfo_sam_response_2: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "690:1"]
static mut aux_info_authenticator_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "690:1"]
pub static mut k5_atype_authenticator_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "691:1"]
pub static mut k5_atype_authenticator_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "691:1"]
static mut aux_info_authenticator_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "691:1"]
pub static mut k5_atype_authenticator_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "691:1"]
static mut aux_info_authenticator_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "692:1"]
pub static mut k5_atype_authenticator_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "692:1"]
static mut aux_info_authenticator_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "692:1"]
pub static mut k5_atype_authenticator_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "692:1"]
static mut aux_info_authenticator_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "693:1"]
pub static mut k5_atype_authenticator_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "693:1"]
static mut aux_info_authenticator_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "693:1"]
pub static mut k5_atype_authenticator_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "693:1"]
static mut aux_info_authenticator_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "694:1"]
static mut aux_info_authenticator_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "694:1"]
pub static mut k5_atype_authenticator_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_4 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "694:1"]
pub static mut k5_atype_authenticator_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "694:1"]
static mut aux_info_authenticator_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "695:1"]
pub static mut k5_atype_authenticator_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "695:1"]
static mut aux_info_authenticator_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "695:1"]
pub static mut k5_atype_authenticator_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_5>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_5 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "695:1"]
static mut aux_info_authenticator_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "696:1"]
pub static mut k5_atype_authenticator_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_6>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_6 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "696:1"]
static mut aux_info_authenticator_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "696:1"]
pub static mut k5_atype_authenticator_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "696:1"]
static mut aux_info_authenticator_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "698:1"]
pub static mut k5_atype_authenticator_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "698:1"]
pub static mut k5_atype_authenticator_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_7>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_7 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "698:1"]
static mut aux_info_authenticator_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "698:1"]
static mut aux_info_authenticator_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "699:1"]
pub static mut k5_atype_authenticator_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_8>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_8 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "699:1"]
static mut aux_info_authenticator_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "699:1"]
pub static mut k5_atype_authenticator_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator_8_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "699:1"]
static mut aux_info_authenticator_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "701:33"]
static mut authenticator_fields: [*const atype_info; 9] =
    unsafe {
        [&k5_atype_authenticator_0 as *const atype_info,
         &k5_atype_authenticator_1 as *const atype_info,
         &k5_atype_authenticator_2 as *const atype_info,
         &k5_atype_authenticator_3 as *const atype_info,
         &k5_atype_authenticator_4 as *const atype_info,
         &k5_atype_authenticator_5 as *const atype_info,
         &k5_atype_authenticator_6 as *const atype_info,
         &k5_atype_authenticator_7 as *const atype_info,
         &k5_atype_authenticator_8 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "708:1"]
static mut aux_seqinfo_untagged_authenticator: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "708:1"]
pub static mut k5_atype_untagged_authenticator: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_authenticator>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_authenticator as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "709:1"]
pub static mut k5_atype_authenticator: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_authenticator>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_authenticator as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "709:1"]
static mut aux_info_authenticator: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "711:1"]
static mut aux_info_enc_tkt_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "711:1"]
pub static mut k5_atype_enc_tkt_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "711:1"]
static mut aux_info_enc_tkt_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "711:1"]
pub static mut k5_atype_enc_tkt_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "712:1"]
pub static mut k5_atype_enc_tkt_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "712:1"]
static mut aux_info_enc_tkt_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "712:1"]
pub static mut k5_atype_enc_tkt_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "712:1"]
static mut aux_info_enc_tkt_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "713:1"]
pub static mut k5_atype_enc_tkt_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "713:1"]
static mut aux_info_enc_tkt_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "713:1"]
pub static mut k5_atype_enc_tkt_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "713:1"]
static mut aux_info_enc_tkt_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "714:1"]
static mut aux_info_enc_tkt_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "714:1"]
static mut aux_info_enc_tkt_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "714:1"]
pub static mut k5_atype_enc_tkt_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "714:1"]
pub static mut k5_atype_enc_tkt_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "715:1"]
static mut aux_info_enc_tkt_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "715:1"]
pub static mut k5_atype_enc_tkt_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "715:1"]
static mut aux_info_enc_tkt_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "715:1"]
pub static mut k5_atype_enc_tkt_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "716:1"]
pub static mut k5_atype_enc_tkt_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "716:1"]
static mut aux_info_enc_tkt_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "716:1"]
pub static mut k5_atype_enc_tkt_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "716:1"]
static mut aux_info_enc_tkt_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "717:1"]
pub static mut k5_atype_enc_tkt_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "717:1"]
static mut aux_info_enc_tkt_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "717:1"]
static mut aux_info_enc_tkt_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "717:1"]
pub static mut k5_atype_enc_tkt_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "718:1"]
pub static mut k5_atype_enc_tkt_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "718:1"]
static mut aux_info_enc_tkt_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "718:1"]
static mut aux_info_enc_tkt_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "718:1"]
pub static mut k5_atype_enc_tkt_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_7>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "719:1"]
static mut aux_info_enc_tkt_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "719:1"]
pub static mut k5_atype_enc_tkt_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_8_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "719:1"]
static mut aux_info_enc_tkt_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "719:1"]
pub static mut k5_atype_enc_tkt_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_8>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "720:1"]
static mut aux_info_enc_tkt_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "720:1"]
pub static mut k5_atype_enc_tkt_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_9>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_9 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "720:1"]
pub static mut k5_atype_enc_tkt_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_9_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "720:1"]
static mut aux_info_enc_tkt_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "722:1"]
static mut aux_info_enc_tkt_10_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "722:1"]
pub static mut k5_atype_enc_tkt_10_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_10_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_10_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "722:1"]
static mut aux_info_enc_tkt_10: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "722:1"]
pub static mut k5_atype_enc_tkt_10: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_10>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_10 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "724:33"]
static mut enc_tkt_part_fields: [*const atype_info; 11] =
    unsafe {
        [&k5_atype_enc_tkt_0 as *const atype_info,
         &k5_atype_enc_tkt_1 as *const atype_info,
         &k5_atype_enc_tkt_2 as *const atype_info,
         &k5_atype_enc_tkt_3 as *const atype_info,
         &k5_atype_enc_tkt_4 as *const atype_info,
         &k5_atype_enc_tkt_5 as *const atype_info,
         &k5_atype_enc_tkt_6 as *const atype_info,
         &k5_atype_enc_tkt_7 as *const atype_info,
         &k5_atype_enc_tkt_8 as *const atype_info,
         &k5_atype_enc_tkt_9 as *const atype_info,
         &k5_atype_enc_tkt_10 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "730:1"]
pub static mut k5_atype_untagged_enc_tkt_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_enc_tkt_part>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_enc_tkt_part as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "730:1"]
static mut aux_seqinfo_untagged_enc_tkt_part: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "731:1"]
pub static mut k5_atype_enc_tkt_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tkt_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tkt_part as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "731:1"]
static mut aux_info_enc_tkt_part: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "733:1"]
pub static mut k5_atype_enc_as_rep_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_as_rep_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_as_rep_part as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "733:1"]
static mut aux_info_enc_as_rep_part: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "734:1"]
pub static mut k5_atype_enc_tgs_rep_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_tgs_rep_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_tgs_rep_part as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "734:1"]
static mut aux_info_enc_tgs_rep_part: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "736:1"]
pub static mut k5_atype_kdc_rep_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "736:1"]
static mut aux_info_kdc_rep_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "737:1"]
static mut aux_info_kdc_rep_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "737:1"]
pub static mut k5_atype_kdc_rep_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "737:1"]
static mut aux_info_kdc_rep_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "737:1"]
pub static mut k5_atype_kdc_rep_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "738:1"]
static mut aux_info_kdc_rep_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "738:1"]
pub static mut k5_atype_kdc_rep_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "738:1"]
static mut aux_info_kdc_rep_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "738:1"]
pub static mut k5_atype_kdc_rep_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "739:1"]
pub static mut k5_atype_kdc_rep_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "739:1"]
static mut aux_info_kdc_rep_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "739:1"]
pub static mut k5_atype_kdc_rep_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "739:1"]
static mut aux_info_kdc_rep_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "740:1"]
static mut aux_info_kdc_rep_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "740:1"]
pub static mut k5_atype_kdc_rep_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "740:1"]
static mut aux_info_kdc_rep_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "740:1"]
pub static mut k5_atype_kdc_rep_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "741:1"]
pub static mut k5_atype_kdc_rep_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "741:1"]
static mut aux_info_kdc_rep_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "741:1"]
pub static mut k5_atype_kdc_rep_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "741:1"]
static mut aux_info_kdc_rep_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "742:1"]
pub static mut k5_atype_kdc_rep_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "742:1"]
static mut aux_info_kdc_rep_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "742:1"]
pub static mut k5_atype_kdc_rep_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_rep_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_rep_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "742:1"]
static mut aux_info_kdc_rep_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "743:33"]
static mut kdc_rep_fields: [*const atype_info; 7] =
    unsafe {
        [&k5_atype_kdc_rep_0 as *const atype_info,
         &k5_atype_kdc_rep_1 as *const atype_info,
         &k5_atype_kdc_rep_2 as *const atype_info,
         &k5_atype_kdc_rep_3 as *const atype_info,
         &k5_atype_kdc_rep_4 as *const atype_info,
         &k5_atype_kdc_rep_5 as *const atype_info,
         &k5_atype_kdc_rep_6 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "748:1"]
static mut aux_seqinfo_kdc_rep: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "748:1"]
pub static mut k5_atype_kdc_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_kdc_rep>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_kdc_rep as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "749:1"]
static mut aux_info_as_rep: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "749:1"]
pub static mut k5_atype_as_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_as_rep>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_as_rep as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "750:1"]
pub static mut k5_atype_tgs_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tgs_rep>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tgs_rep as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "750:1"]
static mut aux_info_tgs_rep: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "752:1"]
static mut aux_info_ap_req_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 14 as libc::c_int as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "752:1"]
pub static mut k5_atype_ap_req_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_ap_req_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "753:1"]
pub static mut k5_atype_ap_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "753:1"]
static mut aux_info_ap_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "754:1"]
static mut aux_info_ap_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "754:1"]
pub static mut k5_atype_ap_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "755:1"]
pub static mut k5_atype_ap_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "755:1"]
static mut aux_info_ap_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "755:1"]
pub static mut k5_atype_ap_req_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "755:1"]
static mut aux_info_ap_req_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "756:1"]
static mut aux_info_ap_req_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "756:1"]
pub static mut k5_atype_ap_req_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "756:1"]
static mut aux_info_ap_req_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "756:1"]
pub static mut k5_atype_ap_req_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "757:1"]
pub static mut k5_atype_ap_req_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "757:1"]
static mut aux_info_ap_req_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "757:1"]
pub static mut k5_atype_ap_req_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "757:1"]
static mut aux_info_ap_req_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "758:33"]
static mut ap_req_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_ap_req_0 as *const atype_info,
         &k5_atype_ap_req_1 as *const atype_info,
         &k5_atype_ap_req_2 as *const atype_info,
         &k5_atype_ap_req_3 as *const atype_info,
         &k5_atype_ap_req_4 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "762:1"]
pub static mut k5_atype_untagged_ap_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ap_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_ap_req as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "762:1"]
static mut aux_seqinfo_untagged_ap_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "763:1"]
static mut aux_info_ap_req: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "763:1"]
pub static mut k5_atype_ap_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_req as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "765:1"]
static mut aux_info_ap_rep_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 15 as libc::c_int as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "765:1"]
pub static mut k5_atype_ap_rep_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_ap_rep_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "766:1"]
static mut aux_info_ap_rep_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "766:1"]
pub static mut k5_atype_ap_rep_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "767:1"]
pub static mut k5_atype_ap_rep_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "767:1"]
static mut aux_info_ap_rep_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "768:1"]
pub static mut k5_atype_ap_rep_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "768:1"]
pub static mut k5_atype_ap_rep_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "768:1"]
static mut aux_info_ap_rep_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "768:1"]
static mut aux_info_ap_rep_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "769:33"]
static mut ap_rep_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_ap_rep_0 as *const atype_info,
         &k5_atype_ap_rep_1 as *const atype_info,
         &k5_atype_ap_rep_2 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "772:1"]
static mut aux_seqinfo_untagged_ap_rep: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "772:1"]
pub static mut k5_atype_untagged_ap_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ap_rep>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_ap_rep as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "773:1"]
static mut aux_info_ap_rep: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "773:1"]
pub static mut k5_atype_ap_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "775:1"]
static mut aux_info_ap_rep_enc_part_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "775:1"]
pub static mut k5_atype_ap_rep_enc_part_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "775:1"]
static mut aux_info_ap_rep_enc_part_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "775:1"]
pub static mut k5_atype_ap_rep_enc_part_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "776:1"]
static mut aux_info_ap_rep_enc_part_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "776:1"]
pub static mut k5_atype_ap_rep_enc_part_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "776:1"]
static mut aux_info_ap_rep_enc_part_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "776:1"]
pub static mut k5_atype_ap_rep_enc_part_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "777:1"]
static mut aux_info_ap_rep_enc_part_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "777:1"]
pub static mut k5_atype_ap_rep_enc_part_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "777:1"]
static mut aux_info_ap_rep_enc_part_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "777:1"]
pub static mut k5_atype_ap_rep_enc_part_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_2 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "779:1"]
static mut aux_info_ap_rep_enc_part_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "779:1"]
pub static mut k5_atype_ap_rep_enc_part_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_3 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "779:1"]
static mut aux_info_ap_rep_enc_part_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "779:1"]
pub static mut k5_atype_ap_rep_enc_part_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "780:33"]
static mut ap_rep_enc_part_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_ap_rep_enc_part_0 as *const atype_info,
         &k5_atype_ap_rep_enc_part_1 as *const atype_info,
         &k5_atype_ap_rep_enc_part_2 as *const atype_info,
         &k5_atype_ap_rep_enc_part_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "784:1"]
pub static mut k5_atype_untagged_ap_rep_enc_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ap_rep_enc_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_ap_rep_enc_part as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "784:1"]
static mut aux_seqinfo_untagged_ap_rep_enc_part: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "786:1"]
static mut aux_info_ap_rep_enc_part: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "786:1"]
pub static mut k5_atype_ap_rep_enc_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ap_rep_enc_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ap_rep_enc_part as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "790:1"]
pub static mut k5_atype_kdc_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_req_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "790:1"]
static mut aux_info_kdc_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "791:1"]
static mut aux_info_kdc_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "791:1"]
pub static mut k5_atype_kdc_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_req_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "791:1"]
static mut aux_info_kdc_req_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "791:1"]
pub static mut k5_atype_kdc_req_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_req_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "792:1"]
pub static mut k5_atype_kdc_req_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_req_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "792:1"]
static mut aux_info_kdc_req_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "792:1"]
static mut aux_info_kdc_req_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "792:1"]
pub static mut k5_atype_kdc_req_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_req_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "793:1"]
pub static mut k5_atype_kdc_req_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdc_req_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_kdc_req_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "793:1"]
static mut aux_info_kdc_req_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "794:33"]
static mut kdc_req_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_kdc_req_1 as *const atype_info,
         &k5_atype_kdc_req_2 as *const atype_info,
         &k5_atype_kdc_req_3 as *const atype_info,
         &k5_atype_kdc_req_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "798:1"]
static mut aux_seqinfo_kdc_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "798:1"]
pub static mut k5_atype_kdc_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_kdc_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_kdc_req as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "799:1"]
static mut aux_info_as_req: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "799:1"]
pub static mut k5_atype_as_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_as_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_as_req as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "800:1"]
static mut aux_info_tgs_req: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "800:1"]
pub static mut k5_atype_tgs_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tgs_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tgs_req as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "804:1"]
pub static mut k5_atype_as_req_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_as_req_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "804:1"]
static mut aux_info_as_req_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 10 as libc::c_int as krb5_msgtype as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "805:1"]
pub static mut k5_atype_as_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_as_req_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_as_req_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "805:1"]
static mut aux_info_as_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "806:1"]
static mut aux_info_tgs_req_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 12 as libc::c_int as krb5_msgtype as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "806:1"]
pub static mut k5_atype_tgs_req_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_tgs_req_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "807:1"]
static mut aux_info_tgs_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "807:1"]
pub static mut k5_atype_tgs_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tgs_req_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tgs_req_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "808:33"]
static mut as_req_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_kdc_req_1 as *const atype_info,
         &k5_atype_as_req_2 as *const atype_info,
         &k5_atype_kdc_req_3 as *const atype_info,
         &k5_atype_kdc_req_4 as *const atype_info]
    };
#[c2rust::src_loc = "812:33"]
static mut tgs_req_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_kdc_req_1 as *const atype_info,
         &k5_atype_tgs_req_2 as *const atype_info,
         &k5_atype_kdc_req_3 as *const atype_info,
         &k5_atype_kdc_req_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "816:1"]
static mut aux_seqinfo_untagged_as_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "816:1"]
pub static mut k5_atype_untagged_as_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_kdc_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_as_req as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "817:1"]
pub static mut k5_atype_as_req_encode: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_as_req_encode>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_as_req_encode as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "817:1"]
static mut aux_info_as_req_encode: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "818:1"]
static mut aux_seqinfo_untagged_tgs_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "818:1"]
pub static mut k5_atype_untagged_tgs_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_kdc_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_tgs_req as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "819:1"]
pub static mut k5_atype_tgs_req_encode: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tgs_req_encode>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tgs_req_encode as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "819:1"]
static mut aux_info_tgs_req_encode: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "821:1"]
static mut aux_info_safe_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 20 as libc::c_int as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "821:1"]
pub static mut k5_atype_safe_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_safe_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "822:1"]
static mut aux_info_safe_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "822:1"]
pub static mut k5_atype_safe_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_safe_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "823:1"]
pub static mut k5_atype_safe_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_safe_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "823:1"]
static mut aux_info_safe_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "824:1"]
static mut aux_info_safe_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "824:1"]
pub static mut k5_atype_safe_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_safe_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "825:1"]
static mut aux_info_safe_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "825:1"]
pub static mut k5_atype_safe_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_safe_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "825:1"]
static mut aux_info_safe_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "825:1"]
pub static mut k5_atype_safe_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_3_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "826:33"]
static mut safe_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_safe_0 as *const atype_info,
         &k5_atype_safe_1 as *const atype_info,
         &k5_atype_safe_2 as *const atype_info,
         &k5_atype_safe_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "829:1"]
pub static mut k5_atype_untagged_safe: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_safe>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_safe as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "829:1"]
static mut aux_seqinfo_untagged_safe: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "830:1"]
pub static mut k5_atype_safe: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_safe as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "830:1"]
static mut aux_info_safe: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
/* Hack to encode a KRB-SAFE with a pre-specified body encoding.  The integer-
 * immediate fields are borrowed from krb5_safe_fields above. */
#[c2rust::src_loc = "834:1"]
unsafe extern "C" fn aux_loadptr_saved_safe_body_ptr(mut p:
                                                         *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_saved_safe_body_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "834:1"]
static mut aux_info_saved_safe_body_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_saved_safe_body_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_saved_safe_body_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_der_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "834:1"]
unsafe extern "C" fn aux_storeptr_saved_safe_body_ptr(mut ptr:
                                                          *mut libc::c_void,
                                                      mut val:
                                                          *mut libc::c_void) {
    let ref mut fresh25 = *(val as *mut aux_type_saved_safe_body_ptr);
    *fresh25 = ptr as aux_type_saved_safe_body_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "834:1"]
pub static mut k5_atype_saved_safe_body_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_saved_safe_body_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_saved_safe_body_ptr as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "835:1"]
pub static mut k5_atype_safe_checksum_only: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_checksum_only>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_checksum_only as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "835:1"]
static mut aux_info_safe_checksum_only: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "836:1"]
static mut aux_info_safe_checksum_only_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_safe_checksum_only_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_safe_checksum_only_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_safe_checksum_only as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "836:1"]
pub static mut k5_atype_safe_checksum_only_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_safe_checksum_only_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_checksum_only_ptr as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "836:1"]
unsafe extern "C" fn aux_storeptr_safe_checksum_only_ptr(mut ptr:
                                                             *mut libc::c_void,
                                                         mut val:
                                                             *mut libc::c_void) {
    let ref mut fresh26 = *(val as *mut aux_type_safe_checksum_only_ptr);
    *fresh26 = ptr as aux_type_safe_checksum_only_ptr;
}
#[c2rust::src_loc = "836:1"]
unsafe extern "C" fn aux_loadptr_safe_checksum_only_ptr(mut p:
                                                            *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_safe_checksum_only_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "837:1"]
pub static mut k5_atype_safe_with_body_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_with_body_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_with_body_2 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "837:1"]
static mut aux_info_safe_with_body_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "837:1"]
pub static mut k5_atype_safe_with_body_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_with_body_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_with_body_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "837:1"]
static mut aux_info_safe_with_body_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "839:1"]
static mut aux_info_safe_with_body_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "839:1"]
pub static mut k5_atype_safe_with_body_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_with_body_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_with_body_3 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "839:1"]
static mut aux_info_safe_with_body_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "839:1"]
pub static mut k5_atype_safe_with_body_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_safe_with_body_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_with_body_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "841:33"]
static mut safe_with_body_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_safe_0 as *const atype_info,
         &k5_atype_safe_1 as *const atype_info,
         &k5_atype_safe_with_body_2 as *const atype_info,
         &k5_atype_safe_with_body_3 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "845:1"]
static mut aux_seqinfo_untagged_safe_with_body: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "845:1"]
pub static mut k5_atype_untagged_safe_with_body: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_safe_with_body>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_safe_with_body as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "847:1"]
pub static mut k5_atype_safe_with_body: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_safe_with_body>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_safe_with_body as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "847:1"]
static mut aux_info_safe_with_body: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
/* Third tag is [3] instead of [2]. */
#[c2rust::src_loc = "850:1"]
static mut aux_info_priv_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 21 as libc::c_int as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "850:1"]
pub static mut k5_atype_priv_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_priv_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "851:1"]
static mut aux_info_priv_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "851:1"]
pub static mut k5_atype_priv_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_priv_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "852:1"]
pub static mut k5_atype_priv_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_priv_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "852:1"]
static mut aux_info_priv_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "853:1"]
pub static mut k5_atype_priv_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_3_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "853:1"]
pub static mut k5_atype_priv_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_priv_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "853:1"]
static mut aux_info_priv_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "853:1"]
static mut aux_info_priv_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "854:33"]
static mut priv_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_priv_0 as *const atype_info,
         &k5_atype_priv_1 as *const atype_info,
         &k5_atype_priv_3 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "857:1"]
static mut aux_seqinfo_untagged_priv: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "857:1"]
pub static mut k5_atype_untagged_priv: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_priv>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_priv as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "858:1"]
static mut aux_info_priv: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "858:1"]
pub static mut k5_atype_priv: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_priv as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "860:1"]
unsafe extern "C" fn is_priv_timestamp_set(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_priv_enc_part = p as *const krb5_priv_enc_part;
    return ((*val).timestamp != 0 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "866:1"]
pub static mut k5_atype_priv_enc_part_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "866:1"]
static mut aux_info_priv_enc_part_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "866:1"]
pub static mut k5_atype_priv_enc_part_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "866:1"]
static mut aux_info_priv_enc_part_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "867:1"]
static mut aux_info_priv_enc_part_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "867:1"]
pub static mut k5_atype_priv_enc_part_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "867:1"]
static mut aux_info_priv_enc_part_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "867:1"]
pub static mut k5_atype_priv_enc_part_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "868:1"]
static mut aux_info_priv_enc_part_2_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "868:1"]
pub static mut k5_atype_priv_enc_part_2_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_2_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_2_def as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "868:1"]
static mut aux_info_priv_enc_part_2_def_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "868:1"]
pub static mut k5_atype_priv_enc_part_2_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_2_def_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_2_def_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "869:1"]
static mut aux_info_priv_enc_part_2: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_priv_timestamp_set as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_priv_enc_part_2_def as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "869:1"]
pub static mut k5_atype_priv_enc_part_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_2 as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "871:1"]
pub static mut k5_atype_priv_enc_part_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "871:1"]
static mut aux_info_priv_enc_part_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "871:1"]
pub static mut k5_atype_priv_enc_part_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "871:1"]
static mut aux_info_priv_enc_part_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "872:1"]
pub static mut k5_atype_priv_enc_part_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_4 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "872:1"]
pub static mut k5_atype_priv_enc_part_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "872:1"]
static mut aux_info_priv_enc_part_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "872:1"]
static mut aux_info_priv_enc_part_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "873:1"]
static mut aux_info_priv_enc_part_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "873:1"]
static mut aux_info_priv_enc_part_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "873:1"]
pub static mut k5_atype_priv_enc_part_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "873:1"]
pub static mut k5_atype_priv_enc_part_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part_5>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part_5 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "874:33"]
static mut priv_enc_part_fields: [*const atype_info; 6] =
    unsafe {
        [&k5_atype_priv_enc_part_0 as *const atype_info,
         &k5_atype_priv_enc_part_1 as *const atype_info,
         &k5_atype_priv_enc_part_2 as *const atype_info,
         &k5_atype_priv_enc_part_3 as *const atype_info,
         &k5_atype_priv_enc_part_4 as *const atype_info,
         &k5_atype_priv_enc_part_5 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "879:1"]
static mut aux_seqinfo_untagged_priv_enc_part: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "879:1"]
pub static mut k5_atype_untagged_priv_enc_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_priv_enc_part>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_priv_enc_part as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "880:1"]
pub static mut k5_atype_priv_enc_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_priv_enc_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_priv_enc_part as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "880:1"]
static mut aux_info_priv_enc_part: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "882:1"]
pub static mut k5_atype_cred_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_cred_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "882:1"]
static mut aux_info_cred_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 22 as libc::c_int as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "883:1"]
pub static mut k5_atype_cred_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cred_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "883:1"]
static mut aux_info_cred_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "884:1"]
pub static mut k5_atype_cred_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cred_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "884:1"]
static mut aux_info_cred_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "885:1"]
static mut aux_info_cred_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "885:1"]
pub static mut k5_atype_cred_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_2_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "885:1"]
static mut aux_info_cred_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "885:1"]
pub static mut k5_atype_cred_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cred_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "886:1"]
static mut aux_info_cred_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "886:1"]
pub static mut k5_atype_cred_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cred_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cred_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "886:1"]
static mut aux_info_cred_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "886:1"]
pub static mut k5_atype_cred_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cred_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cred_3_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "887:33"]
static mut cred_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_cred_0 as *const atype_info,
         &k5_atype_cred_1 as *const atype_info,
         &k5_atype_cred_2 as *const atype_info,
         &k5_atype_cred_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "890:1"]
pub static mut k5_atype_untagged_cred: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_cred>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_cred as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "890:1"]
static mut aux_seqinfo_untagged_cred: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "891:1"]
pub static mut k5_atype_krb5_cred: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_krb5_cred>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_krb5_cred as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "891:1"]
static mut aux_info_krb5_cred: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "893:1"]
unsafe extern "C" fn is_cred_timestamp_set(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const krb5_cred_enc_part = p as *const krb5_cred_enc_part;
    return ((*val).timestamp != 0 as libc::c_int) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "899:1"]
pub static mut k5_atype_enc_cred_part_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "899:1"]
static mut aux_info_enc_cred_part_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "899:1"]
pub static mut k5_atype_enc_cred_part_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "899:1"]
static mut aux_info_enc_cred_part_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "901:1"]
static mut aux_info_enc_cred_part_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "901:1"]
pub static mut k5_atype_enc_cred_part_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "901:1"]
static mut aux_info_enc_cred_part_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "901:1"]
pub static mut k5_atype_enc_cred_part_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "902:1"]
static mut aux_info_enc_cred_part_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "902:1"]
pub static mut k5_atype_enc_cred_part_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "902:1"]
pub static mut k5_atype_enc_cred_part_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "902:1"]
static mut aux_info_enc_cred_part_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "903:1"]
pub static mut k5_atype_enc_cred_part_3_def: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_3_def>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_3_def as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "903:1"]
pub static mut k5_atype_enc_cred_part_3_def_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_3_def_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_3_def_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "903:1"]
static mut aux_info_enc_cred_part_3_def: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "903:1"]
static mut aux_info_enc_cred_part_3_def_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "904:1"]
static mut aux_info_enc_cred_part_3: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_cred_timestamp_set as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_enc_cred_part_3_def as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "904:1"]
pub static mut k5_atype_enc_cred_part_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_3 as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "906:1"]
pub static mut k5_atype_enc_cred_part_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_4 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "906:1"]
pub static mut k5_atype_enc_cred_part_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "906:1"]
static mut aux_info_enc_cred_part_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "906:1"]
static mut aux_info_enc_cred_part_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "907:1"]
pub static mut k5_atype_enc_cred_part_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_5>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_5 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "907:1"]
pub static mut k5_atype_enc_cred_part_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "907:1"]
static mut aux_info_enc_cred_part_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "907:1"]
static mut aux_info_enc_cred_part_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "908:33"]
static mut enc_cred_part_fields: [*const atype_info; 6] =
    unsafe {
        [&k5_atype_enc_cred_part_0 as *const atype_info,
         &k5_atype_enc_cred_part_1 as *const atype_info,
         &k5_atype_enc_cred_part_2 as *const atype_info,
         &k5_atype_enc_cred_part_3 as *const atype_info,
         &k5_atype_enc_cred_part_4 as *const atype_info,
         &k5_atype_enc_cred_part_5 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "913:1"]
static mut aux_seqinfo_untagged_enc_cred_part: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "913:1"]
pub static mut k5_atype_untagged_enc_cred_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_cred_enc_part>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_enc_cred_part as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "914:1"]
static mut aux_info_enc_cred_part: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "914:1"]
pub static mut k5_atype_enc_cred_part: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_enc_cred_part>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_enc_cred_part as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "916:1"]
static mut aux_info_error_msg_type: immediate_info =
    {
        let mut init =
            immediate_info{val: 30 as libc::c_int as intmax_t,
                           err: 0 as libc::c_int,};
        init
    };
#[no_mangle]
#[c2rust::src_loc = "916:1"]
pub static mut k5_atype_error_msg_type: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_int_immediate,
                           size: 0 as libc::c_int as size_t,
                           tinfo:
                               &aux_info_error_msg_type as
                                   *const immediate_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "917:1"]
static mut aux_info_error_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "917:1"]
pub static mut k5_atype_error_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "918:1"]
static mut aux_info_error_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "918:1"]
pub static mut k5_atype_error_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "919:1"]
static mut aux_info_error_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "919:1"]
pub static mut k5_atype_error_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "919:1"]
static mut aux_info_error_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "919:1"]
pub static mut k5_atype_error_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "920:1"]
pub static mut k5_atype_error_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "920:1"]
static mut aux_info_error_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "920:1"]
pub static mut k5_atype_error_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "920:1"]
static mut aux_info_error_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "921:1"]
static mut aux_info_error_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "921:1"]
pub static mut k5_atype_error_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "921:1"]
static mut aux_info_error_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "921:1"]
pub static mut k5_atype_error_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "922:1"]
static mut aux_info_error_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "922:1"]
pub static mut k5_atype_error_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "922:1"]
static mut aux_info_error_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "922:1"]
pub static mut k5_atype_error_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "923:1"]
static mut aux_info_error_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "923:1"]
pub static mut k5_atype_error_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "923:1"]
pub static mut k5_atype_error_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "923:1"]
static mut aux_info_error_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "924:1"]
static mut aux_info_error_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "924:1"]
pub static mut k5_atype_error_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "924:1"]
static mut aux_info_error_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "924:1"]
pub static mut k5_atype_error_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_7>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "925:1"]
pub static mut k5_atype_error_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_8>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "925:1"]
static mut aux_info_error_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "925:1"]
pub static mut k5_atype_error_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_8_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "925:1"]
static mut aux_info_error_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "926:1"]
static mut aux_info_error_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "926:1"]
pub static mut k5_atype_error_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_9>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_9 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "926:1"]
static mut aux_info_error_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "926:1"]
pub static mut k5_atype_error_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_9_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "927:1"]
static mut aux_info_error_10: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "927:1"]
static mut aux_info_error_10_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "927:1"]
pub static mut k5_atype_error_10_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_10_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_10_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "927:1"]
pub static mut k5_atype_error_10: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_10>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_10 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "928:1"]
static mut aux_info_error_11_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "928:1"]
static mut aux_info_error_11: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "928:1"]
pub static mut k5_atype_error_11: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_11>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_11 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "928:1"]
pub static mut k5_atype_error_11_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_11_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_11_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "929:1"]
pub static mut k5_atype_error_12: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_error_12>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_error_12 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "929:1"]
static mut aux_info_error_12: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "929:1"]
pub static mut k5_atype_error_12_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_error_12_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_error_12_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "929:1"]
static mut aux_info_error_12_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "930:33"]
static mut error_fields: [*const atype_info; 13] =
    unsafe {
        [&k5_atype_error_0 as *const atype_info,
         &k5_atype_error_1 as *const atype_info,
         &k5_atype_error_2 as *const atype_info,
         &k5_atype_error_3 as *const atype_info,
         &k5_atype_error_4 as *const atype_info,
         &k5_atype_error_5 as *const atype_info,
         &k5_atype_error_6 as *const atype_info,
         &k5_atype_error_7 as *const atype_info,
         &k5_atype_error_8 as *const atype_info,
         &k5_atype_error_9 as *const atype_info,
         &k5_atype_error_10 as *const atype_info,
         &k5_atype_error_11 as *const atype_info,
         &k5_atype_error_12 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "936:1"]
static mut aux_seqinfo_untagged_krb5_error: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "936:1"]
pub static mut k5_atype_untagged_krb5_error: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_error>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_untagged_krb5_error as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "937:1"]
pub static mut k5_atype_krb5_error: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_krb5_error>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_krb5_error as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "937:1"]
static mut aux_info_krb5_error: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "939:1"]
static mut aux_info_pa_enc_ts_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "939:1"]
pub static mut k5_atype_pa_enc_ts_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_enc_ts_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_enc_ts_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "939:1"]
static mut aux_info_pa_enc_ts_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "939:1"]
pub static mut k5_atype_pa_enc_ts_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_enc_ts_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_enc_ts_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "940:1"]
pub static mut k5_atype_pa_enc_ts_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_enc_ts_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_enc_ts_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "940:1"]
static mut aux_info_pa_enc_ts_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "940:1"]
pub static mut k5_atype_pa_enc_ts_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_enc_ts_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_enc_ts_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "940:1"]
static mut aux_info_pa_enc_ts_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "941:33"]
static mut pa_enc_ts_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_pa_enc_ts_0 as *const atype_info,
         &k5_atype_pa_enc_ts_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "944:1"]
static mut aux_seqinfo_pa_enc_ts: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "944:1"]
pub static mut k5_atype_pa_enc_ts: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_enc_ts>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_enc_ts as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "946:1"]
pub static mut k5_atype_setpw_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_setpw_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_setpw_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "946:1"]
static mut aux_info_setpw_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "946:1"]
pub static mut k5_atype_setpw_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_setpw_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_setpw_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "946:1"]
static mut aux_info_setpw_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "947:1"]
pub static mut k5_atype_setpw_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_setpw_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_setpw_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "947:1"]
pub static mut k5_atype_setpw_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_setpw_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_setpw_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "947:1"]
static mut aux_info_setpw_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "947:1"]
static mut aux_info_setpw_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "948:1"]
static mut aux_info_setpw_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "948:1"]
pub static mut k5_atype_setpw_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_setpw_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_setpw_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "948:1"]
static mut aux_info_setpw_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "948:1"]
pub static mut k5_atype_setpw_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_setpw_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_setpw_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "949:33"]
static mut setpw_req_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_setpw_0 as *const atype_info,
         &k5_atype_setpw_1 as *const atype_info,
         &k5_atype_setpw_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "952:1"]
pub static mut k5_atype_setpw_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_setpw_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_setpw_req as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "952:1"]
static mut aux_seqinfo_setpw_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "955:1"]
static mut aux_info_pa_for_user_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "955:1"]
pub static mut k5_atype_pa_for_user_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "955:1"]
static mut aux_info_pa_for_user_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "955:1"]
pub static mut k5_atype_pa_for_user_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "956:1"]
static mut aux_info_pa_for_user_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "956:1"]
pub static mut k5_atype_pa_for_user_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "956:1"]
static mut aux_info_pa_for_user_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "956:1"]
pub static mut k5_atype_pa_for_user_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "957:1"]
pub static mut k5_atype_pa_for_user_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "957:1"]
static mut aux_info_pa_for_user_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "957:1"]
pub static mut k5_atype_pa_for_user_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "957:1"]
static mut aux_info_pa_for_user_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "958:1"]
static mut aux_info_pa_for_user_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "958:1"]
pub static mut k5_atype_pa_for_user_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "958:1"]
static mut aux_info_pa_for_user_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "958:1"]
pub static mut k5_atype_pa_for_user_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_for_user_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_for_user_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "959:33"]
static mut pa_for_user_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_pa_for_user_0 as *const atype_info,
         &k5_atype_pa_for_user_1 as *const atype_info,
         &k5_atype_pa_for_user_2 as *const atype_info,
         &k5_atype_pa_for_user_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "963:1"]
pub static mut k5_atype_pa_for_user: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_for_user>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_for_user as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "963:1"]
static mut aux_seqinfo_pa_for_user: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
/* [MS-SFU] Section 2.2.2. */
/* The user principal name may be absent, but the realm is required. */
#[c2rust::src_loc = "967:1"]
unsafe extern "C" fn is_s4u_principal_present(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: krb5_const_principal = *(p as *mut krb5_const_principal);
    return ((*val).length != 0 as libc::c_int) as libc::c_int;
}
#[c2rust::src_loc = "973:1"]
static mut aux_info_opt_s4u_principal: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(is_s4u_principal_present as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_principal as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "973:1"]
pub static mut k5_atype_opt_s4u_principal: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_s4u_principal>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_s4u_principal as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "974:1"]
static mut aux_info_s4u_userid_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "974:1"]
pub static mut k5_atype_s4u_userid_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "974:1"]
static mut aux_info_s4u_userid_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "974:1"]
pub static mut k5_atype_s4u_userid_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "975:1"]
pub static mut k5_atype_s4u_userid_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "975:1"]
pub static mut k5_atype_s4u_userid_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "975:1"]
static mut aux_info_s4u_userid_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "975:1"]
static mut aux_info_s4u_userid_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "976:1"]
static mut aux_info_s4u_userid_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "976:1"]
pub static mut k5_atype_s4u_userid_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "976:1"]
static mut aux_info_s4u_userid_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "976:1"]
pub static mut k5_atype_s4u_userid_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "977:1"]
pub static mut k5_atype_s4u_userid_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "977:1"]
static mut aux_info_s4u_userid_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "977:1"]
pub static mut k5_atype_s4u_userid_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "977:1"]
static mut aux_info_s4u_userid_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "978:1"]
pub static mut k5_atype_s4u_userid_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "978:1"]
static mut aux_info_s4u_userid_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "978:1"]
pub static mut k5_atype_s4u_userid_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_s4u_userid_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_s4u_userid_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "978:1"]
static mut aux_info_s4u_userid_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "979:33"]
static mut s4u_userid_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_s4u_userid_0 as *const atype_info,
         &k5_atype_s4u_userid_1 as *const atype_info,
         &k5_atype_s4u_userid_2 as *const atype_info,
         &k5_atype_s4u_userid_3 as *const atype_info,
         &k5_atype_s4u_userid_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "983:1"]
static mut aux_seqinfo_s4u_userid: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "983:1"]
pub static mut k5_atype_s4u_userid: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_s4u_userid>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_s4u_userid as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "985:1"]
pub static mut k5_atype_pa_s4u_x509_user_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_s4u_x509_user_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_s4u_x509_user_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "985:1"]
static mut aux_info_pa_s4u_x509_user_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "985:1"]
pub static mut k5_atype_pa_s4u_x509_user_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_s4u_x509_user_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_s4u_x509_user_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "985:1"]
static mut aux_info_pa_s4u_x509_user_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "986:1"]
static mut aux_info_pa_s4u_x509_user_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "986:1"]
pub static mut k5_atype_pa_s4u_x509_user_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_s4u_x509_user_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_s4u_x509_user_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "986:1"]
pub static mut k5_atype_pa_s4u_x509_user_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_s4u_x509_user_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_s4u_x509_user_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "986:1"]
static mut aux_info_pa_s4u_x509_user_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "987:33"]
static mut pa_s4u_x509_user_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_pa_s4u_x509_user_0 as *const atype_info,
         &k5_atype_pa_s4u_x509_user_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "990:1"]
pub static mut k5_atype_pa_s4u_x509_user: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_s4u_x509_user>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_s4u_x509_user as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "990:1"]
static mut aux_seqinfo_pa_s4u_x509_user: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "992:1"]
pub static mut k5_atype_pa_pac_req_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pac_req_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pac_req_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "992:1"]
static mut aux_info_pa_pac_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "992:1"]
static mut aux_info_pa_pac_req_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "992:1"]
pub static mut k5_atype_pa_pac_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pac_req_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pac_req_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "993:33"]
static mut pa_pac_req_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_pa_pac_req_0 as *const atype_info] };
#[no_mangle]
#[c2rust::src_loc = "996:1"]
pub static mut k5_atype_pa_pac_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_pac_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_pac_req as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "996:1"]
static mut aux_seqinfo_pa_pac_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
/* RFC 4537 */
#[no_mangle]
#[c2rust::src_loc = "999:1"]
pub static mut k5_atype_etype_list: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_etype_list>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_etype_list as *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "999:1"]
pub static mut aux_info_etype_list: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "1002:1"]
pub static mut k5_atype_fast_armor_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armor_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armor_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1002:1"]
static mut aux_info_fast_armor_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1002:1"]
pub static mut k5_atype_fast_armor_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armor_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armor_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1002:1"]
static mut aux_info_fast_armor_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1003:1"]
pub static mut k5_atype_fast_armor_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armor_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armor_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1003:1"]
static mut aux_info_fast_armor_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1003:1"]
pub static mut k5_atype_fast_armor_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armor_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armor_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1003:1"]
static mut aux_info_fast_armor_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1004:33"]
static mut fast_armor_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_fast_armor_0 as *const atype_info,
         &k5_atype_fast_armor_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1007:1"]
pub static mut k5_atype_fast_armor: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_fast_armor>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_fast_armor as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1007:1"]
static mut aux_seqinfo_fast_armor: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1008:1"]
pub static mut k5_atype_ptr_fast_armor: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_fast_armor>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_fast_armor as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1008:1"]
static mut aux_info_ptr_fast_armor: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_fast_armor as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_fast_armor as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_fast_armor as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1008:1"]
unsafe extern "C" fn aux_loadptr_ptr_fast_armor(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_fast_armor) as *mut libc::c_void;
}
#[c2rust::src_loc = "1008:1"]
unsafe extern "C" fn aux_storeptr_ptr_fast_armor(mut ptr: *mut libc::c_void,
                                                 mut val: *mut libc::c_void) {
    let ref mut fresh27 = *(val as *mut aux_type_ptr_fast_armor);
    *fresh27 = ptr as aux_type_ptr_fast_armor;
}
#[c2rust::src_loc = "1009:1"]
unsafe extern "C" fn aux_present_opt_ptr_fast_armor(mut p:
                                                        *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_fast_armor) !=
                0 as aux_type_ptr_fast_armor) as libc::c_int;
}
#[c2rust::src_loc = "1009:1"]
static mut aux_info_opt_ptr_fast_armor: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_fast_armor as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_fast_armor as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1009:1"]
pub static mut k5_atype_opt_ptr_fast_armor: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_fast_armor>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_fast_armor as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1011:1"]
static mut aux_info_fast_armored_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1011:1"]
pub static mut k5_atype_fast_armored_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armored_req_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armored_req_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1011:1"]
pub static mut k5_atype_fast_armored_req_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armored_req_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armored_req_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1011:1"]
static mut aux_info_fast_armored_req_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1013:1"]
static mut aux_info_fast_armored_req_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1013:1"]
pub static mut k5_atype_fast_armored_req_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armored_req_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armored_req_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1013:1"]
static mut aux_info_fast_armored_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1013:1"]
pub static mut k5_atype_fast_armored_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armored_req_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armored_req_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1014:1"]
pub static mut k5_atype_fast_armored_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armored_req_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armored_req_2 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1014:1"]
static mut aux_info_fast_armored_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1014:1"]
pub static mut k5_atype_fast_armored_req_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_armored_req_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_armored_req_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1014:1"]
static mut aux_info_fast_armored_req_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1016:33"]
static mut fast_armored_req_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_fast_armored_req_0 as *const atype_info,
         &k5_atype_fast_armored_req_1 as *const atype_info,
         &k5_atype_fast_armored_req_2 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1020:1"]
static mut aux_seqinfo_fast_armored_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1020:1"]
pub static mut k5_atype_fast_armored_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_fast_armored_req>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_fast_armored_req as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1024:1"]
static mut aux_info_pa_fx_fast_request: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1024:1"]
pub static mut k5_atype_pa_fx_fast_request: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_fx_fast_request>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_fx_fast_request as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1027:1"]
pub static mut k5_atype_fast_req_padata: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_padata>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_padata as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1027:1"]
static mut aux_info_fast_req_padata: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1028:1"]
unsafe extern "C" fn aux_loadptr_ptr_fast_req_padata(mut p:
                                                         *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_fast_req_padata) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "1028:1"]
pub static mut k5_atype_ptr_fast_req_padata: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_fast_req_padata>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_fast_req_padata as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1028:1"]
static mut aux_info_ptr_fast_req_padata: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_fast_req_padata as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_fast_req_padata as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_fast_req_padata as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1028:1"]
unsafe extern "C" fn aux_storeptr_ptr_fast_req_padata(mut ptr:
                                                          *mut libc::c_void,
                                                      mut val:
                                                          *mut libc::c_void) {
    let ref mut fresh28 = *(val as *mut aux_type_ptr_fast_req_padata);
    *fresh28 = ptr as aux_type_ptr_fast_req_padata;
}
#[c2rust::src_loc = "1029:1"]
static mut aux_info_ptr_kdc_req_body: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_kdc_req_body as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_kdc_req_body as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_kdc_req_body as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1029:1"]
pub static mut k5_atype_ptr_kdc_req_body: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_kdc_req_body>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_kdc_req_body as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1029:1"]
unsafe extern "C" fn aux_storeptr_ptr_kdc_req_body(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh29 = *(val as *mut aux_type_ptr_kdc_req_body);
    *fresh29 = ptr as aux_type_ptr_kdc_req_body;
}
#[c2rust::src_loc = "1029:1"]
unsafe extern "C" fn aux_loadptr_ptr_kdc_req_body(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_kdc_req_body) as *mut libc::c_void;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1030:1"]
static mut aux_info_fast_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1030:1"]
static mut aux_info_fast_req_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1030:1"]
pub static mut k5_atype_fast_req_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1030:1"]
pub static mut k5_atype_fast_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1031:1"]
pub static mut k5_atype_fast_req_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1031:1"]
static mut aux_info_fast_req_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1031:1"]
pub static mut k5_atype_fast_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1031:1"]
static mut aux_info_fast_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1032:1"]
static mut aux_info_fast_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1032:1"]
pub static mut k5_atype_fast_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1032:1"]
pub static mut k5_atype_fast_req_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_req_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_req_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1032:1"]
static mut aux_info_fast_req_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1033:33"]
static mut fast_req_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_fast_req_0 as *const atype_info,
         &k5_atype_fast_req_1 as *const atype_info,
         &k5_atype_fast_req_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1036:1"]
pub static mut k5_atype_fast_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_fast_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_fast_req as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1036:1"]
static mut aux_seqinfo_fast_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1038:1"]
pub static mut k5_atype_fast_finished_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1038:1"]
static mut aux_info_fast_finished_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1038:1"]
pub static mut k5_atype_fast_finished_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1038:1"]
static mut aux_info_fast_finished_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1039:1"]
static mut aux_info_fast_finished_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1039:1"]
pub static mut k5_atype_fast_finished_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1039:1"]
pub static mut k5_atype_fast_finished_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1039:1"]
static mut aux_info_fast_finished_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1040:1"]
pub static mut k5_atype_fast_finished_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1040:1"]
static mut aux_info_fast_finished_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1040:1"]
pub static mut k5_atype_fast_finished_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1040:1"]
static mut aux_info_fast_finished_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1041:1"]
pub static mut k5_atype_fast_finished_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1041:1"]
static mut aux_info_fast_finished_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1041:1"]
pub static mut k5_atype_fast_finished_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1041:1"]
static mut aux_info_fast_finished_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1042:1"]
pub static mut k5_atype_fast_finished_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1042:1"]
static mut aux_info_fast_finished_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1042:1"]
pub static mut k5_atype_fast_finished_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_finished_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_finished_4 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1042:1"]
static mut aux_info_fast_finished_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1043:33"]
static mut fast_finished_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_fast_finished_0 as *const atype_info,
         &k5_atype_fast_finished_1 as *const atype_info,
         &k5_atype_fast_finished_2 as *const atype_info,
         &k5_atype_fast_finished_3 as *const atype_info,
         &k5_atype_fast_finished_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1048:1"]
static mut aux_seqinfo_fast_finished: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1048:1"]
pub static mut k5_atype_fast_finished: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_fast_finished>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_fast_finished as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1049:1"]
static mut aux_info_ptr_fast_finished: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_fast_finished as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_fast_finished as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_fast_finished as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1049:1"]
pub static mut k5_atype_ptr_fast_finished: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_fast_finished>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_fast_finished as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1049:1"]
unsafe extern "C" fn aux_storeptr_ptr_fast_finished(mut ptr:
                                                        *mut libc::c_void,
                                                    mut val:
                                                        *mut libc::c_void) {
    let ref mut fresh30 = *(val as *mut aux_type_ptr_fast_finished);
    *fresh30 = ptr as aux_type_ptr_fast_finished;
}
#[c2rust::src_loc = "1049:1"]
unsafe extern "C" fn aux_loadptr_ptr_fast_finished(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_fast_finished) as *mut libc::c_void;
}
#[c2rust::src_loc = "1050:1"]
unsafe extern "C" fn aux_present_opt_ptr_fast_finished(mut p:
                                                           *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_fast_finished) !=
                0 as aux_type_ptr_fast_finished) as libc::c_int;
}
#[c2rust::src_loc = "1050:1"]
static mut aux_info_opt_ptr_fast_finished: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_fast_finished as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_fast_finished as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1050:1"]
pub static mut k5_atype_opt_ptr_fast_finished: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_fast_finished>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_fast_finished as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1052:1"]
pub static mut k5_atype_fast_response_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1052:1"]
static mut aux_info_fast_response_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1052:1"]
pub static mut k5_atype_fast_response_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1052:1"]
static mut aux_info_fast_response_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1053:1"]
static mut aux_info_fast_response_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1053:1"]
static mut aux_info_fast_response_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1053:1"]
pub static mut k5_atype_fast_response_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1053:1"]
pub static mut k5_atype_fast_response_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1055:1"]
pub static mut k5_atype_fast_response_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1055:1"]
static mut aux_info_fast_response_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1055:1"]
static mut aux_info_fast_response_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1055:1"]
pub static mut k5_atype_fast_response_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1057:1"]
pub static mut k5_atype_fast_response_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1057:1"]
static mut aux_info_fast_response_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1057:1"]
pub static mut k5_atype_fast_response_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_fast_response_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_fast_response_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1057:1"]
static mut aux_info_fast_response_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1058:33"]
static mut fast_response_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_fast_response_0 as *const atype_info,
         &k5_atype_fast_response_1 as *const atype_info,
         &k5_atype_fast_response_2 as *const atype_info,
         &k5_atype_fast_response_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1062:1"]
pub static mut k5_atype_fast_response: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_fast_response>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_fast_response as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1062:1"]
static mut aux_seqinfo_fast_response: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1064:1"]
pub static mut k5_atype_fast_rep_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_fast_rep_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_fast_rep_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1064:1"]
static mut aux_info_fast_rep_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1065:33"]
static mut fast_rep_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_fast_rep_0 as *const atype_info] };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1068:1"]
static mut aux_seqinfo_fast_rep: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1068:1"]
pub static mut k5_atype_fast_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_enc_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_fast_rep as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1072:1"]
pub static mut k5_atype_pa_fx_fast_reply: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_fx_fast_reply>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_fx_fast_reply as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1072:1"]
static mut aux_info_pa_fx_fast_reply: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1075:1"]
static mut aux_info_ad_kdcissued_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1075:1"]
pub static mut k5_atype_ad_kdcissued_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1075:1"]
static mut aux_info_ad_kdcissued_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1075:1"]
pub static mut k5_atype_ad_kdcissued_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1076:1"]
static mut aux_info_ad_kdcissued_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1076:1"]
pub static mut k5_atype_ad_kdcissued_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1076:1"]
static mut aux_info_ad_kdcissued_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1076:1"]
pub static mut k5_atype_ad_kdcissued_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1078:1"]
pub static mut k5_atype_ad_kdcissued_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1078:1"]
pub static mut k5_atype_ad_kdcissued_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1078:1"]
static mut aux_info_ad_kdcissued_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1078:1"]
static mut aux_info_ad_kdcissued_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1079:1"]
pub static mut k5_atype_ad_kdcissued_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_3 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1079:1"]
static mut aux_info_ad_kdcissued_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1079:1"]
pub static mut k5_atype_ad_kdcissued_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_ad_kdcissued_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ad_kdcissued_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1079:1"]
static mut aux_info_ad_kdcissued_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1080:33"]
static mut ad_kdcissued_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_ad_kdcissued_0 as *const atype_info,
         &k5_atype_ad_kdcissued_1 as *const atype_info,
         &k5_atype_ad_kdcissued_2 as *const atype_info,
         &k5_atype_ad_kdcissued_3 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1084:1"]
static mut aux_seqinfo_ad_kdc_issued: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1084:1"]
pub static mut k5_atype_ad_kdc_issued: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ad_kdcissued>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_ad_kdc_issued as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1086:1"]
pub static mut k5_atype_princ_plus_realm_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_princ_plus_realm_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_princ_plus_realm_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1086:1"]
static mut aux_info_princ_plus_realm_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1087:1"]
pub static mut k5_atype_princ_plus_realm_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_princ_plus_realm_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_princ_plus_realm_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1087:1"]
static mut aux_info_princ_plus_realm_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1088:33"]
static mut princ_plus_realm_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_princ_plus_realm_0 as *const atype_info,
         &k5_atype_princ_plus_realm_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1091:1"]
static mut aux_seqinfo_princ_plus_realm_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1091:1"]
pub static mut k5_atype_princ_plus_realm_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_principal_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_princ_plus_realm_data as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1093:1"]
pub static mut k5_atype_princ_plus_realm: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_princ_plus_realm>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_princ_plus_realm as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1093:1"]
static mut aux_info_princ_plus_realm: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_princ_plus_realm as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_princ_plus_realm as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_princ_plus_realm_data as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1093:1"]
unsafe extern "C" fn aux_storeptr_princ_plus_realm(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh31 = *(val as *mut aux_type_princ_plus_realm);
    *fresh31 = ptr as aux_type_princ_plus_realm;
}
#[c2rust::src_loc = "1093:1"]
unsafe extern "C" fn aux_loadptr_princ_plus_realm(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_princ_plus_realm) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "1094:1"]
pub static mut k5_atype_seqof_princ_plus_realm: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_princ_plus_realm>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_princ_plus_realm as *const atype_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1095:1"]
static mut aux_info_ptr_seqof_princ_plus_realm: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_princ_plus_realm as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_princ_plus_realm as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_princ_plus_realm as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1095:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_princ_plus_realm(mut ptr:
                                                                 *mut libc::c_void,
                                                             mut val:
                                                                 *mut libc::c_void) {
    let ref mut fresh32 = *(val as *mut aux_type_ptr_seqof_princ_plus_realm);
    *fresh32 = ptr as aux_type_ptr_seqof_princ_plus_realm;
}
#[no_mangle]
#[c2rust::src_loc = "1095:1"]
pub static mut k5_atype_ptr_seqof_princ_plus_realm: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_princ_plus_realm>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_princ_plus_realm as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1095:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_princ_plus_realm(mut p:
                                                                *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_princ_plus_realm) as
               *mut libc::c_void;
}
#[c2rust::src_loc = "1096:1"]
static mut aux_info_opt_ptr_seqof_princ_plus_realm: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_seqof_princ_plus_realm
                                           as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_seqof_princ_plus_realm as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1096:1"]
pub static mut k5_atype_opt_ptr_seqof_princ_plus_realm: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_seqof_princ_plus_realm>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_seqof_princ_plus_realm as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1096:1"]
unsafe extern "C" fn aux_present_opt_ptr_seqof_princ_plus_realm(mut p:
                                                                    *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_ptr_seqof_princ_plus_realm =
        p as *const aux_type_ptr_seqof_princ_plus_realm;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1099:1"]
pub static mut k5_atype_spdata_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1099:1"]
static mut aux_info_spdata_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1099:1"]
pub static mut k5_atype_spdata_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1099:1"]
static mut aux_info_spdata_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1100:1"]
pub static mut k5_atype_spdata_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1100:1"]
static mut aux_info_spdata_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1100:1"]
pub static mut k5_atype_spdata_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1100:1"]
static mut aux_info_spdata_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1101:1"]
static mut aux_info_spdata_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1101:1"]
pub static mut k5_atype_spdata_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1101:1"]
static mut aux_info_spdata_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1101:1"]
pub static mut k5_atype_spdata_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1103:1"]
pub static mut k5_atype_spdata_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1103:1"]
pub static mut k5_atype_spdata_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1103:1"]
static mut aux_info_spdata_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1103:1"]
static mut aux_info_spdata_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1105:1"]
pub static mut k5_atype_spdata_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1105:1"]
static mut aux_info_spdata_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1105:1"]
pub static mut k5_atype_spdata_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spdata_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spdata_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1105:1"]
static mut aux_info_spdata_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1107:33"]
static mut ad_signedpath_data_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_spdata_0 as *const atype_info,
         &k5_atype_spdata_1 as *const atype_info,
         &k5_atype_spdata_2 as *const atype_info,
         &k5_atype_spdata_3 as *const atype_info,
         &k5_atype_spdata_4 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1111:1"]
pub static mut k5_atype_ad_signedpath_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ad_signedpath_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_ad_signedpath_data as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1111:1"]
static mut aux_seqinfo_ad_signedpath_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1114:1"]
pub static mut k5_atype_signedpath_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1114:1"]
static mut aux_info_signedpath_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1114:1"]
pub static mut k5_atype_signedpath_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1114:1"]
static mut aux_info_signedpath_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1115:1"]
static mut aux_info_signedpath_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1115:1"]
pub static mut k5_atype_signedpath_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1115:1"]
static mut aux_info_signedpath_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1115:1"]
pub static mut k5_atype_signedpath_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1116:1"]
pub static mut k5_atype_signedpath_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1116:1"]
static mut aux_info_signedpath_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1116:1"]
pub static mut k5_atype_signedpath_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1116:1"]
static mut aux_info_signedpath_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1118:1"]
static mut aux_info_signedpath_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1118:1"]
pub static mut k5_atype_signedpath_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1118:1"]
static mut aux_info_signedpath_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1118:1"]
pub static mut k5_atype_signedpath_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_signedpath_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_signedpath_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1120:33"]
static mut ad_signedpath_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_signedpath_0 as *const atype_info,
         &k5_atype_signedpath_1 as *const atype_info,
         &k5_atype_signedpath_2 as *const atype_info,
         &k5_atype_signedpath_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1124:1"]
pub static mut k5_atype_ad_signedpath: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_ad_signedpath>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_ad_signedpath as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1124:1"]
static mut aux_seqinfo_ad_signedpath: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
/* First context tag is 1, not 0. */
// Initialized in run_static_initializers
#[c2rust::src_loc = "1127:1"]
static mut aux_info_iakerb_header_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1127:1"]
static mut aux_info_iakerb_header_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1127:1"]
pub static mut k5_atype_iakerb_header_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_iakerb_header_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_iakerb_header_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1127:1"]
pub static mut k5_atype_iakerb_header_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_iakerb_header_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_iakerb_header_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1128:1"]
static mut aux_info_iakerb_header_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1128:1"]
pub static mut k5_atype_iakerb_header_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_iakerb_header_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_iakerb_header_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1128:1"]
static mut aux_info_iakerb_header_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1128:1"]
pub static mut k5_atype_iakerb_header_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_iakerb_header_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_iakerb_header_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1129:33"]
static mut iakerb_header_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_iakerb_header_1 as *const atype_info,
         &k5_atype_iakerb_header_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1132:1"]
pub static mut k5_atype_iakerb_header: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_iakerb_header>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_iakerb_header as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1132:1"]
static mut aux_seqinfo_iakerb_header: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
/* First context tag is 1, not 0. */
// Initialized in run_static_initializers
#[c2rust::src_loc = "1135:1"]
static mut aux_info_iakerb_finished_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1135:1"]
pub static mut k5_atype_iakerb_finished_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_iakerb_finished_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_iakerb_finished_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1135:1"]
static mut aux_info_iakerb_finished_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1135:1"]
pub static mut k5_atype_iakerb_finished_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_iakerb_finished_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_iakerb_finished_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1136:33"]
static mut iakerb_finished_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_iakerb_finished_0 as *const atype_info] };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1139:1"]
static mut aux_seqinfo_iakerb_finished: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1139:1"]
pub static mut k5_atype_iakerb_finished: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_iakerb_finished>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_iakerb_finished as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1144:1"]
pub unsafe extern "C" fn encode_krb5_authenticator(mut rep:
                                                       *const aux_type_authenticator,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_authenticator, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1145:1"]
pub unsafe extern "C" fn decode_krb5_authenticator(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_authenticator)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_authenticator;
    ret = k5_asn1_full_decode(code, &k5_atype_authenticator, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_authenticator;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1146:1"]
pub unsafe extern "C" fn encode_krb5_ticket(mut rep: *const aux_type_ticket,
                                            mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_ticket,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1147:1"]
pub unsafe extern "C" fn decode_krb5_ticket(mut code: *const krb5_data,
                                            mut rep_out:
                                                *mut *mut aux_type_ticket)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_ticket;
    ret = k5_asn1_full_decode(code, &k5_atype_ticket, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_ticket;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1148:1"]
pub unsafe extern "C" fn encode_krb5_encryption_key(mut rep:
                                                        *const aux_type_encryption_key,
                                                    mut code_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_encryption_key, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1149:1"]
pub unsafe extern "C" fn decode_krb5_encryption_key(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut aux_type_encryption_key)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_encryption_key;
    ret = k5_asn1_full_decode(code, &k5_atype_encryption_key, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_encryption_key;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1150:1"]
pub unsafe extern "C" fn encode_krb5_enc_tkt_part(mut rep:
                                                      *const aux_type_enc_tkt_part,
                                                  mut code_out:
                                                      *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_enc_tkt_part, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1151:1"]
pub unsafe extern "C" fn decode_krb5_enc_tkt_part(mut code: *const krb5_data,
                                                  mut rep_out:
                                                      *mut *mut aux_type_enc_tkt_part)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_enc_tkt_part;
    ret = k5_asn1_full_decode(code, &k5_atype_enc_tkt_part, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_enc_tkt_part;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1153:1"]
pub unsafe extern "C" fn krb5_decode_ticket(mut code: *const krb5_data,
                                            mut repptr: *mut *mut krb5_ticket)
 -> krb5_error_code {
    return decode_krb5_ticket(code, repptr);
}
/*
 * For backwards compatibility, we encode both EncASRepPart and EncTGSRepPart
 * with application tag 26.  On decode, we accept either app tag and set the
 * msg_type field of the resulting structure.  This could be simplified and
 * pushed up into libkrb5.
 */
#[no_mangle]
#[c2rust::src_loc = "1165:1"]
pub unsafe extern "C" fn encode_krb5_enc_kdc_rep_part(mut rep:
                                                          *const aux_type_enc_tgs_rep_part,
                                                      mut code_out:
                                                          *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_enc_tgs_rep_part, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1166:1"]
pub unsafe extern "C" fn decode_krb5_enc_kdc_rep_part(mut code:
                                                          *const krb5_data,
                                                      mut rep_out:
                                                          *mut *mut krb5_enc_kdc_rep_part)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut krb5_enc_kdc_rep_part = 0 as *mut krb5_enc_kdc_rep_part;
    let mut rep_ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut msg_type: krb5_msgtype = 13 as libc::c_int as krb5_msgtype;
    *rep_out = 0 as *mut krb5_enc_kdc_rep_part;
    ret = k5_asn1_full_decode(code, &k5_atype_enc_tgs_rep_part, &mut rep_ptr);
    if ret as libc::c_long == 1859794438 as libc::c_long {
        msg_type = 11 as libc::c_int as krb5_msgtype;
        ret =
            k5_asn1_full_decode(code, &k5_atype_enc_as_rep_part, &mut rep_ptr)
    }
    if ret != 0 { return ret }
    rep = rep_ptr as *mut krb5_enc_kdc_rep_part;
    (*rep).msg_type = msg_type;
    *rep_out = rep;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1189:1"]
pub unsafe extern "C" fn encode_krb5_as_rep(mut rep: *const aux_type_as_rep,
                                            mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_as_rep,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1190:1"]
pub unsafe extern "C" fn decode_krb5_as_rep(mut code: *const krb5_data,
                                            mut rep_out:
                                                *mut *mut aux_type_as_rep)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_as_rep;
    ret = k5_asn1_full_decode(code, &k5_atype_as_rep, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_as_rep;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1191:1"]
pub unsafe extern "C" fn encode_krb5_tgs_rep(mut rep: *const aux_type_tgs_rep,
                                             mut code_out:
                                                 *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_tgs_rep,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1192:1"]
pub unsafe extern "C" fn decode_krb5_tgs_rep(mut code: *const krb5_data,
                                             mut rep_out:
                                                 *mut *mut aux_type_tgs_rep)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_tgs_rep;
    ret = k5_asn1_full_decode(code, &k5_atype_tgs_rep, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_tgs_rep;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1193:1"]
pub unsafe extern "C" fn encode_krb5_ap_req(mut rep: *const aux_type_ap_req,
                                            mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_ap_req,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1194:1"]
pub unsafe extern "C" fn decode_krb5_ap_req(mut code: *const krb5_data,
                                            mut rep_out:
                                                *mut *mut aux_type_ap_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_ap_req;
    ret = k5_asn1_full_decode(code, &k5_atype_ap_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_ap_req;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1195:1"]
pub unsafe extern "C" fn encode_krb5_ap_rep(mut rep: *const aux_type_ap_rep,
                                            mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_ap_rep,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1196:1"]
pub unsafe extern "C" fn decode_krb5_ap_rep(mut code: *const krb5_data,
                                            mut rep_out:
                                                *mut *mut aux_type_ap_rep)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_ap_rep;
    ret = k5_asn1_full_decode(code, &k5_atype_ap_rep, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_ap_rep;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1197:1"]
pub unsafe extern "C" fn encode_krb5_ap_rep_enc_part(mut rep:
                                                         *const aux_type_ap_rep_enc_part,
                                                     mut code_out:
                                                         *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_ap_rep_enc_part, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1198:1"]
pub unsafe extern "C" fn decode_krb5_ap_rep_enc_part(mut code:
                                                         *const krb5_data,
                                                     mut rep_out:
                                                         *mut *mut aux_type_ap_rep_enc_part)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_ap_rep_enc_part;
    ret = k5_asn1_full_decode(code, &k5_atype_ap_rep_enc_part, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_ap_rep_enc_part;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1199:1"]
pub unsafe extern "C" fn encode_krb5_as_req(mut rep:
                                                *const aux_type_as_req_encode,
                                            mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_as_req_encode, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1200:1"]
pub unsafe extern "C" fn decode_krb5_as_req(mut code: *const krb5_data,
                                            mut rep_out:
                                                *mut *mut aux_type_as_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_as_req;
    ret = k5_asn1_full_decode(code, &k5_atype_as_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_as_req;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1201:1"]
pub unsafe extern "C" fn encode_krb5_tgs_req(mut rep:
                                                 *const aux_type_tgs_req_encode,
                                             mut code_out:
                                                 *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_tgs_req_encode, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1202:1"]
pub unsafe extern "C" fn decode_krb5_tgs_req(mut code: *const krb5_data,
                                             mut rep_out:
                                                 *mut *mut aux_type_tgs_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_tgs_req;
    ret = k5_asn1_full_decode(code, &k5_atype_tgs_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_tgs_req;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1203:1"]
pub unsafe extern "C" fn encode_krb5_kdc_req_body(mut rep:
                                                      *const aux_type_kdc_req_body,
                                                  mut code_out:
                                                      *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_kdc_req_body, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1204:1"]
pub unsafe extern "C" fn decode_krb5_kdc_req_body(mut code: *const krb5_data,
                                                  mut rep_out:
                                                      *mut *mut aux_type_kdc_req_body)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_kdc_req_body;
    ret = k5_asn1_full_decode(code, &k5_atype_kdc_req_body, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_kdc_req_body;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1205:1"]
pub unsafe extern "C" fn encode_krb5_safe(mut rep: *const aux_type_safe,
                                          mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_safe,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1206:1"]
pub unsafe extern "C" fn decode_krb5_safe(mut code: *const krb5_data,
                                          mut rep_out:
                                              *mut *mut aux_type_safe)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_safe;
    ret = k5_asn1_full_decode(code, &k5_atype_safe, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_safe;
    return 0 as libc::c_int;
}
/* encode_krb5_safe_with_body takes a saved KRB-SAFE-BODY encoding to avoid
 * mismatches from re-encoding if the sender isn't quite DER-compliant. */
#[no_mangle]
#[c2rust::src_loc = "1210:1"]
pub unsafe extern "C" fn encode_krb5_safe_with_body(mut rep:
                                                        *const aux_type_safe_with_body,
                                                    mut code_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_safe_with_body, code_out);
}
/*
 * decode_krb5_safe_with_body fully decodes a KRB-SAFE, but also returns
 * the KRB-SAFE-BODY encoding.  This interface was designed for an earlier
 * generation of decoder and should probably be re-thought.
 */
#[no_mangle]
#[c2rust::src_loc = "1217:1"]
pub unsafe extern "C" fn decode_krb5_safe_with_body(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut krb5_safe,
                                                    mut body_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut swb_ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut safe_ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut swb: *mut krb5_safe_with_body = 0 as *mut krb5_safe_with_body;
    let mut safe: *mut krb5_safe = 0 as *mut krb5_safe;
    ret = k5_asn1_full_decode(code, &k5_atype_safe_with_body, &mut swb_ptr);
    if ret != 0 { return ret }
    swb = swb_ptr as *mut krb5_safe_with_body;
    ret =
        k5_asn1_full_decode((*swb).body, &k5_atype_safe_body, &mut safe_ptr);
    if ret != 0 {
        krb5_free_safe(0 as krb5_context, (*swb).safe);
        krb5_free_data(0 as krb5_context, (*swb).body);
        free(swb as *mut libc::c_void);
        return ret
    }
    safe = safe_ptr as *mut krb5_safe;
    (*safe).checksum = (*(*swb).safe).checksum;
    free((*swb).safe as *mut libc::c_void);
    *rep_out = safe;
    *body_out = (*swb).body;
    free(swb as *mut libc::c_void);
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1246:1"]
pub unsafe extern "C" fn encode_krb5_priv(mut rep: *const aux_type_priv,
                                          mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_priv,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1247:1"]
pub unsafe extern "C" fn decode_krb5_priv(mut code: *const krb5_data,
                                          mut rep_out:
                                              *mut *mut aux_type_priv)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_priv;
    ret = k5_asn1_full_decode(code, &k5_atype_priv, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_priv;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1248:1"]
pub unsafe extern "C" fn encode_krb5_enc_priv_part(mut rep:
                                                       *const aux_type_priv_enc_part,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_priv_enc_part, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1249:1"]
pub unsafe extern "C" fn decode_krb5_enc_priv_part(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_priv_enc_part)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_priv_enc_part;
    ret = k5_asn1_full_decode(code, &k5_atype_priv_enc_part, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_priv_enc_part;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1250:1"]
pub unsafe extern "C" fn encode_krb5_checksum(mut rep:
                                                  *const aux_type_checksum,
                                              mut code_out:
                                                  *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_checksum,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1251:1"]
pub unsafe extern "C" fn decode_krb5_checksum(mut code: *const krb5_data,
                                              mut rep_out:
                                                  *mut *mut aux_type_checksum)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_checksum;
    ret = k5_asn1_full_decode(code, &k5_atype_checksum, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_checksum;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1253:1"]
pub unsafe extern "C" fn encode_krb5_cred(mut rep: *const aux_type_krb5_cred,
                                          mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_krb5_cred, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1254:1"]
pub unsafe extern "C" fn decode_krb5_cred(mut code: *const krb5_data,
                                          mut rep_out:
                                              *mut *mut aux_type_krb5_cred)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_krb5_cred;
    ret = k5_asn1_full_decode(code, &k5_atype_krb5_cred, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_krb5_cred;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1255:1"]
pub unsafe extern "C" fn encode_krb5_enc_cred_part(mut rep:
                                                       *const aux_type_enc_cred_part,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_enc_cred_part, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1256:1"]
pub unsafe extern "C" fn decode_krb5_enc_cred_part(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_enc_cred_part)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_enc_cred_part;
    ret = k5_asn1_full_decode(code, &k5_atype_enc_cred_part, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_enc_cred_part;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1257:1"]
pub unsafe extern "C" fn encode_krb5_error(mut rep:
                                               *const aux_type_krb5_error,
                                           mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_krb5_error, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1258:1"]
pub unsafe extern "C" fn decode_krb5_error(mut code: *const krb5_data,
                                           mut rep_out:
                                               *mut *mut aux_type_krb5_error)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_krb5_error;
    ret = k5_asn1_full_decode(code, &k5_atype_krb5_error, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_krb5_error;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1259:1"]
pub unsafe extern "C" fn encode_krb5_authdata(mut rep:
                                                  *const aux_type_auth_data,
                                              mut code_out:
                                                  *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_auth_data, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1260:1"]
pub unsafe extern "C" fn decode_krb5_authdata(mut code: *const krb5_data,
                                              mut rep_out:
                                                  *mut *mut aux_type_auth_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_auth_data;
    ret = k5_asn1_full_decode(code, &k5_atype_auth_data, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_auth_data;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1261:1"]
pub unsafe extern "C" fn encode_krb5_etype_info(mut rep:
                                                    *const aux_type_etype_info,
                                                mut code_out:
                                                    *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_etype_info, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1262:1"]
pub unsafe extern "C" fn decode_krb5_etype_info(mut code: *const krb5_data,
                                                mut rep_out:
                                                    *mut *mut aux_type_etype_info)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_etype_info;
    ret = k5_asn1_full_decode(code, &k5_atype_etype_info, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_etype_info;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1263:1"]
pub unsafe extern "C" fn encode_krb5_etype_info2(mut rep:
                                                     *const aux_type_etype_info2,
                                                 mut code_out:
                                                     *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_etype_info2, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1264:1"]
pub unsafe extern "C" fn decode_krb5_etype_info2(mut code: *const krb5_data,
                                                 mut rep_out:
                                                     *mut *mut aux_type_etype_info2)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_etype_info2;
    ret = k5_asn1_full_decode(code, &k5_atype_etype_info2, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_etype_info2;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1265:1"]
pub unsafe extern "C" fn encode_krb5_enc_data(mut rep:
                                                  *const aux_type_encrypted_data,
                                              mut code_out:
                                                  *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_encrypted_data, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1266:1"]
pub unsafe extern "C" fn decode_krb5_enc_data(mut code: *const krb5_data,
                                              mut rep_out:
                                                  *mut *mut aux_type_encrypted_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_encrypted_data;
    ret = k5_asn1_full_decode(code, &k5_atype_encrypted_data, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_encrypted_data;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1267:1"]
pub unsafe extern "C" fn encode_krb5_pa_enc_ts(mut rep:
                                                   *const aux_type_pa_enc_ts,
                                               mut code_out:
                                                   *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_enc_ts, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1268:1"]
pub unsafe extern "C" fn decode_krb5_pa_enc_ts(mut code: *const krb5_data,
                                               mut rep_out:
                                                   *mut *mut aux_type_pa_enc_ts)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_enc_ts;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_enc_ts, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_enc_ts;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1269:1"]
pub unsafe extern "C" fn encode_krb5_padata_sequence(mut rep:
                                                         *const aux_type_seqof_pa_data,
                                                     mut code_out:
                                                         *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_seqof_pa_data, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1270:1"]
pub unsafe extern "C" fn decode_krb5_padata_sequence(mut code:
                                                         *const krb5_data,
                                                     mut rep_out:
                                                         *mut *mut aux_type_seqof_pa_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_seqof_pa_data;
    ret = k5_asn1_full_decode(code, &k5_atype_seqof_pa_data, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_seqof_pa_data;
    return 0 as libc::c_int;
}
/* sam preauth additions */
#[no_mangle]
#[c2rust::src_loc = "1272:1"]
pub unsafe extern "C" fn encode_krb5_sam_challenge_2(mut rep:
                                                         *const aux_type_sam_challenge_2,
                                                     mut code_out:
                                                         *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_sam_challenge_2, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1273:1"]
pub unsafe extern "C" fn decode_krb5_sam_challenge_2(mut code:
                                                         *const krb5_data,
                                                     mut rep_out:
                                                         *mut *mut aux_type_sam_challenge_2)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_sam_challenge_2;
    ret = k5_asn1_full_decode(code, &k5_atype_sam_challenge_2, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_sam_challenge_2;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1274:1"]
pub unsafe extern "C" fn encode_krb5_sam_challenge_2_body(mut rep:
                                                              *const aux_type_sam_challenge_2_body,
                                                          mut code_out:
                                                              *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_sam_challenge_2_body, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1275:1"]
pub unsafe extern "C" fn decode_krb5_sam_challenge_2_body(mut code:
                                                              *const krb5_data,
                                                          mut rep_out:
                                                              *mut *mut aux_type_sam_challenge_2_body)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_sam_challenge_2_body;
    ret = k5_asn1_full_decode(code, &k5_atype_sam_challenge_2_body, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_sam_challenge_2_body;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1276:1"]
pub unsafe extern "C" fn encode_krb5_enc_sam_response_enc_2(mut rep:
                                                                *const aux_type_enc_sam_response_enc_2,
                                                            mut code_out:
                                                                *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_enc_sam_response_enc_2, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1277:1"]
pub unsafe extern "C" fn decode_krb5_enc_sam_response_enc_2(mut code:
                                                                *const krb5_data,
                                                            mut rep_out:
                                                                *mut *mut aux_type_enc_sam_response_enc_2)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_enc_sam_response_enc_2;
    ret =
        k5_asn1_full_decode(code, &k5_atype_enc_sam_response_enc_2, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_enc_sam_response_enc_2;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1278:1"]
pub unsafe extern "C" fn encode_krb5_sam_response_2(mut rep:
                                                        *const aux_type_sam_response_2,
                                                    mut code_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_sam_response_2, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1279:1"]
pub unsafe extern "C" fn decode_krb5_sam_response_2(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut aux_type_sam_response_2)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_sam_response_2;
    ret = k5_asn1_full_decode(code, &k5_atype_sam_response_2, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_sam_response_2;
    return 0 as libc::c_int;
}
/* setpw_req has an odd decoder interface which should probably be
 * normalized. */
#[no_mangle]
#[c2rust::src_loc = "1283:1"]
pub unsafe extern "C" fn encode_krb5_setpw_req(mut rep:
                                                   *const aux_type_setpw_req,
                                               mut code_out:
                                                   *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_setpw_req, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1284:1"]
pub unsafe extern "C" fn decode_krb5_setpw_req(mut code: *const krb5_data,
                                               mut password_out:
                                                   *mut *mut krb5_data,
                                               mut target_out:
                                                   *mut krb5_principal)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut req_ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut req: *mut krb5_setpw_req = 0 as *mut krb5_setpw_req;
    let mut data: *mut krb5_data = 0 as *mut krb5_data;
    *password_out = 0 as *mut krb5_data;
    *target_out = 0 as krb5_principal;
    data =
        malloc(::std::mem::size_of::<krb5_data>() as libc::c_ulong) as
            *mut krb5_data;
    if data.is_null() { return 12 as libc::c_int }
    ret = k5_asn1_full_decode(code, &k5_atype_setpw_req, &mut req_ptr);
    if ret != 0 { free(data as *mut libc::c_void); return ret }
    req = req_ptr as *mut krb5_setpw_req;
    *data = (*req).password;
    *password_out = data;
    *target_out = (*req).target;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1310:1"]
pub unsafe extern "C" fn encode_krb5_pa_for_user(mut rep:
                                                     *const aux_type_pa_for_user,
                                                 mut code_out:
                                                     *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_for_user, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1311:1"]
pub unsafe extern "C" fn decode_krb5_pa_for_user(mut code: *const krb5_data,
                                                 mut rep_out:
                                                     *mut *mut aux_type_pa_for_user)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_for_user;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_for_user, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_for_user;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1312:1"]
pub unsafe extern "C" fn encode_krb5_s4u_userid(mut rep:
                                                    *const aux_type_s4u_userid,
                                                mut code_out:
                                                    *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_s4u_userid, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1313:1"]
pub unsafe extern "C" fn encode_krb5_pa_s4u_x509_user(mut rep:
                                                          *const aux_type_pa_s4u_x509_user,
                                                      mut code_out:
                                                          *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_s4u_x509_user, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1314:1"]
pub unsafe extern "C" fn decode_krb5_pa_s4u_x509_user(mut code:
                                                          *const krb5_data,
                                                      mut rep_out:
                                                          *mut *mut aux_type_pa_s4u_x509_user)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_s4u_x509_user;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_s4u_x509_user, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_s4u_x509_user;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1315:1"]
pub unsafe extern "C" fn encode_krb5_pa_pac_req(mut rep:
                                                    *const aux_type_pa_pac_req,
                                                mut code_out:
                                                    *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_pac_req, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1316:1"]
pub unsafe extern "C" fn decode_krb5_pa_pac_req(mut code: *const krb5_data,
                                                mut rep_out:
                                                    *mut *mut aux_type_pa_pac_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_pac_req;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_pac_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_pac_req;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1317:1"]
pub unsafe extern "C" fn encode_krb5_etype_list(mut rep:
                                                    *const aux_type_etype_list,
                                                mut code_out:
                                                    *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_etype_list, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1318:1"]
pub unsafe extern "C" fn decode_krb5_etype_list(mut code: *const krb5_data,
                                                mut rep_out:
                                                    *mut *mut aux_type_etype_list)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_etype_list;
    ret = k5_asn1_full_decode(code, &k5_atype_etype_list, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_etype_list;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1320:1"]
pub unsafe extern "C" fn encode_krb5_pa_fx_fast_request(mut rep:
                                                            *const aux_type_pa_fx_fast_request,
                                                        mut code_out:
                                                            *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_fx_fast_request, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1321:1"]
pub unsafe extern "C" fn decode_krb5_pa_fx_fast_request(mut code:
                                                            *const krb5_data,
                                                        mut rep_out:
                                                            *mut *mut aux_type_pa_fx_fast_request)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_fx_fast_request;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_fx_fast_request, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_fx_fast_request;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1322:1"]
pub unsafe extern "C" fn encode_krb5_fast_req(mut rep:
                                                  *const aux_type_fast_req,
                                              mut code_out:
                                                  *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_fast_req,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1323:1"]
pub unsafe extern "C" fn decode_krb5_fast_req(mut code: *const krb5_data,
                                              mut rep_out:
                                                  *mut *mut aux_type_fast_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_fast_req;
    ret = k5_asn1_full_decode(code, &k5_atype_fast_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_fast_req;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1324:1"]
pub unsafe extern "C" fn encode_krb5_pa_fx_fast_reply(mut rep:
                                                          *const aux_type_pa_fx_fast_reply,
                                                      mut code_out:
                                                          *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_fx_fast_reply, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1325:1"]
pub unsafe extern "C" fn decode_krb5_pa_fx_fast_reply(mut code:
                                                          *const krb5_data,
                                                      mut rep_out:
                                                          *mut *mut aux_type_pa_fx_fast_reply)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_fx_fast_reply;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_fx_fast_reply, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_fx_fast_reply;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1326:1"]
pub unsafe extern "C" fn encode_krb5_fast_response(mut rep:
                                                       *const aux_type_fast_response,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_fast_response, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1327:1"]
pub unsafe extern "C" fn decode_krb5_fast_response(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_fast_response)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_fast_response;
    ret = k5_asn1_full_decode(code, &k5_atype_fast_response, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_fast_response;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1329:1"]
pub unsafe extern "C" fn encode_krb5_ad_kdcissued(mut rep:
                                                      *const aux_type_ad_kdc_issued,
                                                  mut code_out:
                                                      *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_ad_kdc_issued, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1330:1"]
pub unsafe extern "C" fn decode_krb5_ad_kdcissued(mut code: *const krb5_data,
                                                  mut rep_out:
                                                      *mut *mut aux_type_ad_kdc_issued)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_ad_kdc_issued;
    ret = k5_asn1_full_decode(code, &k5_atype_ad_kdc_issued, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_ad_kdc_issued;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1331:1"]
pub unsafe extern "C" fn encode_krb5_ad_signedpath_data(mut rep:
                                                            *const aux_type_ad_signedpath_data,
                                                        mut code_out:
                                                            *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_ad_signedpath_data, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1332:1"]
pub unsafe extern "C" fn encode_krb5_ad_signedpath(mut rep:
                                                       *const aux_type_ad_signedpath,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_ad_signedpath, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1333:1"]
pub unsafe extern "C" fn decode_krb5_ad_signedpath(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_ad_signedpath)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_ad_signedpath;
    ret = k5_asn1_full_decode(code, &k5_atype_ad_signedpath, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_ad_signedpath;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1334:1"]
pub unsafe extern "C" fn encode_krb5_iakerb_header(mut rep:
                                                       *const aux_type_iakerb_header,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_iakerb_header, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1335:1"]
pub unsafe extern "C" fn decode_krb5_iakerb_header(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_iakerb_header)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_iakerb_header;
    ret = k5_asn1_full_decode(code, &k5_atype_iakerb_header, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_iakerb_header;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1336:1"]
pub unsafe extern "C" fn encode_krb5_iakerb_finished(mut rep:
                                                         *const aux_type_iakerb_finished,
                                                     mut code_out:
                                                         *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_iakerb_finished, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1337:1"]
pub unsafe extern "C" fn decode_krb5_iakerb_finished(mut code:
                                                         *const krb5_data,
                                                     mut rep_out:
                                                         *mut *mut aux_type_iakerb_finished)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_iakerb_finished;
    ret = k5_asn1_full_decode(code, &k5_atype_iakerb_finished, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_iakerb_finished;
    return 0 as libc::c_int;
}
/* Return the delta between two timestamps (a - b) as a signed 32-bit value,
 * without relying on undefined behavior. */
/* Increment a timestamp by a signed 32-bit interval, without relying on
 * undefined behavior. */
/* Return true if a comes after b. */
/* Return true if a and b are within d seconds. */
#[no_mangle]
#[c2rust::src_loc = "1339:1"]
pub unsafe extern "C" fn krb5int_get_authdata_containee_types(mut context:
                                                                  krb5_context,
                                                              mut authdata:
                                                                  *const krb5_authdata,
                                                              mut num_out:
                                                                  *mut libc::c_uint,
                                                              mut types_out:
                                                                  *mut *mut krb5_authdatatype)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut atypes: *mut authdata_types = 0 as *mut authdata_types;
    let mut atypes_ptr: *mut libc::c_void = 0 as *mut libc::c_void;
    let mut d: krb5_data =
        make_data((*authdata).contents as *mut libc::c_void,
                  (*authdata).length);
    ret =
        k5_asn1_full_decode(&mut d, &k5_atype_authdata_types,
                            &mut atypes_ptr);
    if ret != 0 { return ret }
    atypes = atypes_ptr as *mut authdata_types;
    *num_out = (*atypes).ntypes;
    *types_out = (*atypes).types;
    free(atypes as *mut libc::c_void);
    return 0 as libc::c_int;
}
/* RFC 3280.  No context tags. */
// Initialized in run_static_initializers
#[c2rust::src_loc = "1361:1"]
static mut aux_info_algid_0: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1361:1"]
pub static mut k5_atype_algid_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_algid_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_algid_0 as *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1362:1"]
static mut aux_info_algid_1: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1362:1"]
pub static mut k5_atype_algid_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_algid_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_algid_1 as *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1363:33"]
static mut algorithm_identifier_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_algid_0 as *const atype_info,
         &k5_atype_algid_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1366:1"]
static mut aux_seqinfo_algorithm_identifier: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1366:1"]
pub static mut k5_atype_algorithm_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_algorithm_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_algorithm_identifier as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1368:1"]
static mut aux_info_ptr_algorithm_identifier: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_algorithm_identifier as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_algorithm_identifier as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_algorithm_identifier as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1368:1"]
pub static mut k5_atype_ptr_algorithm_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_algorithm_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_algorithm_identifier as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1368:1"]
unsafe extern "C" fn aux_loadptr_ptr_algorithm_identifier(mut p:
                                                              *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_algorithm_identifier) as
               *mut libc::c_void;
}
#[c2rust::src_loc = "1368:1"]
unsafe extern "C" fn aux_storeptr_ptr_algorithm_identifier(mut ptr:
                                                               *mut libc::c_void,
                                                           mut val:
                                                               *mut libc::c_void) {
    let ref mut fresh33 = *(val as *mut aux_type_ptr_algorithm_identifier);
    *fresh33 = ptr as aux_type_ptr_algorithm_identifier;
}
#[c2rust::src_loc = "1369:1"]
unsafe extern "C" fn aux_present_opt_ptr_algorithm_identifier(mut p:
                                                                  *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_algorithm_identifier) !=
                0 as aux_type_ptr_algorithm_identifier) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1369:1"]
pub static mut k5_atype_opt_ptr_algorithm_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_algorithm_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_algorithm_identifier as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1369:1"]
static mut aux_info_opt_ptr_algorithm_identifier: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_algorithm_identifier
                                           as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_algorithm_identifier as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1370:1"]
pub static mut k5_atype_seqof_algorithm_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_algorithm_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_ptr_algorithm_identifier as
                                   *const atype_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1371:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_algorithm_identifier(mut p:
                                                                    *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_algorithm_identifier) as
               *mut libc::c_void;
}
#[c2rust::src_loc = "1371:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_algorithm_identifier(mut ptr:
                                                                     *mut libc::c_void,
                                                                 mut val:
                                                                     *mut libc::c_void) {
    let ref mut fresh34 =
        *(val as *mut aux_type_ptr_seqof_algorithm_identifier);
    *fresh34 = ptr as aux_type_ptr_seqof_algorithm_identifier;
}
#[no_mangle]
#[c2rust::src_loc = "1371:1"]
pub static mut k5_atype_ptr_seqof_algorithm_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_algorithm_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_algorithm_identifier as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1371:1"]
static mut aux_info_ptr_seqof_algorithm_identifier: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_algorithm_identifier
                                      as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_algorithm_identifier
                                      as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_algorithm_identifier as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1372:1"]
static mut aux_info_opt_ptr_seqof_algorithm_identifier: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_seqof_algorithm_identifier
                                           as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_seqof_algorithm_identifier as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1372:1"]
pub static mut k5_atype_opt_ptr_seqof_algorithm_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_seqof_algorithm_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_seqof_algorithm_identifier as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1372:1"]
unsafe extern "C" fn aux_present_opt_ptr_seqof_algorithm_identifier(mut p:
                                                                        *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_ptr_seqof_algorithm_identifier =
        p as *const aux_type_ptr_seqof_algorithm_identifier;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
/*
 * PKINIT
 */
#[no_mangle]
#[c2rust::src_loc = "1381:1"]
pub static mut k5_atype_kdf_alg_id_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kdf_alg_id_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kdf_alg_id_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1381:1"]
static mut aux_info_kdf_alg_id_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1382:33"]
static mut kdf_alg_id_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_kdf_alg_id_0 as *const atype_info] };
#[no_mangle]
#[c2rust::src_loc = "1385:1"]
pub static mut k5_atype_kdf_alg_id: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_kdf_alg_id as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1385:1"]
static mut aux_seqinfo_kdf_alg_id: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1386:1"]
pub static mut k5_atype_ptr_kdf_alg_id: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_kdf_alg_id>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_kdf_alg_id as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1386:1"]
static mut aux_info_ptr_kdf_alg_id: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_kdf_alg_id as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_kdf_alg_id as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_kdf_alg_id as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1386:1"]
unsafe extern "C" fn aux_loadptr_ptr_kdf_alg_id(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_kdf_alg_id) as *mut libc::c_void;
}
#[c2rust::src_loc = "1386:1"]
unsafe extern "C" fn aux_storeptr_ptr_kdf_alg_id(mut ptr: *mut libc::c_void,
                                                 mut val: *mut libc::c_void) {
    let ref mut fresh35 = *(val as *mut aux_type_ptr_kdf_alg_id);
    *fresh35 = ptr as aux_type_ptr_kdf_alg_id;
}
#[no_mangle]
#[c2rust::src_loc = "1387:1"]
pub static mut k5_atype_supported_kdfs: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nonempty_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_supported_kdfs>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_ptr_kdf_alg_id as *const atype_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1388:1"]
unsafe extern "C" fn aux_storeptr_ptr_supported_kdfs(mut ptr:
                                                         *mut libc::c_void,
                                                     mut val:
                                                         *mut libc::c_void) {
    let ref mut fresh36 = *(val as *mut aux_type_ptr_supported_kdfs);
    *fresh36 = ptr as aux_type_ptr_supported_kdfs;
}
#[c2rust::src_loc = "1388:1"]
static mut aux_info_ptr_supported_kdfs: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_supported_kdfs as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_supported_kdfs as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_supported_kdfs as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1388:1"]
pub static mut k5_atype_ptr_supported_kdfs: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_supported_kdfs>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_supported_kdfs as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1388:1"]
unsafe extern "C" fn aux_loadptr_ptr_supported_kdfs(mut p:
                                                        *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_supported_kdfs) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "1389:1"]
pub static mut k5_atype_opt_ptr_kdf_alg_id: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_kdf_alg_id>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_kdf_alg_id as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1389:1"]
static mut aux_info_opt_ptr_kdf_alg_id: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_kdf_alg_id as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_kdf_alg_id as
                                      *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1389:1"]
unsafe extern "C" fn aux_present_opt_ptr_kdf_alg_id(mut p:
                                                        *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_kdf_alg_id) !=
                0 as aux_type_ptr_kdf_alg_id) as libc::c_int;
}
#[c2rust::src_loc = "1390:1"]
unsafe extern "C" fn aux_present_opt_ptr_supported_kdfs(mut p:
                                                            *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_supported_kdfs) !=
                0 as aux_type_ptr_supported_kdfs) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1390:1"]
pub static mut k5_atype_opt_ptr_supported_kdfs: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_supported_kdfs>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_supported_kdfs as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1390:1"]
static mut aux_info_opt_ptr_supported_kdfs: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_supported_kdfs as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_supported_kdfs as
                                      *const atype_info,};
            init
        }
    };
/* KRB5PrincipalName from RFC 4556 (*not* PrincipalName from RFC 4120) */
#[no_mangle]
#[c2rust::src_loc = "1393:1"]
pub static mut k5_atype_pkinit_princ_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pkinit_princ_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pkinit_princ_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1393:1"]
static mut aux_info_pkinit_princ_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1394:1"]
static mut aux_info_pkinit_princ_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1394:1"]
pub static mut k5_atype_pkinit_princ_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pkinit_princ_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pkinit_princ_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1395:33"]
static mut pkinit_krb5_principal_name_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_pkinit_princ_0 as *const atype_info,
         &k5_atype_pkinit_princ_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1398:1"]
static mut aux_seqinfo_pkinit_krb5_principal_name_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1398:1"]
pub static mut k5_atype_pkinit_krb5_principal_name_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_principal_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pkinit_krb5_principal_name_data as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1400:1"]
static mut aux_info_pkinit_krb5_principal_name: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_pkinit_krb5_principal_name as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_pkinit_krb5_principal_name as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_pkinit_krb5_principal_name_data as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1400:1"]
pub static mut k5_atype_pkinit_krb5_principal_name: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_pkinit_krb5_principal_name>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pkinit_krb5_principal_name as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1400:1"]
unsafe extern "C" fn aux_storeptr_pkinit_krb5_principal_name(mut ptr:
                                                                 *mut libc::c_void,
                                                             mut val:
                                                                 *mut libc::c_void) {
    let ref mut fresh37 = *(val as *mut aux_type_pkinit_krb5_principal_name);
    *fresh37 = ptr as aux_type_pkinit_krb5_principal_name;
}
#[c2rust::src_loc = "1400:1"]
unsafe extern "C" fn aux_loadptr_pkinit_krb5_principal_name(mut p:
                                                                *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_pkinit_krb5_principal_name) as
               *mut libc::c_void;
}
/* SP80056A OtherInfo, for pkinit agility.  No context tag on first field. */
// Initialized in run_static_initializers
#[c2rust::src_loc = "1403:1"]
static mut aux_info_pkinit_krb5_principal_name_wrapped: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1403:1"]
pub static mut k5_atype_pkinit_krb5_principal_name_wrapped: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pkinit_krb5_principal_name_wrapped>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pkinit_krb5_principal_name_wrapped as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1405:1"]
static mut aux_info_oinfo_notag: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1405:1"]
pub static mut k5_atype_oinfo_notag: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_notag>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_notag as *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1407:1"]
static mut aux_info_oinfo_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1407:1"]
pub static mut k5_atype_oinfo_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1407:1"]
pub static mut k5_atype_oinfo_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1407:1"]
static mut aux_info_oinfo_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1409:1"]
static mut aux_info_oinfo_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1409:1"]
static mut aux_info_oinfo_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1409:1"]
pub static mut k5_atype_oinfo_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1409:1"]
pub static mut k5_atype_oinfo_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1411:1"]
pub static mut k5_atype_oinfo_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1411:1"]
static mut aux_info_oinfo_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1411:1"]
static mut aux_info_oinfo_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1411:1"]
pub static mut k5_atype_oinfo_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_oinfo_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_oinfo_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1412:33"]
static mut sp80056a_other_info_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_oinfo_notag as *const atype_info,
         &k5_atype_oinfo_0 as *const atype_info,
         &k5_atype_oinfo_1 as *const atype_info,
         &k5_atype_oinfo_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1416:1"]
pub static mut k5_atype_sp80056a_other_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_sp80056a_other_info>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_sp80056a_other_info as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1416:1"]
static mut aux_seqinfo_sp80056a_other_info: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
/* For PkinitSuppPubInfo, for pkinit agility */
// Initialized in run_static_initializers
#[c2rust::src_loc = "1420:1"]
static mut aux_info_supp_pub_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1420:1"]
pub static mut k5_atype_supp_pub_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_supp_pub_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_supp_pub_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1420:1"]
static mut aux_info_supp_pub_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1420:1"]
pub static mut k5_atype_supp_pub_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_supp_pub_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_supp_pub_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1421:1"]
pub static mut k5_atype_supp_pub_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_supp_pub_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_supp_pub_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1421:1"]
static mut aux_info_supp_pub_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1421:1"]
pub static mut k5_atype_supp_pub_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_supp_pub_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_supp_pub_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1421:1"]
static mut aux_info_supp_pub_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1422:1"]
pub static mut k5_atype_supp_pub_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_supp_pub_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_supp_pub_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1422:1"]
static mut aux_info_supp_pub_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1422:1"]
pub static mut k5_atype_supp_pub_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_supp_pub_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_supp_pub_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1422:1"]
static mut aux_info_supp_pub_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1423:33"]
static mut pkinit_supp_pub_info_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_supp_pub_0 as *const atype_info,
         &k5_atype_supp_pub_1 as *const atype_info,
         &k5_atype_supp_pub_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1426:1"]
pub static mut k5_atype_pkinit_supp_pub_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pkinit_supp_pub_info>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pkinit_supp_pub_info as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1426:1"]
static mut aux_seqinfo_pkinit_supp_pub_info: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1429:1"]
pub unsafe extern "C" fn encode_krb5_pkinit_supp_pub_info(mut rep:
                                                              *const aux_type_pkinit_supp_pub_info,
                                                          mut code_out:
                                                              *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pkinit_supp_pub_info, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1430:1"]
pub unsafe extern "C" fn encode_krb5_sp80056a_other_info(mut rep:
                                                             *const aux_type_sp80056a_other_info,
                                                         mut code_out:
                                                             *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_sp80056a_other_info, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1433:1"]
pub static mut k5_atype_ostring_checksum: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_checksum>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_ostring_checksum as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "1433:1"]
pub static mut aux_info_ostring_checksum: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "1435:1"]
pub static mut k5_atype_pk_authenticator_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1435:1"]
static mut aux_info_pk_authenticator_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1435:1"]
pub static mut k5_atype_pk_authenticator_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1435:1"]
static mut aux_info_pk_authenticator_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1436:1"]
static mut aux_info_pk_authenticator_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1436:1"]
pub static mut k5_atype_pk_authenticator_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1436:1"]
static mut aux_info_pk_authenticator_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1436:1"]
pub static mut k5_atype_pk_authenticator_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1437:1"]
static mut aux_info_pk_authenticator_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1437:1"]
pub static mut k5_atype_pk_authenticator_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1437:1"]
static mut aux_info_pk_authenticator_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1437:1"]
pub static mut k5_atype_pk_authenticator_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_2 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1438:1"]
pub static mut k5_atype_pk_authenticator_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1438:1"]
pub static mut k5_atype_pk_authenticator_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_3 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1438:1"]
static mut aux_info_pk_authenticator_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1438:1"]
static mut aux_info_pk_authenticator_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1440:1"]
static mut aux_info_pk_authenticator_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1440:1"]
pub static mut k5_atype_pk_authenticator_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1440:1"]
pub static mut k5_atype_pk_authenticator_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pk_authenticator_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pk_authenticator_4 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1440:1"]
static mut aux_info_pk_authenticator_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1442:33"]
static mut pk_authenticator_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_pk_authenticator_0 as *const atype_info,
         &k5_atype_pk_authenticator_1 as *const atype_info,
         &k5_atype_pk_authenticator_2 as *const atype_info,
         &k5_atype_pk_authenticator_3 as *const atype_info,
         &k5_atype_pk_authenticator_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1447:1"]
static mut aux_seqinfo_pk_authenticator: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1447:1"]
pub static mut k5_atype_pk_authenticator: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pk_authenticator>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pk_authenticator as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1449:1"]
pub static mut k5_cntype_s_bitstring: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_string,
                            tinfo:
                                &aux_info_s_bitstring as *const string_info as
                                    *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1449:1"]
static mut aux_info_s_bitstring: string_info =
    string_info{enc: None,
                dec: None,
                tagval: [0; 1],
                c2rust_padding: [0; 7],};
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "1452:1"]
pub static mut aux_info_bitstring_data: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "1452:1"]
pub static mut k5_atype_bitstring_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_bitstring_data as *const counted_info
                                   as *const libc::c_void,};
            init
        }
    };
/* RFC 3280.  No context tags. */
#[no_mangle]
#[c2rust::src_loc = "1455:1"]
pub static mut k5_atype_spki_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spki_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spki_0 as *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1455:1"]
static mut aux_info_spki_0: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1456:1"]
static mut aux_info_spki_1: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1456:1"]
pub static mut k5_atype_spki_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spki_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spki_1 as *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1457:33"]
static mut subject_pk_info_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_spki_0 as *const atype_info,
         &k5_atype_spki_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1460:1"]
static mut aux_seqinfo_subject_pk_info: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1460:1"]
pub static mut k5_atype_subject_pk_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_subject_pk_info>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_subject_pk_info as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1461:1"]
pub static mut k5_atype_subject_pk_info_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_subject_pk_info_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_subject_pk_info_ptr as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1461:1"]
unsafe extern "C" fn aux_loadptr_subject_pk_info_ptr(mut p:
                                                         *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_subject_pk_info_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "1461:1"]
unsafe extern "C" fn aux_storeptr_subject_pk_info_ptr(mut ptr:
                                                          *mut libc::c_void,
                                                      mut val:
                                                          *mut libc::c_void) {
    let ref mut fresh38 = *(val as *mut aux_type_subject_pk_info_ptr);
    *fresh38 = ptr as aux_type_subject_pk_info_ptr;
}
#[c2rust::src_loc = "1461:1"]
static mut aux_info_subject_pk_info_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_subject_pk_info_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_subject_pk_info_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_subject_pk_info as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1462:1"]
unsafe extern "C" fn aux_present_opt_subject_pk_info_ptr(mut p:
                                                             *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_subject_pk_info_ptr) !=
                0 as aux_type_subject_pk_info_ptr) as libc::c_int;
}
#[c2rust::src_loc = "1462:1"]
static mut aux_info_opt_subject_pk_info_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_subject_pk_info_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_subject_pk_info_ptr as
                                      *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1462:1"]
pub static mut k5_atype_opt_subject_pk_info_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_subject_pk_info_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_subject_pk_info_ptr as
                                   *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1464:1"]
static mut aux_info_auth_pack_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1464:1"]
pub static mut k5_atype_auth_pack_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1464:1"]
static mut aux_info_auth_pack_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1464:1"]
pub static mut k5_atype_auth_pack_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1465:1"]
static mut aux_info_auth_pack_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1465:1"]
pub static mut k5_atype_auth_pack_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1465:1"]
static mut aux_info_auth_pack_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1465:1"]
pub static mut k5_atype_auth_pack_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1467:1"]
static mut aux_info_auth_pack_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1467:1"]
pub static mut k5_atype_auth_pack_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1467:1"]
static mut aux_info_auth_pack_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1467:1"]
pub static mut k5_atype_auth_pack_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1469:1"]
pub static mut k5_atype_auth_pack_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_3>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1469:1"]
static mut aux_info_auth_pack_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1469:1"]
pub static mut k5_atype_auth_pack_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1469:1"]
static mut aux_info_auth_pack_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1470:1"]
pub static mut k5_atype_auth_pack_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1470:1"]
static mut aux_info_auth_pack_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1470:1"]
pub static mut k5_atype_auth_pack_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_auth_pack_4>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_auth_pack_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1470:1"]
static mut aux_info_auth_pack_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1472:33"]
static mut auth_pack_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_auth_pack_0 as *const atype_info,
         &k5_atype_auth_pack_1 as *const atype_info,
         &k5_atype_auth_pack_2 as *const atype_info,
         &k5_atype_auth_pack_3 as *const atype_info,
         &k5_atype_auth_pack_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1476:1"]
static mut aux_seqinfo_auth_pack: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1476:1"]
pub static mut k5_atype_auth_pack: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_auth_pack>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_auth_pack as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1478:1"]
pub static mut k5_atype_extprinc_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_extprinc_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_extprinc_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1478:1"]
static mut aux_info_extprinc_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1478:1"]
static mut aux_info_extprinc_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1478:1"]
pub static mut k5_atype_extprinc_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_extprinc_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_extprinc_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1480:1"]
static mut aux_info_extprinc_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1480:1"]
pub static mut k5_atype_extprinc_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_extprinc_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_extprinc_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1480:1"]
static mut aux_info_extprinc_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1480:1"]
pub static mut k5_atype_extprinc_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_extprinc_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_extprinc_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1482:1"]
pub static mut k5_atype_extprinc_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_extprinc_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_extprinc_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1482:1"]
static mut aux_info_extprinc_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1482:1"]
pub static mut k5_atype_extprinc_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_extprinc_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_extprinc_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1482:1"]
static mut aux_info_extprinc_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1484:33"]
static mut external_principal_identifier_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_extprinc_0 as *const atype_info,
         &k5_atype_extprinc_1 as *const atype_info,
         &k5_atype_extprinc_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1487:1"]
pub static mut k5_atype_external_principal_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_external_principal_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_external_principal_identifier as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1487:1"]
static mut aux_seqinfo_external_principal_identifier: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1489:1"]
pub static mut k5_atype_external_principal_identifier_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_external_principal_identifier_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_external_principal_identifier_ptr as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1489:1"]
unsafe extern "C" fn aux_loadptr_external_principal_identifier_ptr(mut p:
                                                                       *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_external_principal_identifier_ptr) as
               *mut libc::c_void;
}
#[c2rust::src_loc = "1489:1"]
unsafe extern "C" fn aux_storeptr_external_principal_identifier_ptr(mut ptr:
                                                                        *mut libc::c_void,
                                                                    mut val:
                                                                        *mut libc::c_void) {
    let ref mut fresh39 =
        *(val as *mut aux_type_external_principal_identifier_ptr);
    *fresh39 = ptr as aux_type_external_principal_identifier_ptr;
}
#[c2rust::src_loc = "1489:1"]
static mut aux_info_external_principal_identifier_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_external_principal_identifier_ptr
                                      as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_external_principal_identifier_ptr
                                      as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_external_principal_identifier as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1491:1"]
pub static mut k5_atype_seqof_external_principal_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_external_principal_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_external_principal_identifier_ptr as
                                   *const atype_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1493:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_external_principal_identifier(mut p:
                                                                             *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_external_principal_identifier) as
               *mut libc::c_void;
}
#[c2rust::src_loc = "1493:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_external_principal_identifier(mut ptr:
                                                                              *mut libc::c_void,
                                                                          mut val:
                                                                              *mut libc::c_void) {
    let ref mut fresh40 =
        *(val as *mut aux_type_ptr_seqof_external_principal_identifier);
    *fresh40 = ptr as aux_type_ptr_seqof_external_principal_identifier;
}
#[no_mangle]
#[c2rust::src_loc = "1493:1"]
pub static mut k5_atype_ptr_seqof_external_principal_identifier: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_external_principal_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_external_principal_identifier
                                   as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1493:1"]
static mut aux_info_ptr_seqof_external_principal_identifier: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_external_principal_identifier
                                      as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_external_principal_identifier
                                      as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_external_principal_identifier as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1495:1"]
unsafe extern "C" fn aux_present_opt_ptr_seqof_external_principal_identifier(mut p:
                                                                                 *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_ptr_seqof_external_principal_identifier) !=
                0 as aux_type_ptr_seqof_external_principal_identifier) as
               libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1495:1"]
pub static mut k5_atype_opt_ptr_seqof_external_principal_identifier:
           atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_ptr_seqof_external_principal_identifier>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_ptr_seqof_external_principal_identifier
                                   as *const optional_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1495:1"]
static mut aux_info_opt_ptr_seqof_external_principal_identifier: optional_info
       =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_ptr_seqof_external_principal_identifier
                                           as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_ptr_seqof_external_principal_identifier
                                      as *const atype_info,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1498:1"]
static mut aux_info_pa_pk_as_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1498:1"]
static mut aux_info_pa_pk_as_req_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1498:1"]
pub static mut k5_atype_pa_pk_as_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_req_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_req_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1498:1"]
pub static mut k5_atype_pa_pk_as_req_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_req_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_req_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1500:1"]
pub static mut k5_atype_pa_pk_as_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_req_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_req_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1500:1"]
static mut aux_info_pa_pk_as_req_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1500:1"]
pub static mut k5_atype_pa_pk_as_req_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_req_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_req_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1500:1"]
static mut aux_info_pa_pk_as_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1502:1"]
static mut aux_info_pa_pk_as_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1502:1"]
static mut aux_info_pa_pk_as_req_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1502:1"]
pub static mut k5_atype_pa_pk_as_req_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_req_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_req_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1502:1"]
pub static mut k5_atype_pa_pk_as_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_req_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_req_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1504:33"]
static mut pa_pk_as_req_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_pa_pk_as_req_0 as *const atype_info,
         &k5_atype_pa_pk_as_req_1 as *const atype_info,
         &k5_atype_pa_pk_as_req_2 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1508:1"]
static mut aux_seqinfo_pa_pk_as_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1508:1"]
pub static mut k5_atype_pa_pk_as_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_pk_as_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_pk_as_req as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1510:1"]
static mut aux_info_dh_rep_info_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1510:1"]
pub static mut k5_atype_dh_rep_info_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_dh_rep_info_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_rep_info_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1510:1"]
static mut aux_info_dh_rep_info_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1510:1"]
pub static mut k5_atype_dh_rep_info_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_dh_rep_info_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_rep_info_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1512:1"]
static mut aux_info_dh_rep_info_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1512:1"]
pub static mut k5_atype_dh_rep_info_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_dh_rep_info_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_rep_info_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1512:1"]
static mut aux_info_dh_rep_info_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1512:1"]
pub static mut k5_atype_dh_rep_info_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_dh_rep_info_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_rep_info_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1513:1"]
pub static mut k5_atype_dh_rep_info_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_dh_rep_info_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_rep_info_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1513:1"]
static mut aux_info_dh_rep_info_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1513:1"]
pub static mut k5_atype_dh_rep_info_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_dh_rep_info_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_rep_info_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1513:1"]
static mut aux_info_dh_rep_info_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1514:33"]
static mut dh_rep_info_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_dh_rep_info_0 as *const atype_info,
         &k5_atype_dh_rep_info_1 as *const atype_info,
         &k5_atype_dh_rep_info_2 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1517:1"]
static mut aux_seqinfo_dh_rep_info: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1517:1"]
pub static mut k5_atype_dh_rep_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_dh_rep_info>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_dh_rep_info as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1519:1"]
static mut aux_info_dh_key_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1519:1"]
static mut aux_info_dh_key_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1519:1"]
pub static mut k5_atype_dh_key_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_dh_key_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_dh_key_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1519:1"]
pub static mut k5_atype_dh_key_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_dh_key_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_key_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1520:1"]
static mut aux_info_dh_key_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1520:1"]
pub static mut k5_atype_dh_key_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_dh_key_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_key_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1520:1"]
pub static mut k5_atype_dh_key_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_dh_key_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_dh_key_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1520:1"]
static mut aux_info_dh_key_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1521:1"]
pub static mut k5_atype_dh_key_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_dh_key_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_dh_key_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1521:1"]
static mut aux_info_dh_key_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1521:1"]
pub static mut k5_atype_dh_key_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_dh_key_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_dh_key_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1521:1"]
static mut aux_info_dh_key_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1523:33"]
static mut kdc_dh_key_info_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_dh_key_0 as *const atype_info,
         &k5_atype_dh_key_1 as *const atype_info,
         &k5_atype_dh_key_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1526:1"]
pub static mut k5_atype_kdc_dh_key_info: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_kdc_dh_key_info>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_kdc_dh_key_info as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1526:1"]
static mut aux_seqinfo_kdc_dh_key_info: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1528:1"]
pub static mut k5_atype_reply_key_pack_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_reply_key_pack_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_reply_key_pack_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1528:1"]
pub static mut k5_atype_reply_key_pack_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_reply_key_pack_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_reply_key_pack_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1528:1"]
static mut aux_info_reply_key_pack_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1528:1"]
static mut aux_info_reply_key_pack_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1529:1"]
static mut aux_info_reply_key_pack_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1529:1"]
pub static mut k5_atype_reply_key_pack_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_reply_key_pack_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_reply_key_pack_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1529:1"]
static mut aux_info_reply_key_pack_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1529:1"]
pub static mut k5_atype_reply_key_pack_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_reply_key_pack_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_reply_key_pack_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1530:33"]
static mut reply_key_pack_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_reply_key_pack_0 as *const atype_info,
         &k5_atype_reply_key_pack_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1533:1"]
pub static mut k5_atype_reply_key_pack: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_reply_key_pack>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_reply_key_pack as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1533:1"]
static mut aux_seqinfo_reply_key_pack: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1535:1"]
static mut aux_info_pa_pk_as_rep_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1535:1"]
pub static mut k5_atype_pa_pk_as_rep_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_rep_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_rep_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1536:1"]
static mut aux_info_pa_pk_as_rep_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1536:1"]
pub static mut k5_atype_pa_pk_as_rep_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pk_as_rep_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_rep_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1537:33"]
static mut pa_pk_as_rep_alternatives: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_pa_pk_as_rep_0 as *const atype_info,
         &k5_atype_pa_pk_as_rep_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1540:1"]
static mut aux_info_pa_pk_as_rep_choice: choice_info =
    choice_info{options:
                    0 as *const *const atype_info as *mut *const atype_info,
                n_options: 0,};
#[no_mangle]
#[c2rust::src_loc = "1540:1"]
pub static mut k5_cntype_pa_pk_as_rep_choice: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_choice,
                            tinfo:
                                &aux_info_pa_pk_as_rep_choice as
                                    *const choice_info as
                                    *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "1542:1"]
pub static mut aux_info_pa_pk_as_rep: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "1542:1"]
pub static mut k5_atype_pa_pk_as_rep: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_pa_pk_as_rep>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pk_as_rep as *const counted_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1545:1"]
pub unsafe extern "C" fn encode_krb5_pa_pk_as_req(mut rep:
                                                      *const aux_type_pa_pk_as_req,
                                                  mut code_out:
                                                      *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_pk_as_req, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1546:1"]
pub unsafe extern "C" fn decode_krb5_pa_pk_as_req(mut code: *const krb5_data,
                                                  mut rep_out:
                                                      *mut *mut aux_type_pa_pk_as_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_pk_as_req;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_pk_as_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_pk_as_req;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1547:1"]
pub unsafe extern "C" fn encode_krb5_pa_pk_as_rep(mut rep:
                                                      *const aux_type_pa_pk_as_rep,
                                                  mut code_out:
                                                      *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_pk_as_rep, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1548:1"]
pub unsafe extern "C" fn decode_krb5_pa_pk_as_rep(mut code: *const krb5_data,
                                                  mut rep_out:
                                                      *mut *mut aux_type_pa_pk_as_rep)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_pk_as_rep;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_pk_as_rep, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_pk_as_rep;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1549:1"]
pub unsafe extern "C" fn encode_krb5_auth_pack(mut rep:
                                                   *const aux_type_auth_pack,
                                               mut code_out:
                                                   *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_auth_pack, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1550:1"]
pub unsafe extern "C" fn decode_krb5_auth_pack(mut code: *const krb5_data,
                                               mut rep_out:
                                                   *mut *mut aux_type_auth_pack)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_auth_pack;
    ret = k5_asn1_full_decode(code, &k5_atype_auth_pack, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_auth_pack;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1551:1"]
pub unsafe extern "C" fn encode_krb5_kdc_dh_key_info(mut rep:
                                                         *const aux_type_kdc_dh_key_info,
                                                     mut code_out:
                                                         *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_kdc_dh_key_info, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1552:1"]
pub unsafe extern "C" fn decode_krb5_kdc_dh_key_info(mut code:
                                                         *const krb5_data,
                                                     mut rep_out:
                                                         *mut *mut aux_type_kdc_dh_key_info)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_kdc_dh_key_info;
    ret = k5_asn1_full_decode(code, &k5_atype_kdc_dh_key_info, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_kdc_dh_key_info;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1553:1"]
pub unsafe extern "C" fn encode_krb5_reply_key_pack(mut rep:
                                                        *const aux_type_reply_key_pack,
                                                    mut code_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_reply_key_pack, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1554:1"]
pub unsafe extern "C" fn decode_krb5_reply_key_pack(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut aux_type_reply_key_pack)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_reply_key_pack;
    ret = k5_asn1_full_decode(code, &k5_atype_reply_key_pack, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_reply_key_pack;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1555:1"]
pub unsafe extern "C" fn encode_krb5_td_trusted_certifiers(mut rep:
                                                               *const aux_type_seqof_external_principal_identifier,
                                                           mut code_out:
                                                               *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_seqof_external_principal_identifier,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1557:1"]
pub unsafe extern "C" fn decode_krb5_td_trusted_certifiers(mut code:
                                                               *const krb5_data,
                                                           mut rep_out:
                                                               *mut *mut aux_type_seqof_external_principal_identifier)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_seqof_external_principal_identifier;
    ret =
        k5_asn1_full_decode(code,
                            &k5_atype_seqof_external_principal_identifier,
                            &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_seqof_external_principal_identifier;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1559:1"]
pub unsafe extern "C" fn encode_krb5_td_dh_parameters(mut rep:
                                                          *const aux_type_seqof_algorithm_identifier,
                                                      mut code_out:
                                                          *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_seqof_algorithm_identifier,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1560:1"]
pub unsafe extern "C" fn decode_krb5_td_dh_parameters(mut code:
                                                          *const krb5_data,
                                                      mut rep_out:
                                                          *mut *mut aux_type_seqof_algorithm_identifier)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_seqof_algorithm_identifier;
    ret =
        k5_asn1_full_decode(code, &k5_atype_seqof_algorithm_identifier,
                            &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_seqof_algorithm_identifier;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1561:1"]
pub unsafe extern "C" fn decode_krb5_principal_name(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut aux_type_pkinit_krb5_principal_name_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pkinit_krb5_principal_name_data;
    ret =
        k5_asn1_full_decode(code, &k5_atype_pkinit_krb5_principal_name_data,
                            &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pkinit_krb5_principal_name_data;
    return 0 as libc::c_int;
}
/* DISABLE_PKINIT */
/* not DISABLE_PKINIT */
#[no_mangle]
#[c2rust::src_loc = "1583:1"]
pub static mut k5_atype_typed_data_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_typed_data_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_typed_data_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1583:1"]
static mut aux_info_typed_data_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1583:1"]
pub static mut k5_atype_typed_data_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_typed_data_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_typed_data_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1583:1"]
static mut aux_info_typed_data_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1584:1"]
pub static mut k5_atype_typed_data_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_typed_data_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_typed_data_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1584:1"]
static mut aux_info_typed_data_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1584:1"]
pub static mut k5_atype_typed_data_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_pa_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_typed_data_1_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "1584:1"]
pub static mut aux_info_typed_data_1_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[c2rust::src_loc = "1585:33"]
static mut typed_data_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_typed_data_0 as *const atype_info,
         &k5_atype_typed_data_1 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1588:1"]
pub static mut k5_atype_typed_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_typed_data as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1588:1"]
static mut aux_seqinfo_typed_data: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[c2rust::src_loc = "1589:1"]
unsafe extern "C" fn aux_loadptr_typed_data_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_typed_data_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "1589:1"]
pub static mut k5_atype_typed_data_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_typed_data_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_typed_data_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1589:1"]
static mut aux_info_typed_data_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_typed_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_typed_data_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_typed_data as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1589:1"]
unsafe extern "C" fn aux_storeptr_typed_data_ptr(mut ptr: *mut libc::c_void,
                                                 mut val: *mut libc::c_void) {
    let ref mut fresh41 = *(val as *mut aux_type_typed_data_ptr);
    *fresh41 = ptr as aux_type_typed_data_ptr;
}
#[no_mangle]
#[c2rust::src_loc = "1591:1"]
pub static mut k5_atype_seqof_typed_data: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_typed_data>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_typed_data_ptr as *const atype_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1592:1"]
pub unsafe extern "C" fn encode_krb5_typed_data(mut rep:
                                                    *const aux_type_seqof_typed_data,
                                                mut code_out:
                                                    *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_seqof_typed_data, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1593:1"]
pub unsafe extern "C" fn decode_krb5_typed_data(mut code: *const krb5_data,
                                                mut rep_out:
                                                    *mut *mut aux_type_seqof_typed_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_seqof_typed_data;
    ret = k5_asn1_full_decode(code, &k5_atype_seqof_typed_data, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_seqof_typed_data;
    return 0 as libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1597:1"]
static mut aux_info_tokinfo_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1597:1"]
pub static mut k5_atype_tokinfo_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1597:1"]
static mut aux_info_tokinfo_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1597:1"]
pub static mut k5_atype_tokinfo_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1598:1"]
pub static mut k5_atype_tokinfo_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1598:1"]
static mut aux_info_tokinfo_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1598:1"]
static mut aux_info_tokinfo_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1598:1"]
pub static mut k5_atype_tokinfo_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1599:1"]
static mut aux_info_tokinfo_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1599:1"]
pub static mut k5_atype_tokinfo_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1599:1"]
static mut aux_info_tokinfo_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1599:1"]
pub static mut k5_atype_tokinfo_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1601:1"]
static mut aux_info_tokinfo_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1601:1"]
pub static mut k5_atype_tokinfo_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1601:1"]
static mut aux_info_tokinfo_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1601:1"]
pub static mut k5_atype_tokinfo_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1602:1"]
static mut aux_info_tokinfo_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1602:1"]
pub static mut k5_atype_tokinfo_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1602:1"]
static mut aux_info_tokinfo_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1602:1"]
pub static mut k5_atype_tokinfo_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1603:1"]
static mut aux_info_tokinfo_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1603:1"]
pub static mut k5_atype_tokinfo_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1603:1"]
static mut aux_info_tokinfo_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1603:1"]
pub static mut k5_atype_tokinfo_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1605:1"]
pub static mut k5_atype_tokinfo_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1605:1"]
static mut aux_info_tokinfo_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1605:1"]
static mut aux_info_tokinfo_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1605:1"]
pub static mut k5_atype_tokinfo_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1606:1"]
static mut aux_info_tokinfo_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1606:1"]
pub static mut k5_atype_tokinfo_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1606:1"]
static mut aux_info_tokinfo_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1606:1"]
pub static mut k5_atype_tokinfo_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_7>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1608:1"]
static mut aux_info_tokinfo_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1608:1"]
static mut aux_info_tokinfo_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1608:1"]
pub static mut k5_atype_tokinfo_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_8>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1608:1"]
pub static mut k5_atype_tokinfo_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_tokinfo_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_tokinfo_8_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1610:33"]
static mut otp_tokeninfo_fields: [*const atype_info; 9] =
    unsafe {
        [&k5_atype_tokinfo_0 as *const atype_info,
         &k5_atype_tokinfo_1 as *const atype_info,
         &k5_atype_tokinfo_2 as *const atype_info,
         &k5_atype_tokinfo_3 as *const atype_info,
         &k5_atype_tokinfo_4 as *const atype_info,
         &k5_atype_tokinfo_5 as *const atype_info,
         &k5_atype_tokinfo_6 as *const atype_info,
         &k5_atype_tokinfo_7 as *const atype_info,
         &k5_atype_tokinfo_8 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1615:1"]
pub static mut k5_atype_otp_tokeninfo: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_otp_tokeninfo>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_otp_tokeninfo as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1615:1"]
static mut aux_seqinfo_otp_tokeninfo: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1616:1"]
pub unsafe extern "C" fn encode_krb5_otp_tokeninfo(mut rep:
                                                       *const aux_type_otp_tokeninfo,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_otp_tokeninfo, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1617:1"]
pub unsafe extern "C" fn decode_krb5_otp_tokeninfo(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_otp_tokeninfo)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_otp_tokeninfo;
    ret = k5_asn1_full_decode(code, &k5_atype_otp_tokeninfo, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_otp_tokeninfo;
    return 0 as libc::c_int;
}
#[c2rust::src_loc = "1619:1"]
unsafe extern "C" fn aux_loadptr_otp_tokeninfo_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_otp_tokeninfo_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "1619:1"]
unsafe extern "C" fn aux_storeptr_otp_tokeninfo_ptr(mut ptr:
                                                        *mut libc::c_void,
                                                    mut val:
                                                        *mut libc::c_void) {
    let ref mut fresh42 = *(val as *mut aux_type_otp_tokeninfo_ptr);
    *fresh42 = ptr as aux_type_otp_tokeninfo_ptr;
}
#[c2rust::src_loc = "1619:1"]
static mut aux_info_otp_tokeninfo_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_otp_tokeninfo_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_otp_tokeninfo_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_otp_tokeninfo as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1619:1"]
pub static mut k5_atype_otp_tokeninfo_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_otp_tokeninfo_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_tokeninfo_ptr as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1620:1"]
pub static mut k5_atype_seqof_otp_tokeninfo: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nonempty_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_otp_tokeninfo>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_otp_tokeninfo_ptr as
                                   *const atype_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1621:1"]
pub static mut k5_atype_ptr_seqof_otp_tokeninfo: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_otp_tokeninfo>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_otp_tokeninfo as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1621:1"]
static mut aux_info_ptr_seqof_otp_tokeninfo: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_otp_tokeninfo as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_otp_tokeninfo as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_otp_tokeninfo as
                                 *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1621:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_otp_tokeninfo(mut ptr:
                                                              *mut libc::c_void,
                                                          mut val:
                                                              *mut libc::c_void) {
    let ref mut fresh43 = *(val as *mut aux_type_ptr_seqof_otp_tokeninfo);
    *fresh43 = ptr as aux_type_ptr_seqof_otp_tokeninfo;
}
#[c2rust::src_loc = "1621:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_otp_tokeninfo(mut p:
                                                             *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_otp_tokeninfo) as *mut libc::c_void;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1623:1"]
static mut aux_info_otp_ch_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1623:1"]
pub static mut k5_atype_otp_ch_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1623:1"]
static mut aux_info_otp_ch_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1623:1"]
pub static mut k5_atype_otp_ch_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1624:1"]
pub static mut k5_atype_otp_ch_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1624:1"]
static mut aux_info_otp_ch_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1624:1"]
pub static mut k5_atype_otp_ch_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1624:1"]
static mut aux_info_otp_ch_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1625:1"]
static mut aux_info_otp_ch_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1625:1"]
pub static mut k5_atype_otp_ch_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1625:1"]
static mut aux_info_otp_ch_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1625:1"]
pub static mut k5_atype_otp_ch_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1627:1"]
pub static mut k5_atype_otp_ch_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1627:1"]
static mut aux_info_otp_ch_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1627:1"]
pub static mut k5_atype_otp_ch_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1627:1"]
static mut aux_info_otp_ch_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1628:1"]
static mut aux_info_otp_ch_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1628:1"]
static mut aux_info_otp_ch_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1628:1"]
pub static mut k5_atype_otp_ch_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1628:1"]
pub static mut k5_atype_otp_ch_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_ch_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_ch_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1630:33"]
static mut pa_otp_challenge_fields: [*const atype_info; 5] =
    unsafe {
        [&k5_atype_otp_ch_0 as *const atype_info,
         &k5_atype_otp_ch_1 as *const atype_info,
         &k5_atype_otp_ch_2 as *const atype_info,
         &k5_atype_otp_ch_3 as *const atype_info,
         &k5_atype_otp_ch_4 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1634:1"]
static mut aux_seqinfo_pa_otp_challenge: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1634:1"]
pub static mut k5_atype_pa_otp_challenge: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_otp_challenge>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_otp_challenge as
                                   *const seq_info as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1635:1"]
pub unsafe extern "C" fn encode_krb5_pa_otp_challenge(mut rep:
                                                          *const aux_type_pa_otp_challenge,
                                                      mut code_out:
                                                          *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_otp_challenge, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1636:1"]
pub unsafe extern "C" fn decode_krb5_pa_otp_challenge(mut code:
                                                          *const krb5_data,
                                                      mut rep_out:
                                                          *mut *mut aux_type_pa_otp_challenge)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_otp_challenge;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_otp_challenge, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_otp_challenge;
    return 0 as libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1638:1"]
static mut aux_info_otp_req_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1638:1"]
pub static mut k5_atype_otp_req_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1638:1"]
static mut aux_info_otp_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1638:1"]
pub static mut k5_atype_otp_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1639:1"]
static mut aux_info_otp_req_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1639:1"]
pub static mut k5_atype_otp_req_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1639:1"]
pub static mut k5_atype_otp_req_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1639:1"]
static mut aux_info_otp_req_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1640:1"]
pub static mut k5_atype_otp_req_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1640:1"]
static mut aux_info_otp_req_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1640:1"]
pub static mut k5_atype_otp_req_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1640:1"]
static mut aux_info_otp_req_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1641:1"]
pub static mut k5_atype_otp_req_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1641:1"]
static mut aux_info_otp_req_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1641:1"]
pub static mut k5_atype_otp_req_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1641:1"]
static mut aux_info_otp_req_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1643:1"]
pub static mut k5_atype_otp_req_4: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_4>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_4 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1643:1"]
static mut aux_info_otp_req_4_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1643:1"]
pub static mut k5_atype_otp_req_4_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_4_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_4_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1643:1"]
static mut aux_info_otp_req_4: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1645:1"]
pub static mut k5_atype_otp_req_5: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_5>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_5 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1645:1"]
static mut aux_info_otp_req_5_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1645:1"]
pub static mut k5_atype_otp_req_5_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_5_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_5_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1645:1"]
static mut aux_info_otp_req_5: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1646:1"]
pub static mut k5_atype_otp_req_6_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_6_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_6_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1646:1"]
static mut aux_info_otp_req_6_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1646:1"]
static mut aux_info_otp_req_6: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1646:1"]
pub static mut k5_atype_otp_req_6: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_6>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_6 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1647:1"]
pub static mut k5_atype_otp_req_7: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_7>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_7 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1647:1"]
static mut aux_info_otp_req_7: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1647:1"]
pub static mut k5_atype_otp_req_7_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_7_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_7_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1647:1"]
static mut aux_info_otp_req_7_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1648:1"]
static mut aux_info_otp_req_8: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1648:1"]
pub static mut k5_atype_otp_req_8: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_8>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_8 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1648:1"]
static mut aux_info_otp_req_8_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1648:1"]
pub static mut k5_atype_otp_req_8_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_8_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_8_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1649:1"]
pub static mut k5_atype_otp_req_9: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_9>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_9 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1649:1"]
static mut aux_info_otp_req_9_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1649:1"]
pub static mut k5_atype_otp_req_9_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_9_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_9_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1649:1"]
static mut aux_info_otp_req_9: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1650:1"]
static mut aux_info_otp_req_10_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1650:1"]
pub static mut k5_atype_otp_req_10_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_10_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_10_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1650:1"]
static mut aux_info_otp_req_10: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1650:1"]
pub static mut k5_atype_otp_req_10: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_10>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_10 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1651:1"]
pub static mut k5_atype_otp_req_11: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_11>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_11 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1651:1"]
pub static mut k5_atype_otp_req_11_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_11_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_11_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1651:1"]
static mut aux_info_otp_req_11_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1651:1"]
static mut aux_info_otp_req_11: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1652:1"]
pub static mut k5_atype_otp_req_12_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_12_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_12_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1652:1"]
static mut aux_info_otp_req_12_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1652:1"]
static mut aux_info_otp_req_12: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1652:1"]
pub static mut k5_atype_otp_req_12: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_12>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_12 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1653:1"]
static mut aux_info_otp_req_13_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1653:1"]
pub static mut k5_atype_otp_req_13_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_13_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_13_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1653:1"]
static mut aux_info_otp_req_13: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1653:1"]
pub static mut k5_atype_otp_req_13: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_otp_req_13>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_otp_req_13 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1654:33"]
static mut pa_otp_req_fields: [*const atype_info; 14] =
    unsafe {
        [&k5_atype_otp_req_0 as *const atype_info,
         &k5_atype_otp_req_1 as *const atype_info,
         &k5_atype_otp_req_2 as *const atype_info,
         &k5_atype_otp_req_3 as *const atype_info,
         &k5_atype_otp_req_4 as *const atype_info,
         &k5_atype_otp_req_5 as *const atype_info,
         &k5_atype_otp_req_6 as *const atype_info,
         &k5_atype_otp_req_7 as *const atype_info,
         &k5_atype_otp_req_8 as *const atype_info,
         &k5_atype_otp_req_9 as *const atype_info,
         &k5_atype_otp_req_10 as *const atype_info,
         &k5_atype_otp_req_11 as *const atype_info,
         &k5_atype_otp_req_12 as *const atype_info,
         &k5_atype_otp_req_13 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1661:1"]
pub static mut k5_atype_pa_otp_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_otp_req>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_otp_req as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1661:1"]
static mut aux_seqinfo_pa_otp_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1662:1"]
pub unsafe extern "C" fn encode_krb5_pa_otp_req(mut rep:
                                                    *const aux_type_pa_otp_req,
                                                mut code_out:
                                                    *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_otp_req, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1663:1"]
pub unsafe extern "C" fn decode_krb5_pa_otp_req(mut code: *const krb5_data,
                                                mut rep_out:
                                                    *mut *mut aux_type_pa_otp_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_otp_req;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_otp_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_otp_req;
    return 0 as libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1665:1"]
static mut aux_info_pa_otp_enc_req_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1665:1"]
pub static mut k5_atype_pa_otp_enc_req_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_otp_enc_req_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_otp_enc_req_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1666:33"]
static mut pa_otp_enc_req_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_pa_otp_enc_req_0 as *const atype_info] };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1669:1"]
static mut aux_seqinfo_pa_otp_enc_req: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1669:1"]
pub static mut k5_atype_pa_otp_enc_req: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_data>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_otp_enc_req as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1670:1"]
pub unsafe extern "C" fn encode_krb5_pa_otp_enc_req(mut rep:
                                                        *const aux_type_pa_otp_enc_req,
                                                    mut code_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_otp_enc_req, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1671:1"]
pub unsafe extern "C" fn decode_krb5_pa_otp_enc_req(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut aux_type_pa_otp_enc_req)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_otp_enc_req;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_otp_enc_req, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_otp_enc_req;
    return 0 as libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1673:1"]
static mut aux_info_kkdcp_message_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1673:1"]
pub static mut k5_atype_kkdcp_message_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kkdcp_message_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kkdcp_message_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1673:1"]
static mut aux_info_kkdcp_message_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1673:1"]
pub static mut k5_atype_kkdcp_message_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kkdcp_message_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kkdcp_message_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1675:1"]
pub static mut k5_atype_kkdcp_message_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kkdcp_message_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kkdcp_message_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1675:1"]
static mut aux_info_kkdcp_message_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1675:1"]
pub static mut k5_atype_kkdcp_message_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kkdcp_message_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kkdcp_message_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1675:1"]
static mut aux_info_kkdcp_message_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1677:1"]
static mut aux_info_kkdcp_message_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1677:1"]
pub static mut k5_atype_kkdcp_message_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_kkdcp_message_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kkdcp_message_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1677:1"]
static mut aux_info_kkdcp_message_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1677:1"]
pub static mut k5_atype_kkdcp_message_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_kkdcp_message_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_kkdcp_message_2 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1679:33"]
static mut kkdcp_message_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_kkdcp_message_0 as *const atype_info,
         &k5_atype_kkdcp_message_1 as *const atype_info,
         &k5_atype_kkdcp_message_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1683:1"]
pub static mut k5_atype_kkdcp_message: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_kkdcp_message>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_kkdcp_message as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1683:1"]
static mut aux_seqinfo_kkdcp_message: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1685:1"]
pub unsafe extern "C" fn encode_krb5_kkdcp_message(mut rep:
                                                       *const aux_type_kkdcp_message,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_kkdcp_message, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1686:1"]
pub unsafe extern "C" fn decode_krb5_kkdcp_message(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_kkdcp_message)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_kkdcp_message;
    ret = k5_asn1_full_decode(code, &k5_atype_kkdcp_message, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_kkdcp_message;
    return 0 as libc::c_int;
}
// Initialized in run_static_initializers
#[c2rust::src_loc = "1688:1"]
static mut aux_info_vmac_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1688:1"]
pub static mut k5_atype_vmac_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_0_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1688:1"]
static mut aux_info_vmac_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1688:1"]
pub static mut k5_atype_vmac_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1689:1"]
pub static mut k5_atype_vmac_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1689:1"]
static mut aux_info_vmac_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1689:1"]
pub static mut k5_atype_vmac_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_1_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1689:1"]
static mut aux_info_vmac_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1690:1"]
static mut aux_info_vmac_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1690:1"]
static mut aux_info_vmac_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1690:1"]
pub static mut k5_atype_vmac_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1690:1"]
pub static mut k5_atype_vmac_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_2_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1691:1"]
pub static mut k5_atype_vmac_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1691:1"]
static mut aux_info_vmac_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1691:1"]
pub static mut k5_atype_vmac_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_3_untagged as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1691:1"]
static mut aux_info_vmac_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1692:33"]
static mut vmac_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_vmac_0 as *const atype_info,
         &k5_atype_vmac_1 as *const atype_info,
         &k5_atype_vmac_2 as *const atype_info,
         &k5_atype_vmac_3 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1695:1"]
static mut aux_seqinfo_vmac: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1695:1"]
pub static mut k5_atype_vmac: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_verifier_mac>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_vmac as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1696:1"]
unsafe extern "C" fn aux_storeptr_vmac_ptr(mut ptr: *mut libc::c_void,
                                           mut val: *mut libc::c_void) {
    let ref mut fresh44 = *(val as *mut aux_type_vmac_ptr);
    *fresh44 = ptr as aux_type_vmac_ptr;
}
#[c2rust::src_loc = "1696:1"]
static mut aux_info_vmac_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_vmac_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_vmac_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_vmac as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1696:1"]
pub static mut k5_atype_vmac_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_vmac_ptr>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_vmac_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1696:1"]
unsafe extern "C" fn aux_loadptr_vmac_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_vmac_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "1697:1"]
pub static mut k5_atype_opt_vmac_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_vmac_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_vmac_ptr as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1697:1"]
static mut aux_info_opt_vmac_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_vmac_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_vmac_ptr as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1697:1"]
unsafe extern "C" fn aux_present_opt_vmac_ptr(mut p: *const libc::c_void)
 -> libc::c_int {
    return (*(p as *mut aux_type_vmac_ptr) != 0 as aux_type_vmac_ptr) as
               libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1698:1"]
pub static mut k5_atype_vmacs: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nonempty_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_vmacs>() as
                                   libc::c_ulong,
                           tinfo:
                               &k5_atype_vmac_ptr as *const atype_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1699:1"]
static mut aux_info_vmacs_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_vmacs_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_vmacs_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype: &k5_atype_vmacs as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1699:1"]
pub static mut k5_atype_vmacs_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_vmacs_ptr>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_vmacs_ptr as *const ptr_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1699:1"]
unsafe extern "C" fn aux_storeptr_vmacs_ptr(mut ptr: *mut libc::c_void,
                                            mut val: *mut libc::c_void) {
    let ref mut fresh45 = *(val as *mut aux_type_vmacs_ptr);
    *fresh45 = ptr as aux_type_vmacs_ptr;
}
#[c2rust::src_loc = "1699:1"]
unsafe extern "C" fn aux_loadptr_vmacs_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_vmacs_ptr) as *mut libc::c_void;
}
#[no_mangle]
#[c2rust::src_loc = "1700:1"]
pub static mut k5_atype_opt_vmacs_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_optional,
                           size:
                               ::std::mem::size_of::<aux_type_opt_vmacs_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_opt_vmacs_ptr as *const optional_info
                                   as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1700:1"]
static mut aux_info_opt_vmacs_ptr: optional_info =
    unsafe {
        {
            let mut init =
                optional_info{is_present:
                                  Some(aux_present_opt_vmacs_ptr as
                                           unsafe extern "C" fn(_:
                                                                    *const libc::c_void)
                                               -> libc::c_int),
                              init: None,
                              basetype:
                                  &k5_atype_vmacs_ptr as *const atype_info,};
            init
        }
    };
#[c2rust::src_loc = "1700:1"]
unsafe extern "C" fn aux_present_opt_vmacs_ptr(mut p: *const libc::c_void)
 -> libc::c_int {
    let mut val: *const aux_type_vmacs_ptr = p as *const aux_type_vmacs_ptr;
    return (!(*val).is_null() && !(**val).is_null()) as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1702:1"]
pub static mut k5_atype_cammac_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1702:1"]
static mut aux_info_cammac_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1702:1"]
pub static mut k5_atype_cammac_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1702:1"]
static mut aux_info_cammac_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1703:1"]
static mut aux_info_cammac_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1703:1"]
pub static mut k5_atype_cammac_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1703:1"]
static mut aux_info_cammac_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1703:1"]
pub static mut k5_atype_cammac_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1704:1"]
static mut aux_info_cammac_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1704:1"]
pub static mut k5_atype_cammac_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1704:1"]
pub static mut k5_atype_cammac_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1704:1"]
static mut aux_info_cammac_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1705:1"]
pub static mut k5_atype_cammac_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1705:1"]
static mut aux_info_cammac_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1705:1"]
pub static mut k5_atype_cammac_3_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_cammac_3_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_cammac_3_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1705:1"]
static mut aux_info_cammac_3_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1706:33"]
static mut cammac_fields: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_cammac_0 as *const atype_info,
         &k5_atype_cammac_1 as *const atype_info,
         &k5_atype_cammac_2 as *const atype_info,
         &k5_atype_cammac_3 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1710:1"]
pub static mut k5_atype_cammac: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_cammac>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_cammac as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1710:1"]
static mut aux_seqinfo_cammac: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1712:1"]
pub unsafe extern "C" fn encode_krb5_cammac(mut rep: *const aux_type_cammac,
                                            mut code_out: *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_cammac,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1713:1"]
pub unsafe extern "C" fn decode_krb5_cammac(mut code: *const krb5_data,
                                            mut rep_out:
                                                *mut *mut aux_type_cammac)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_cammac;
    ret = k5_asn1_full_decode(code, &k5_atype_cammac, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_cammac;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1715:1"]
pub unsafe extern "C" fn encode_utf8_strings(mut rep:
                                                 *const aux_type_seqof_utf8_data,
                                             mut code_out:
                                                 *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_seqof_utf8_data, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1716:1"]
pub unsafe extern "C" fn decode_utf8_strings(mut code: *const krb5_data,
                                             mut rep_out:
                                                 *mut *mut aux_type_seqof_utf8_data)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_seqof_utf8_data;
    ret = k5_asn1_full_decode(code, &k5_atype_seqof_utf8_data, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_seqof_utf8_data;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1725:1"]
pub static mut k5_atype_inttime: atype_info =
    {
        let mut init =
            atype_info{type_0: atype_int,
                       size: ::std::mem::size_of::<time_t>() as libc::c_ulong,
                       tinfo: 0 as *const libc::c_void,};
        init
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1726:1"]
static mut aux_info_secure_cookie_0: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1726:1"]
pub static mut k5_atype_secure_cookie_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_secure_cookie_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_secure_cookie_0 as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1727:1"]
pub static mut k5_atype_secure_cookie_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_secure_cookie_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_secure_cookie_1 as *const offset_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1727:1"]
static mut aux_info_secure_cookie_1: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1728:33"]
static mut secure_cookie_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_secure_cookie_0 as *const atype_info,
         &k5_atype_secure_cookie_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1731:1"]
static mut aux_seqinfo_secure_cookie: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1731:1"]
pub static mut k5_atype_secure_cookie: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_secure_cookie>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_secure_cookie as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1732:1"]
pub unsafe extern "C" fn encode_krb5_secure_cookie(mut rep:
                                                       *const aux_type_secure_cookie,
                                                   mut code_out:
                                                       *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_secure_cookie, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1733:1"]
pub unsafe extern "C" fn decode_krb5_secure_cookie(mut code: *const krb5_data,
                                                   mut rep_out:
                                                       *mut *mut aux_type_secure_cookie)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_secure_cookie;
    ret = k5_asn1_full_decode(code, &k5_atype_secure_cookie, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_secure_cookie;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1748:1"]
pub static mut k5_atype_pa_pac_options_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pac_options_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pac_options_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1748:1"]
static mut aux_info_pa_pac_options_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1748:1"]
pub static mut k5_atype_pa_pac_options_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_pa_pac_options_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_pa_pac_options_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1748:1"]
static mut aux_info_pa_pac_options_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1749:33"]
static mut pa_pac_options_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_pa_pac_options_0 as *const atype_info] };
#[no_mangle]
#[c2rust::src_loc = "1752:1"]
pub static mut k5_atype_pa_pac_options: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_pa_pac_options>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_pa_pac_options as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1752:1"]
static mut aux_seqinfo_pa_pac_options: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1753:1"]
pub unsafe extern "C" fn encode_krb5_pa_pac_options(mut rep:
                                                        *const aux_type_pa_pac_options,
                                                    mut code_out:
                                                        *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_pa_pac_options, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1754:1"]
pub unsafe extern "C" fn decode_krb5_pa_pac_options(mut code:
                                                        *const krb5_data,
                                                    mut rep_out:
                                                        *mut *mut aux_type_pa_pac_options)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_pac_options;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_pac_options, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_pac_options;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1757:1"]
pub static mut k5_atype_spake_factor_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_factor_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_factor_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1757:1"]
static mut aux_info_spake_factor_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1757:1"]
pub static mut k5_atype_spake_factor_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_factor_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_factor_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1757:1"]
static mut aux_info_spake_factor_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1758:1"]
pub static mut k5_atype_spake_factor_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_factor_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_factor_1 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1758:1"]
static mut aux_info_spake_factor_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1758:1"]
pub static mut k5_atype_spake_factor_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_factor_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_factor_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1758:1"]
static mut aux_info_spake_factor_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1759:33"]
static mut spake_factor_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_spake_factor_0 as *const atype_info,
         &k5_atype_spake_factor_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1762:1"]
static mut aux_seqinfo_spake_factor: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1762:1"]
pub static mut k5_atype_spake_factor: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_spake_factor>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_spake_factor as *const seq_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1763:1"]
unsafe extern "C" fn aux_storeptr_spake_factor_ptr(mut ptr: *mut libc::c_void,
                                                   mut val:
                                                       *mut libc::c_void) {
    let ref mut fresh46 = *(val as *mut aux_type_spake_factor_ptr);
    *fresh46 = ptr as aux_type_spake_factor_ptr;
}
#[c2rust::src_loc = "1763:1"]
unsafe extern "C" fn aux_loadptr_spake_factor_ptr(mut p: *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_spake_factor_ptr) as *mut libc::c_void;
}
#[c2rust::src_loc = "1763:1"]
static mut aux_info_spake_factor_ptr: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_spake_factor_ptr as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_spake_factor_ptr as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_spake_factor as *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1763:1"]
pub static mut k5_atype_spake_factor_ptr: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_spake_factor_ptr>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_factor_ptr as *const ptr_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1764:1"]
pub static mut k5_atype_seqof_spake_factor: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_nullterm_sequence_of,
                           size:
                               ::std::mem::size_of::<aux_type_seqof_spake_factor>()
                                   as libc::c_ulong,
                           tinfo:
                               &k5_atype_spake_factor_ptr as *const atype_info
                                   as *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1765:1"]
pub static mut k5_atype_ptr_seqof_spake_factor: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_ptr,
                           size:
                               ::std::mem::size_of::<aux_type_ptr_seqof_spake_factor>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_ptr_seqof_spake_factor as
                                   *const ptr_info as *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1765:1"]
unsafe extern "C" fn aux_loadptr_ptr_seqof_spake_factor(mut p:
                                                            *const libc::c_void)
 -> *mut libc::c_void {
    return *(p as *mut aux_type_ptr_seqof_spake_factor) as *mut libc::c_void;
}
#[c2rust::src_loc = "1765:1"]
unsafe extern "C" fn aux_storeptr_ptr_seqof_spake_factor(mut ptr:
                                                             *mut libc::c_void,
                                                         mut val:
                                                             *mut libc::c_void) {
    let ref mut fresh47 = *(val as *mut aux_type_ptr_seqof_spake_factor);
    *fresh47 = ptr as aux_type_ptr_seqof_spake_factor;
}
#[c2rust::src_loc = "1765:1"]
static mut aux_info_ptr_seqof_spake_factor: ptr_info =
    unsafe {
        {
            let mut init =
                ptr_info{loadptr:
                             Some(aux_loadptr_ptr_seqof_spake_factor as
                                      unsafe extern "C" fn(_:
                                                               *const libc::c_void)
                                          -> *mut libc::c_void),
                         storeptr:
                             Some(aux_storeptr_ptr_seqof_spake_factor as
                                      unsafe extern "C" fn(_:
                                                               *mut libc::c_void,
                                                           _:
                                                               *mut libc::c_void)
                                          -> ()),
                         basetype:
                             &k5_atype_seqof_spake_factor as
                                 *const atype_info,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1766:1"]
pub unsafe extern "C" fn encode_krb5_spake_factor(mut rep:
                                                      *const aux_type_spake_factor,
                                                  mut code_out:
                                                      *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void,
                               &k5_atype_spake_factor, code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1767:1"]
pub unsafe extern "C" fn decode_krb5_spake_factor(mut code: *const krb5_data,
                                                  mut rep_out:
                                                      *mut *mut aux_type_spake_factor)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_spake_factor;
    ret = k5_asn1_full_decode(code, &k5_atype_spake_factor, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_spake_factor;
    return 0 as libc::c_int;
}
#[no_mangle]
#[c2rust::src_loc = "1769:1"]
pub static mut k5_atype_spake_support_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_spake_support>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_spake_support_0_untagged as
                                   *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1769:1"]
pub static mut k5_atype_spake_support_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_support_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_support_0 as *const tagged_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "1769:1"]
pub static mut aux_info_spake_support_0_untagged: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1769:1"]
static mut aux_info_spake_support_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1771:33"]
static mut spake_support_fields: [*const atype_info; 1] =
    unsafe { [&k5_atype_spake_support_0 as *const atype_info] };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1774:1"]
static mut aux_seqinfo_spake_support: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1774:1"]
pub static mut k5_atype_spake_support: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_spake_support>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_spake_support as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1776:1"]
static mut aux_info_spake_challenge_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1776:1"]
pub static mut k5_atype_spake_challenge_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_challenge_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_challenge_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1776:1"]
static mut aux_info_spake_challenge_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1776:1"]
pub static mut k5_atype_spake_challenge_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_challenge_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_challenge_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1777:1"]
pub static mut k5_atype_spake_challenge_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_challenge_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_challenge_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1777:1"]
static mut aux_info_spake_challenge_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1777:1"]
pub static mut k5_atype_spake_challenge_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_challenge_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_challenge_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1777:1"]
static mut aux_info_spake_challenge_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1778:1"]
static mut aux_info_spake_challenge_2_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1778:1"]
pub static mut k5_atype_spake_challenge_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_challenge_2>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_challenge_2 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1778:1"]
static mut aux_info_spake_challenge_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1778:1"]
pub static mut k5_atype_spake_challenge_2_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_challenge_2_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_challenge_2_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1780:33"]
static mut spake_challenge_fields: [*const atype_info; 3] =
    unsafe {
        [&k5_atype_spake_challenge_0 as *const atype_info,
         &k5_atype_spake_challenge_1 as *const atype_info,
         &k5_atype_spake_challenge_2 as *const atype_info]
    };
#[no_mangle]
#[c2rust::src_loc = "1784:1"]
pub static mut k5_atype_spake_challenge: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_spake_challenge>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_spake_challenge as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1784:1"]
static mut aux_seqinfo_spake_challenge: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
// Initialized in run_static_initializers
#[c2rust::src_loc = "1786:1"]
static mut aux_info_spake_response_0_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1786:1"]
pub static mut k5_atype_spake_response_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_response_0>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_response_0 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1786:1"]
static mut aux_info_spake_response_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1786:1"]
pub static mut k5_atype_spake_response_0_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_response_0_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_response_0_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1787:1"]
pub static mut k5_atype_spake_response_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_spake_response_1>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_response_1 as
                                   *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1787:1"]
static mut aux_info_spake_response_1_untagged: offset_info =
    offset_info{dataoff: [0; 2],
                c2rust_padding: [0; 6],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1787:1"]
pub static mut k5_atype_spake_response_1_untagged: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_offset,
                           size:
                               ::std::mem::size_of::<aux_type_spake_response_1_untagged>()
                                   as libc::c_ulong,
                           tinfo:
                               &aux_info_spake_response_1_untagged as
                                   *const offset_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1787:1"]
static mut aux_info_spake_response_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[c2rust::src_loc = "1788:33"]
static mut spake_response_fields: [*const atype_info; 2] =
    unsafe {
        [&k5_atype_spake_response_0 as *const atype_info,
         &k5_atype_spake_response_1 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1791:1"]
static mut aux_seqinfo_spake_response: seq_info =
    seq_info{fields: 0 as *const *const atype_info as *mut *const atype_info,
             n_fields: 0,};
#[no_mangle]
#[c2rust::src_loc = "1791:1"]
pub static mut k5_atype_spake_response: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_sequence,
                           size:
                               ::std::mem::size_of::<krb5_spake_response>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_seqinfo_spake_response as *const seq_info
                                   as *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1793:1"]
static mut aux_info_pa_spake_0: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1793:1"]
pub static mut k5_atype_pa_spake_0: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_spake_0>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_spake_0 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1794:1"]
static mut aux_info_pa_spake_1: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1794:1"]
pub static mut k5_atype_pa_spake_1: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_spake_1>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_spake_1 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1795:1"]
static mut aux_info_pa_spake_2: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1795:1"]
pub static mut k5_atype_pa_spake_2: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_spake_2>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_spake_2 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1796:1"]
static mut aux_info_pa_spake_3: tagged_info =
    tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                c2rust_padding: [0; 4],
                basetype: 0 as *const atype_info,};
#[no_mangle]
#[c2rust::src_loc = "1796:1"]
pub static mut k5_atype_pa_spake_3: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_tagged_thing,
                           size:
                               ::std::mem::size_of::<aux_type_pa_spake_3>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_spake_3 as *const tagged_info as
                                   *const libc::c_void,};
            init
        }
    };
#[c2rust::src_loc = "1797:33"]
static mut pa_spake_alternatives: [*const atype_info; 4] =
    unsafe {
        [&k5_atype_pa_spake_0 as *const atype_info,
         &k5_atype_pa_spake_1 as *const atype_info,
         &k5_atype_pa_spake_2 as *const atype_info,
         &k5_atype_pa_spake_3 as *const atype_info]
    };
// Initialized in run_static_initializers
#[c2rust::src_loc = "1801:1"]
static mut aux_info_pa_spake_choice: choice_info =
    choice_info{options:
                    0 as *const *const atype_info as *mut *const atype_info,
                n_options: 0,};
#[no_mangle]
#[c2rust::src_loc = "1801:1"]
pub static mut k5_cntype_pa_spake_choice: cntype_info =
    unsafe {
        {
            let mut init =
                cntype_info{type_0: cntype_choice,
                            tinfo:
                                &aux_info_pa_spake_choice as
                                    *const choice_info as
                                    *const libc::c_void,};
            init
        }
    };
// Initialized in run_static_initializers
#[no_mangle]
#[c2rust::src_loc = "1803:1"]
pub static mut aux_info_pa_spake: counted_info =
    counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                 c2rust_padding: [0; 5],
                 basetype: 0 as *const cntype_info,};
#[no_mangle]
#[c2rust::src_loc = "1803:1"]
pub static mut k5_atype_pa_spake: atype_info =
    unsafe {
        {
            let mut init =
                atype_info{type_0: atype_counted,
                           size:
                               ::std::mem::size_of::<krb5_pa_spake>() as
                                   libc::c_ulong,
                           tinfo:
                               &aux_info_pa_spake as *const counted_info as
                                   *const libc::c_void,};
            init
        }
    };
#[no_mangle]
#[c2rust::src_loc = "1804:1"]
pub unsafe extern "C" fn encode_krb5_pa_spake(mut rep:
                                                  *const aux_type_pa_spake,
                                              mut code_out:
                                                  *mut *mut krb5_data)
 -> krb5_error_code {
    return k5_asn1_full_encode(rep as *const libc::c_void, &k5_atype_pa_spake,
                               code_out);
}
#[no_mangle]
#[c2rust::src_loc = "1805:1"]
pub unsafe extern "C" fn decode_krb5_pa_spake(mut code: *const krb5_data,
                                              mut rep_out:
                                                  *mut *mut aux_type_pa_spake)
 -> krb5_error_code {
    let mut ret: krb5_error_code = 0;
    let mut rep: *mut libc::c_void = 0 as *mut libc::c_void;
    *rep_out = 0 as *mut aux_type_pa_spake;
    ret = k5_asn1_full_decode(code, &k5_atype_pa_spake, &mut rep);
    if ret != 0 { return ret }
    *rep_out = rep as *mut aux_type_pa_spake;
    return 0 as libc::c_int;
}
unsafe extern "C" fn run_static_initializers() {
    aux_info_der_data =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_der,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_der>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((4 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_der>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_octetstring =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bytestring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bytestring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_s_octetstring =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bytestring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bytestring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ostring_data =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_s_octetstring,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_s_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((4 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_s_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_generalstring =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bytestring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bytestring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(27 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_u_generalstring =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bytestring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bytestring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(27 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_gstring_data =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_generalstring,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_generalstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((4 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_generalstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_utf8string =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bytestring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bytestring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(12 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_utf8_data =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_utf8string,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_utf8string>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((4 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_utf8string>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_object_identifier =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bytestring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bytestring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_oid_data =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_object_identifier,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_object_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((4 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_object_identifier>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_realm_of_principal_data =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_gstring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_princname_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_princname_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_princname_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((36 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_princname_1_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_cseqof_gstring_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_cseqof_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((32 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_cseqof_gstring_data>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<krb5_int32>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_princname_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_princname_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_principal_data =
        {
            let mut init =
                seq_info{fields: princname_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_address_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_address_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_address_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_address_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_address_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_address_1_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_seqinfo_address =
        {
            let mut init =
                seq_info{fields: address_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_enc_data_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_data_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_data_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_data_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_data_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_data_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kvno,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kvno>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_data_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_data_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_data_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_encrypted_data =
        {
            let mut init =
                seq_info{fields: encrypted_data_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_authdata_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authdata_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authdata_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authdata_1_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_authdata_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authdata_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_authdata_elt =
        {
            let mut init =
                seq_info{fields: authdata_elt_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_authdata_elt_type_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_int32,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_authdata_elt_type =
        {
            let mut init =
                seq_info{fields: authdata_elt_type_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_authdata_types =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_cseqof_authdata_elt_type,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_cseqof_authdata_elt_type>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_cseqof_authdata_elt_type>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_keyblock_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_keyblock_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_keyblock_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_keyblock_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_keyblock_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_keyblock_1_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_seqinfo_encryption_key =
        {
            let mut init =
                seq_info{fields: encryption_key_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_checksum_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_checksum_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_checksum_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_checksum_1_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_checksum_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_checksum_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_checksum =
        {
            let mut init =
                seq_info{fields: checksum_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_last_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_last_req_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_last_req_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_last_req_type,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_last_req_type>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_last_req_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_last_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_last_req_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_last_req_ent =
        {
            let mut init =
                seq_info{fields: lr_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_ticket_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ticket_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ticket_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ticket_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ticket_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ticket_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ticket_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ticket_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ticket_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ticket_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_ticket =
        {
            let mut init =
                seq_info{fields: ticket_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_ticket =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_ticket,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_data_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_data_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_data_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_data_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_data_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_data_2_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_seqinfo_pa_data =
        {
            let mut init =
                seq_info{fields: pa_data_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_enc_kdc_rep_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_encryption_key,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_last_req_ptr,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_last_req_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((28 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((36 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_6_def_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_6_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_6_def_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((44 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_8_def_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_8_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_8_def_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_10_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_10 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_10_untagged,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_11_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_host_addresses,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_host_addresses>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_11 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_11_untagged,};
            init.set_tagval(11 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_12_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_seqof_pa_data,};
            init.set_dataoff((72 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_kdc_rep_12 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_12_untagged,};
            init.set_tagval(12 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_enc_kdc_rep_part =
        {
            let mut init =
                seq_info{fields: enc_kdc_rep_part_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 13]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_req_body_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_gstring_data,};
            init.set_dataoff((128 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((44 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((52 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_8_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_cseqof_int32,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_cseqof_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((56 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_cseqof_int32>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_int>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_req_body_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_host_addresses,};
            init.set_dataoff((72 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_host_addresses>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_10 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_10_untagged,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_10_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_encrypted_data,};
            init.set_dataoff((80 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_req_body_11 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_req_body_11_untagged,};
            init.set_tagval(11 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_req_body_11_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_seqof_ticket,};
            init.set_dataoff((120 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_ticket>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_kdc_req_body_hack =
        {
            let mut init =
                seq_info{fields: kdc_req_hack_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 12]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_transited_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_transited_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_transited_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_octet,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_octet>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_transited_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_transited_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_transited_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_transited =
        {
            let mut init =
                seq_info{fields: transited_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_safe_body_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_body_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_body_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_body_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_body_2_def_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((28 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_body_2_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body_2_def_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_body_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_body_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_seqno,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_seqno>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_body_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_address_ptr,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_address_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_body_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_body_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_body_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_address_ptr,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_address_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_safe_body =
        {
            let mut init =
                seq_info{fields: safe_body_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 6]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_cred_info_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_encryption_key,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_realm_of_principal,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_krb5_flags,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((36 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((44 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_realm_of_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_info_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_10_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_host_addresses,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_host_addresses>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_info_10 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_info_10_untagged,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_cred_info =
        {
            let mut init =
                seq_info{fields: krb_cred_info_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 11]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_etype_info_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_etype_info_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_etype_info_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_etype_info_1_def_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_etype_info_1_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_etype_info_1_def_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_etype_info_entry =
        {
            let mut init =
                seq_info{fields: etype_info_entry_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_etype_info2_1_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_etype_info2_1_def_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_etype_info2_1_def_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_u_generalstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_u_generalstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_u_generalstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_etype_info2_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_etype_info2_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_etype_info2_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_etype_info2_entry =
        {
            let mut init =
                seq_info{fields: etype_info2_entry_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_sch_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_der_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_der_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_sch_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sch_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_sch_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_checksum,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_sch_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sch_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_sam_challenge_2 =
        {
            let mut init =
                seq_info{fields: sam_challenge_2_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_schb_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((80 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((96 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((112 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_schb_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_schb_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_schb_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((116 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_sam_challenge_2_body =
        {
            let mut init =
                seq_info{fields: sam_challenge_2_body_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 10]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_esre_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_esre_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_esre_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_esre_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_esre_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_esre_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_enc_sam_response_enc_2 =
        {
            let mut init =
                seq_info{fields: enc_sam_response_enc_2_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_sam_resp_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_sam_resp_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sam_resp_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_sam_resp_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_sam_resp_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sam_resp_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_sam_resp_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sam_resp_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_sam_resp_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_sam_resp_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_sam_resp_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sam_resp_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_sam_resp_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_sam_resp_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_sam_resp_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_sam_response_2 =
        {
            let mut init =
                seq_info{fields: sam_response_2_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_authenticator_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_checksum_ptr,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_checksum_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((28 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_encryption_key,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_seqno,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_seqno>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_authenticator_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_authenticator_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_authenticator_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_auth_data_ptr,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_auth_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_authenticator =
        {
            let mut init =
                seq_info{fields: authenticator_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 9]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_authenticator =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_authenticator,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_encryption_key,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_transited,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_transited>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((52 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((60 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tkt_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_host_addresses,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_host_addresses>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_10_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_auth_data_ptr,};
            init.set_dataoff((72 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_auth_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_tkt_10 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_tkt_10_untagged,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_enc_tkt_part =
        {
            let mut init =
                seq_info{fields: enc_tkt_part_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 11]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_enc_tkt_part =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_enc_tkt_part,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_as_rep_part =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_part,};
            init.set_tagval(25 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_tgs_rep_part =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_kdc_rep_part,};
            init.set_tagval(26 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_uint,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_uint>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_rep_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_seqof_pa_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_rep_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_rep_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_rep_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_rep_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ticket_ptr,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ticket_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_rep_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_rep_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_kdc_rep =
        {
            let mut init =
                seq_info{fields: kdc_rep_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 7]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_as_rep =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep,};
            init.set_tagval(11 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tgs_rep =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_rep,};
            init.set_tagval(13 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_req_msg_type,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_req_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_req_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_req_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ticket_ptr,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ticket_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_req_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_req_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_req_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_req_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_req_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_ap_req =
        {
            let mut init =
                seq_info{fields: ap_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_ap_req =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_ap_req,};
            init.set_tagval(14 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_rep_msg_type,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_rep_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_rep_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_ap_rep =
        {
            let mut init =
                seq_info{fields: ap_rep_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_ap_rep =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_ap_rep,};
            init.set_tagval(15 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_rep_enc_part_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_rep_enc_part_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_rep_enc_part_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_encryption_key,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_seqno,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_seqno>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ap_rep_enc_part_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ap_rep_enc_part_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_ap_rep_enc_part =
        {
            let mut init =
                seq_info{fields: ap_rep_enc_part_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_ap_rep_enc_part =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_ap_rep_enc_part,};
            init.set_tagval(27 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_req_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_req_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_uint,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_uint>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_req_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_req_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kdc_req_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_seqof_pa_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kdc_req_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_req_body,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_kdc_req =
        {
            let mut init =
                seq_info{fields: kdc_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_as_req =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_req,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tgs_req =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kdc_req,};
            init.set_tagval(12 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_as_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_as_req_msg_type,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tgs_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tgs_req_msg_type,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_as_req =
        {
            let mut init =
                seq_info{fields: as_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_as_req_encode =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_as_req,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_tgs_req =
        {
            let mut init =
                seq_info{fields: tgs_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_tgs_req_encode =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_tgs_req,};
            init.set_tagval(12 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_msg_type,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_body,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum_ptr,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_safe =
        {
            let mut init =
                seq_info{fields: safe_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_safe =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_safe,};
            init.set_tagval(20 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_checksum_only =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum_ptr,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_with_body_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_with_body_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_with_body_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_saved_safe_body_ptr,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_saved_safe_body_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_safe_with_body_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_safe_with_body_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_safe_with_body_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_safe_checksum_only_ptr,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_safe_checksum_only_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_safe_with_body =
        {
            let mut init =
                seq_info{fields: safe_with_body_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_safe_with_body =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_safe_with_body,};
            init.set_tagval(20 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_msg_type,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_priv =
        {
            let mut init =
                seq_info{fields: priv_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_priv =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_priv,};
            init.set_tagval(21 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_enc_part_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_enc_part_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_2_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype:
                                &k5_atype_priv_enc_part_2_def_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_2_def_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((28 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_enc_part_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_seqno,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_seqno>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_address_ptr,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_address_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_enc_part_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_priv_enc_part_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_priv_enc_part_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_address_ptr,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_address_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_priv_enc_part =
        {
            let mut init =
                seq_info{fields: priv_enc_part_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 6]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_priv_enc_part =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_priv_enc_part,};
            init.set_tagval(28 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_msg_type,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_ticket,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_ticket>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cred_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cred_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cred_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_cred =
        {
            let mut init =
                seq_info{fields: cred_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_krb5_cred =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_cred,};
            init.set_tagval(22 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptrseqof_cred_info,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptrseqof_cred_info>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_cred_part_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_cred_part_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_cred_part_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_3_def =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype:
                                &k5_atype_enc_cred_part_3_def_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_3_def_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((12 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_address_ptr,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_address_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_cred_part_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_address_ptr,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_address_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_enc_cred_part_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_enc_cred_part_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_enc_cred_part =
        {
            let mut init =
                seq_info{fields: enc_cred_part_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 6]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_enc_cred_part =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_enc_cred_part,};
            init.set_tagval(29 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_krb5_version,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_msg_type,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((12 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_uint32,};
            init.set_dataoff((20 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_uint32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_realm_of_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_10 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_10_untagged,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_10_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_11_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_gstring_data,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_error_11 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_11_untagged,};
            init.set_tagval(11 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_12 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_error_12_untagged,};
            init.set_tagval(12 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_error_12_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_untagged_krb5_error =
        {
            let mut init =
                seq_info{fields: error_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 13]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_krb5_error =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_untagged_krb5_error,};
            init.set_tagval(30 as libc::c_int as libc::c_uint);
            init.set_tagtype(APPLICATION as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_enc_ts_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_enc_ts_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_enc_ts_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_enc_ts_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_enc_ts_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_enc_ts_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_pa_enc_ts =
        {
            let mut init =
                seq_info{fields: pa_enc_ts_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_setpw_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_setpw_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_setpw_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_setpw_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_setpw_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_setpw_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_setpw_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_setpw_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_setpw_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_setpw_req =
        {
            let mut init =
                seq_info{fields: setpw_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_for_user_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_for_user_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_for_user_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_for_user_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_for_user_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_for_user_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_for_user_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_for_user_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_for_user_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_for_user_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_gstring_data,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_for_user_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_for_user_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_pa_for_user =
        {
            let mut init =
                seq_info{fields: pa_for_user_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_s4u_userid_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_s4u_userid_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_s4u_userid_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_s4u_userid_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_s4u_userid_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_s4u_userid_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_s4u_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_s4u_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_s4u_userid_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_s4u_userid_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_s4u_userid_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_s4u_userid_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_s4u_userid_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_s4u_userid_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_s4u_userid_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_krb5_flags,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_s4u_userid_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_s4u_userid_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_s4u_userid =
        {
            let mut init =
                seq_info{fields: s4u_userid_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_s4u_x509_user_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_s4u_x509_user_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_s4u_x509_user_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_s4u_userid,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_s4u_userid>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_s4u_x509_user_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_s4u_x509_user_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_s4u_x509_user_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_pa_s4u_x509_user =
        {
            let mut init =
                seq_info{fields: pa_s4u_x509_user_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_pac_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_pac_req_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pac_req_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_boolean,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_boolean>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_pa_pac_req =
        {
            let mut init =
                seq_info{fields: pa_pac_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_etype_list =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_cseqof_int32,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_cseqof_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((0 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_cseqof_int32>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_int>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_fast_armor_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_armor_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_armor_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_armor_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_armor_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_armor_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_fast_armor =
        {
            let mut init =
                seq_info{fields: fast_armor_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_fast_armored_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_armored_req_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_armored_req_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_fast_armor,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_fast_armor>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_armored_req_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_armored_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_armored_req_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_armored_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_armored_req_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_armored_req_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_fast_armored_req =
        {
            let mut init =
                seq_info{fields: fast_armored_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_fx_fast_request =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_armored_req,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_req_padata =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_pa_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_req_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_req_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_req_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_fast_req_padata,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_fast_req_padata>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_req_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_req_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_req_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_kdc_req_body,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_kdc_req_body>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_fast_req =
        {
            let mut init =
                seq_info{fields: fast_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_fast_finished_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_finished_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_finished_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_finished_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_finished_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_finished_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_finished_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_finished_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_finished_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_realm_of_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_finished_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_finished_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_finished_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_principal,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_finished_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_finished_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_finished_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_fast_finished =
        {
            let mut init =
                seq_info{fields: fast_finished_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_fast_response_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_response_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_response_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_pa_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_response_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_encryption_key,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_response_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_response_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_response_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_fast_finished,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_fast_finished>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_response_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_response_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_fast_response_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_fast_response_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_response_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_fast_response =
        {
            let mut init =
                seq_info{fields: fast_response_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_fast_rep_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_encrypted_data,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_fast_rep =
        {
            let mut init =
                seq_info{fields: fast_rep_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_fx_fast_reply =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_fast_rep,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ad_kdcissued_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_realm_of_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_realm_of_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ad_kdcissued_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ad_kdcissued_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_auth_data_ptr,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_auth_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_ad_kdcissued_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ad_kdcissued_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_ad_kdc_issued =
        {
            let mut init =
                seq_info{fields: ad_kdcissued_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_princ_plus_realm_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_principal_data,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_princ_plus_realm_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_realm_of_principal_data,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_princ_plus_realm_data =
        {
            let mut init =
                seq_info{fields: princ_plus_realm_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_spdata_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_princ_plus_realm,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_princ_plus_realm>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spdata_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spdata_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spdata_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spdata_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spdata_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spdata_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spdata_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spdata_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_princ_plus_realm,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_princ_plus_realm>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spdata_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spdata_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spdata_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_seqof_pa_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spdata_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spdata_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spdata_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_auth_data_ptr,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_auth_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_ad_signedpath_data =
        {
            let mut init =
                seq_info{fields: ad_signedpath_data_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_signedpath_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_signedpath_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_signedpath_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_signedpath_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_signedpath_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_signedpath_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_signedpath_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_princ_plus_realm,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_princ_plus_realm>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_signedpath_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_signedpath_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_signedpath_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_seqof_pa_data,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_signedpath_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_signedpath_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_ad_signedpath =
        {
            let mut init =
                seq_info{fields: ad_signedpath_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_iakerb_header_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_iakerb_header_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_iakerb_header_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_iakerb_header_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data_ptr,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_iakerb_header_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_iakerb_header_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_iakerb_header =
        {
            let mut init =
                seq_info{fields: iakerb_header_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_iakerb_finished_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_iakerb_finished_0_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_iakerb_finished_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_iakerb_finished =
        {
            let mut init =
                seq_info{fields: iakerb_finished_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_algid_0 =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_oid_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_oid_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_algid_1 =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_der_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_der_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_algorithm_identifier =
        {
            let mut init =
                seq_info{fields: algorithm_identifier_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_kdf_alg_id_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_oid_data,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_kdf_alg_id =
        {
            let mut init =
                seq_info{fields: kdf_alg_id_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pkinit_princ_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_realm_of_principal_data,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pkinit_princ_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_principal_data,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_pkinit_krb5_principal_name_data =
        {
            let mut init =
                seq_info{fields:
                             pkinit_krb5_principal_name_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pkinit_krb5_principal_name_wrapped =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pkinit_krb5_principal_name,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(UNIVERSAL as libc::c_int as libc::c_uint);
            init.set_construction(PRIMITIVE as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_oinfo_notag =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_algorithm_identifier,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_algorithm_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_oinfo_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_pkinit_krb5_principal_name_wrapped,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_pkinit_krb5_principal_name_wrapped>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_oinfo_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_oinfo_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_oinfo_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_oinfo_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_oinfo_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_pkinit_krb5_principal_name_wrapped,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_pkinit_krb5_principal_name_wrapped>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_oinfo_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_oinfo_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_oinfo_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_sp80056a_other_info =
        {
            let mut init =
                seq_info{fields: sp80056a_other_info_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_supp_pub_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_supp_pub_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_supp_pub_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_supp_pub_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_supp_pub_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_supp_pub_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_supp_pub_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_supp_pub_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_supp_pub_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_pkinit_supp_pub_info =
        {
            let mut init =
                seq_info{fields: pkinit_supp_pub_info_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_ostring_checksum =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pk_authenticator_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_kerberos_time,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pk_authenticator_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pk_authenticator_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pk_authenticator_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_checksum,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data_ptr,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pk_authenticator_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pk_authenticator_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_pk_authenticator =
        {
            let mut init =
                seq_info{fields: pk_authenticator_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_s_bitstring =
        {
            let mut init =
                string_info{tagval: [0; 1],
                            c2rust_padding: [0; 7],
                            enc:
                                Some(k5_asn1_encode_bitstring as
                                         unsafe extern "C" fn(_: *mut asn1buf,
                                                              _:
                                                                  *const *mut uint8_t,
                                                              _: size_t)
                                             -> krb5_error_code),
                            dec:
                                Some(k5_asn1_decode_bitstring as
                                         unsafe extern "C" fn(_:
                                                                  *const uint8_t,
                                                              _: size_t,
                                                              _:
                                                                  *mut *mut uint8_t,
                                                              _: *mut size_t)
                                             -> krb5_error_code),};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_bitstring_data =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_s_bitstring,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_s_bitstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((4 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_s_bitstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_spki_0 =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_algorithm_identifier,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_algorithm_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spki_1 =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_bitstring_data,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_bitstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_subject_pk_info =
        {
            let mut init =
                seq_info{fields: subject_pk_info_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_auth_pack_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_pk_authenticator,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_pk_authenticator>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_auth_pack_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_auth_pack_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_auth_pack_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_auth_pack_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_auth_pack_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_subject_pk_info_ptr,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_subject_pk_info_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_auth_pack_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_algorithm_identifier,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_algorithm_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_auth_pack_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_auth_pack_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_auth_pack_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_auth_pack_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_auth_pack_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_auth_pack_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_auth_pack_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_auth_pack_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_supported_kdfs,};
            init.set_dataoff((80 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_supported_kdfs>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_auth_pack =
        {
            let mut init =
                seq_info{fields: auth_pack_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_extprinc_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_extprinc_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_extprinc_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_extprinc_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_extprinc_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_extprinc_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_extprinc_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_extprinc_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_extprinc_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_external_principal_identifier =
        {
            let mut init =
                seq_info{fields:
                             external_principal_identifier_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_pk_as_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_pk_as_req_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_req_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_req_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_external_principal_identifier,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_external_principal_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_pk_as_req_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_pk_as_req_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_req_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_pa_pk_as_req =
        {
            let mut init =
                seq_info{fields: pa_pk_as_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_dh_rep_info_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_rep_info_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_dh_rep_info_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_dh_rep_info_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_rep_info_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_dh_rep_info_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_dh_rep_info_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_rep_info_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_dh_rep_info_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ptr_kdf_alg_id,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_kdf_alg_id>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_dh_rep_info =
        {
            let mut init =
                seq_info{fields: dh_rep_info_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_dh_key_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_bitstring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_bitstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_dh_key_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_key_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_dh_key_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_dh_key_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_key_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_dh_key_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_key_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_dh_key_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((20 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_kdc_dh_key_info =
        {
            let mut init =
                seq_info{fields: kdc_dh_key_info_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_reply_key_pack_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encryption_key,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encryption_key>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_reply_key_pack_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_reply_key_pack_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_reply_key_pack_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_reply_key_pack_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_reply_key_pack_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_reply_key_pack =
        {
            let mut init =
                seq_info{fields: reply_key_pack_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_pk_as_rep_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_dh_rep_info,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_rep_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ostring_data,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pk_as_rep_choice =
        {
            let mut init =
                choice_info{options: pa_pk_as_rep_alternatives.as_mut_ptr(),
                            n_options:
                                (::std::mem::size_of::<[*const atype_info; 2]>()
                                     as
                                     libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                     as
                                                                     libc::c_ulong),};
            init
        };
    aux_info_pa_pk_as_rep =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_pa_pk_as_rep_choice,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_pa_pk_as_rep_choice>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((0 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_pa_pk_as_rep_choice>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(1 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<krb5_pa_pk_as_rep_selection>()
                                 as libc::c_ulong as libc::c_uint);
            init
        };
    aux_info_typed_data_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_typed_data_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_typed_data_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((4 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_typed_data_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_typed_data_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_typed_data_1_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_octetstring,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_octetstring>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((8 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_octetstring>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<libc::c_uint>() as
                                 libc::c_ulong as libc::c_uint);
            init
        };
    aux_seqinfo_typed_data =
        {
            let mut init =
                seq_info{fields: typed_data_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_tokinfo_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_utf8_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_utf8_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32_minus1,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32_minus1>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32_minus1,};
            init.set_dataoff((44 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32_minus1>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((48 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_utf8_data,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_utf8_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_seqof_algorithm_identifier,};
            init.set_dataoff((80 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_seqof_algorithm_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_tokinfo_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_tokinfo_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_tokinfo_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32_minus1,};
            init.set_dataoff((88 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32_minus1>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_otp_tokeninfo =
        {
            let mut init =
                seq_info{fields: otp_tokeninfo_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 9]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_otp_ch_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_ch_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_ch_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_ch_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_utf8_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_utf8_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_ch_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_ch_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_ch_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_otp_tokeninfo,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_otp_tokeninfo>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_ch_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_ch_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_ch_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_ch_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_ch_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_gstring_data,};
            init.set_dataoff((40 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_ch_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_ch_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_ch_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_pa_otp_challenge =
        {
            let mut init =
                seq_info{fields: pa_otp_challenge_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 5]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_otp_req_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype:
                                &k5_atype_opt_ptr_algorithm_identifier,};
            init.set_dataoff((56 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ptr_algorithm_identifier>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_4_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32_minus1,};
            init.set_dataoff((64 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32_minus1>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_4 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_4_untagged,};
            init.set_tagval(4 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_5_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((72 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_5 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_5_untagged,};
            init.set_tagval(5 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_6_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_utf8_data,};
            init.set_dataoff((88 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_utf8_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_6 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_6_untagged,};
            init.set_tagval(6 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_7 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_7_untagged,};
            init.set_tagval(7 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_7_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((104 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_8 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_8_untagged,};
            init.set_tagval(8 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_8_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kerberos_time,};
            init.set_dataoff((120 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kerberos_time>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_9_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((128 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_9 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_9_untagged,};
            init.set_tagval(9 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_10_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32_minus1,};
            init.set_dataoff((144 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32_minus1>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_10 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_10_untagged,};
            init.set_tagval(10 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_11_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data,};
            init.set_dataoff((152 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_11 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_11_untagged,};
            init.set_tagval(11 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_12_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_utf8_data,};
            init.set_dataoff((168 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_utf8_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_12 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_12_untagged,};
            init.set_tagval(12 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_otp_req_13_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_utf8_data,};
            init.set_dataoff((184 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_utf8_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_otp_req_13 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_otp_req_13_untagged,};
            init.set_tagval(13 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_pa_otp_req =
        {
            let mut init =
                seq_info{fields: pa_otp_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 14]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_otp_enc_req_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_ostring_data,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(1 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_pa_otp_enc_req =
        {
            let mut init =
                seq_info{fields: pa_otp_enc_req_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_kkdcp_message_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kkdcp_message_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kkdcp_message_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kkdcp_message_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_gstring_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_gstring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kkdcp_message_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kkdcp_message_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_kkdcp_message_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32,};
            init.set_dataoff((32 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_kkdcp_message_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_kkdcp_message_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_kkdcp_message =
        {
            let mut init =
                seq_info{fields: kkdcp_message_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_vmac_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_principal,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_principal>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_vmac_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_vmac_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_vmac_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_kvno,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_kvno>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_vmac_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_vmac_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_vmac_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_vmac_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_vmac_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_int32,};
            init.set_dataoff((12 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_vmac_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_vmac_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_vmac_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_checksum,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_checksum>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_vmac =
        {
            let mut init =
                seq_info{fields: vmac_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_cammac_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_auth_data_ptr,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_auth_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cammac_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cammac_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cammac_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_vmac_ptr,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_vmac_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cammac_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cammac_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cammac_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_vmac_ptr,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_vmac_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_cammac_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cammac_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cammac_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_cammac_3_untagged,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_cammac_3_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_vmacs_ptr,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_vmacs_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_cammac =
        {
            let mut init =
                seq_info{fields: cammac_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 4]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_secure_cookie_0 =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_inttime,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_inttime>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_secure_cookie_1 =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_pa_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_pa_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_secure_cookie =
        {
            let mut init =
                seq_info{fields: secure_cookie_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_pac_options_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_pa_pac_options_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_pac_options_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_krb5_flags,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_krb5_flags>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_seqinfo_pa_pac_options =
        {
            let mut init =
                seq_info{fields: pa_pac_options_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_spake_factor_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_factor_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_factor_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spake_factor_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_opt_ostring_data_ptr,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_opt_ostring_data_ptr>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_factor_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_factor_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_spake_factor =
        {
            let mut init =
                seq_info{fields: spake_factor_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_spake_support_0_untagged =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_cseqof_int32,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_cseqof_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((0 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_cseqof_int32>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(0 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<int32_t>() as libc::c_ulong
                                 as libc::c_uint);
            init
        };
    aux_info_spake_support_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_support_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_spake_support =
        {
            let mut init =
                seq_info{fields: spake_support_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 1]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_spake_challenge_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_int32,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_int32>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_challenge_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_challenge_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spake_challenge_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_challenge_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spake_challenge_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_challenge_2_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ptr_seqof_spake_factor,};
            init.set_dataoff((24 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ptr_seqof_spake_factor>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_challenge_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_challenge_2_untagged,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_spake_challenge =
        {
            let mut init =
                seq_info{fields: spake_challenge_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 3]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_spake_response_0_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_ostring_data,};
            init.set_dataoff((0 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_ostring_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_response_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_response_0_untagged,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_spake_response_1_untagged =
        {
            let mut init =
                offset_info{dataoff: [0; 2],
                            c2rust_padding: [0; 6],
                            basetype: &k5_atype_encrypted_data,};
            init.set_dataoff((16 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_type_encrypted_data>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init
        };
    aux_info_spake_response_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_response_1_untagged,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_seqinfo_spake_response =
        {
            let mut init =
                seq_info{fields: spake_response_fields.as_mut_ptr(),
                         n_fields:
                             (::std::mem::size_of::<[*const atype_info; 2]>()
                                  as
                                  libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                  as
                                                                  libc::c_ulong),};
            init
        };
    aux_info_pa_spake_0 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_support,};
            init.set_tagval(0 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_spake_1 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_challenge,};
            init.set_tagval(1 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_spake_2 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_spake_response,};
            init.set_tagval(2 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_spake_3 =
        {
            let mut init =
                tagged_info{tagval_tagtype_construction_implicit: [0; 4],
                            c2rust_padding: [0; 4],
                            basetype: &k5_atype_encrypted_data,};
            init.set_tagval(3 as libc::c_int as libc::c_uint);
            init.set_tagtype(CONTEXT_SPECIFIC as libc::c_int as libc::c_uint);
            init.set_construction(CONSTRUCTED as libc::c_int as libc::c_uint);
            init.set_implicit(0 as libc::c_int as libc::c_uint);
            init
        };
    aux_info_pa_spake_choice =
        {
            let mut init =
                choice_info{options: pa_spake_alternatives.as_mut_ptr(),
                            n_options:
                                (::std::mem::size_of::<[*const atype_info; 4]>()
                                     as
                                     libc::c_ulong).wrapping_div(::std::mem::size_of::<*const atype_info>()
                                                                     as
                                                                     libc::c_ulong),};
            init
        };
    aux_info_pa_spake =
        {
            let mut init =
                counted_info{dataoff_lenoff_lensigned_lensize: [0; 3],
                             c2rust_padding: [0; 5],
                             basetype: &k5_cntype_pa_spake_choice,};
            init.set_dataoff((8 as
                                  libc::c_ulong).wrapping_add((0 as
                                                                   libc::c_int
                                                                   as
                                                                   libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_ptrtype_pa_spake_choice>()
                                                                                                   as
                                                                                                   libc::c_ulong))
                                 as libc::c_uint);
            init.set_lenoff((0 as
                                 libc::c_ulong).wrapping_add((0 as libc::c_int
                                                                  as
                                                                  libc::c_ulong).wrapping_mul(::std::mem::size_of::<*mut aux_counttype_pa_spake_choice>()
                                                                                                  as
                                                                                                  libc::c_ulong))
                                as libc::c_uint);
            init.set_lensigned(1 as libc::c_int as libc::c_uint);
            init.set_lensize(::std::mem::size_of::<krb5_spake_msgtype>() as
                                 libc::c_ulong as libc::c_uint);
            init
        }
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
