use ::libc;
#[c2rust::header_src =
  "/home/nmavis/dev/gssapi-rs/code/src/include/com_err.h:47"]
pub mod com_err_h {
    /*
 * Copyright 1988, Student Information Processing Board of the
 * Massachusetts Institute of Technology.
 *
 * Copyright 1995 by Cygnus Support.
 *
 * For copyright and distribution info, see the documentation supplied
 * with this package.
 */
    /* Header file for common error description library. */
    #[c2rust::src_loc = "26:1"]
    pub type errcode_t = libc::c_long;
    #[derive(Copy, Clone)]
    #[repr(C)]
    #[c2rust::src_loc = "30:8"]
    pub struct error_table {
        pub msgs: *const *const libc::c_char,
        pub base: libc::c_long,
        pub n_msgs: libc::c_uint,
    }
    extern "C" {
        /*@modifies internalState@*/
        #[no_mangle]
        #[c2rust::src_loc = "57:1"]
        pub fn add_error_table(_: *const error_table) -> errcode_t;
    }
    /* ! defined(__COM_ERR_H) */
}
pub use self::com_err_h::{errcode_t, error_table, add_error_table};
/* Lclint doesn't handle null annotations on arrays
   properly, so we need this typedef in each
   generated .c file.  */
/*@-redef@*/
#[c2rust::src_loc = "19:1"]
pub type ncptr = *const libc::c_char;
/*@null@*/
/*@=redef@*/
#[c2rust::src_loc = "22:20"]
static mut text: [ncptr; 22] =
    [b"Input not recognized as database dump\x00" as *const u8 as
         *const libc::c_char,
     b"Bad token in dump file.\x00" as *const u8 as *const libc::c_char,
     b"Bad version in dump file\x00" as *const u8 as *const libc::c_char,
     b"Defective record encountered: \x00" as *const u8 as
         *const libc::c_char,
     b"Truncated input file detected.\x00" as *const u8 as
         *const libc::c_char,
     b"Import of dump failed\x00" as *const u8 as *const libc::c_char,
     b"Number of records imported does not match count\x00" as *const u8 as
         *const libc::c_char,
     b"Unknown command line option.\nUsage: ovsec_adm_import [filename]\x00"
         as *const u8 as *const libc::c_char,
     b"Warning -- continuing to import will overwrite existing databases!\x00"
         as *const u8 as *const libc::c_char,
     b"Database rename Failed!!\x00" as *const u8 as *const libc::c_char,
     b"Extra data after footer is ignored.\x00" as *const u8 as
         *const libc::c_char,
     b"Proceed <y|n>?\x00" as *const u8 as *const libc::c_char,
     b"while opening input file\x00" as *const u8 as *const libc::c_char,
     b"while importing databases\x00" as *const u8 as *const libc::c_char,
     b"cannot open /dev/tty!!\x00" as *const u8 as *const libc::c_char,
     b"while opening databases\x00" as *const u8 as *const libc::c_char,
     b"while acquiring permanent lock\x00" as *const u8 as
         *const libc::c_char,
     b"while releasing permanent lock\x00" as *const u8 as
         *const libc::c_char,
     b"while closing databases\x00" as *const u8 as *const libc::c_char,
     b"while retrieving configuration parameters\x00" as *const u8 as
         *const libc::c_char,
     b"mit-krb5\x00" as *const u8 as *const libc::c_char, 0 as ncptr];
#[no_mangle]
#[c2rust::src_loc = "49:26"]
pub static mut et_imp_error_table: error_table =
    unsafe {
        {
            let mut init =
                error_table{msgs: text.as_ptr(),
                            base: 37349888 as libc::c_long,
                            n_msgs: 20 as libc::c_int as libc::c_uint,};
            init
        }
    };
/*
 * et-c-import_err.c:
 * This file is automatically generated; please do not edit it.
 */
#[no_mangle]
#[c2rust::src_loc = "52:1"]
pub unsafe extern "C" fn initialize_imp_error_table() 
 /*@modifies internalState@*/
 {
    add_error_table(&et_imp_error_table);
}
