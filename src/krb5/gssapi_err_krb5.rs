/* ! defined(__COM_ERR_H) */
pub use crate::com_err_h::add_error_table;
pub use crate::com_err_h::errcode_t;
pub use crate::com_err_h::error_table;
/* Lclint doesn't handle null annotations on arrays
properly, so we need this typedef in each
generated .c file.  */
/*@-redef@*/

pub type ncptr = *const i8;
/*@null@*/
/*@=redef@*/

static mut text: [ncptr; 19] = [
    b"Principal in credential cache does not match desired name\x00" as *const u8 as *const i8,
    b"No principal in keytab matches desired name\x00" as *const u8 as *const i8,
    b"Credential cache has no TGT\x00" as *const u8 as *const i8,
    b"Authenticator has no subkey\x00" as *const u8 as *const i8,
    b"Context is already fully established\x00" as *const u8 as *const i8,
    b"Unknown signature type in token\x00" as *const u8 as *const i8,
    b"Invalid field length in token\x00" as *const u8 as *const i8,
    b"Attempt to use incomplete security context\x00" as *const u8 as *const i8,
    b"Bad magic number for krb5_gss_ctx_id_t\x00" as *const u8 as *const i8,
    b"Bad magic number for krb5_gss_cred_id_t\x00" as *const u8 as *const i8,
    b"Bad magic number for krb5_gss_enc_desc\x00" as *const u8 as *const i8,
    b"Sequence number in token is corrupt\x00" as *const u8 as *const i8,
    b"Credential cache is empty\x00" as *const u8 as *const i8,
    b"Acceptor and Initiator share no checksum types\x00" as *const u8 as *const i8,
    b"Requested lucid context version not supported\x00" as *const u8 as *const i8,
    b"PRF input too long\x00" as *const u8 as *const i8,
    b"Bad magic number for iakerb_ctx_id_t\x00" as *const u8 as *const i8,
    b"mit-krb5\x00" as *const u8 as *const i8,
    0 as ncptr,
];
#[no_mangle]

pub static mut et_k5g_error_table: crate::com_err_h::error_table = unsafe {
    {
        let mut init = crate::com_err_h::error_table {
            msgs: text.as_ptr(),
            base: 39756032 as isize,
            n_msgs: 17u32,
        };
        init
    }
};
/*
 * et-c-gssapi_err_krb5.c:
 * This file is automatically generated; please do not edit it.
 */
#[no_mangle]

pub unsafe extern "C" fn initialize_k5g_error_table()
/*@modifies internalState@*/
{
    crate::com_err_h::add_error_table(&et_k5g_error_table);
}
